<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>试题 历届试题 剪格子</title>
      <link href="//AC-everyday/lanqiao/prev/prev-4/"/>
      <url>//AC-everyday/lanqiao/prev/prev-4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">资源限制</span><br><span class="line">时间限制：1.0s   内存限制：256.0MB</span><br><span class="line">问题描述</span><br><span class="line">如下图所示，3 x 3 的格子中填写了一些整数。</span><br><span class="line"></span><br><span class="line">+--*--+--+</span><br><span class="line">|10* 1|52|</span><br><span class="line">+--****--+</span><br><span class="line">|20|30* 1|</span><br><span class="line">*******--+</span><br><span class="line">| 1| 2| 3|</span><br><span class="line">+--+--+--+</span><br><span class="line">我们沿着图中的星号线剪开，得到两个部分，每个部分的数字和都是60。</span><br><span class="line">本题的要求就是请你编程判定：对给定的m x n 的格子中的整数，是否可以分割为两个部分，使得这两个区域的数字和相等。</span><br><span class="line">如果存在多种解答，请输出包含左上角格子的那个区域包含的格子的最小数目。</span><br><span class="line">如果无法分割，则输出 0。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">程序先读入两个整数 m n 用空格分割 (m,n&lt;10)。</span><br><span class="line">表示表格的宽度和高度。</span><br><span class="line">接下来是n行，每行m个正整数，用空格分开。每个整数不大于10000。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line">输出一个整数，表示在所有解中，包含左上角的分割区可能包含的最小的格子数目。</span><br><span class="line">样例输入1</span><br><span class="line">3 3</span><br><span class="line">10 1 52</span><br><span class="line">20 30 1</span><br><span class="line">1 2 3</span><br><span class="line">样例输出1</span><br><span class="line">3</span><br><span class="line">样例输入2</span><br><span class="line">4 3</span><br><span class="line">1 1 1 1</span><br><span class="line">1 30 80 2</span><br><span class="line">1 1 1 100</span><br><span class="line">样例输出2</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>首先列出来这个题有很多特殊情况，其中一种就是下面这个数据。</p><img data-src="https://file.pyai.top/img/20200305231923.jpeg!img" style="zoom: 25%;" /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 4</span><br><span class="line">20 20 20 1</span><br><span class="line">1 20 1 1</span><br><span class="line">1 20 1 1</span><br><span class="line">1 1 1 90</span><br></pre></td></tr></table></figure><p>这种数据我下面这个代码（网上大部分都是这种直接dfs的）过不了，但是在蓝桥杯官网100分（数据水），</p><p>代码一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] vis = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] arr;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] dir = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> sum = <span class="number">0</span>, minCnt = <span class="number">1000</span>, m, n;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> curSum, <span class="keyword">int</span> curCnt)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(curSum);</span></span><br><span class="line">        <span class="keyword">if</span>(curSum * <span class="number">2</span> &gt;= sum) &#123;</span><br><span class="line">            <span class="keyword">if</span>(curSum * <span class="number">2</span> &gt; sum) <span class="keyword">return</span> ;</span><br><span class="line">            <span class="keyword">if</span>(vis[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span>) minCnt = Math.min(minCnt, curCnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> newX = x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> newY = y + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt; n &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt; m &amp;&amp; vis[newX][newY] == <span class="number">0</span>) &#123;</span><br><span class="line">                vis[newX][newY] = <span class="number">1</span>;</span><br><span class="line">                curCnt++;</span><br><span class="line">                dfs(newX, newY, curSum + arr[newX][newY], curCnt);</span><br><span class="line">                curCnt--;</span><br><span class="line">                vis[newX][newY] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        m = sc.nextInt(); n =sc.nextInt();</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                arr[i][j] = sc.nextInt();</span><br><span class="line">                sum += arr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sum % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                    vis[i][j] = <span class="number">1</span>;</span><br><span class="line">                    dfs(i, j, arr[i][j], <span class="number">1</span>);</span><br><span class="line">                    vis[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(minCnt == <span class="number">1000</span>) System.out.print(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">else</span> System.out.print(minCnt);</span><br><span class="line">        &#125;</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于过不了那个数据，于是我写了下面这个代码，但是这个代码有个数据会超时，但是算的结果都是对的。</p><p>这个代码基本上没办法剪枝（所以我觉得还没有直接<code>0/1</code>暴力好）。</p><img data-src="https://file.pyai.top/img/20200305232637.png!img" style="zoom:33%;" /><p>代码二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y)</span> </span>&#123;</span><br><span class="line">        x = _x; y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] vis = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">30</span>][<span class="number">30</span>], vis2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] arr;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] dir = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> sum = <span class="number">0</span>, minCnt = <span class="number">1000</span>, m, n;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>, curSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * m + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                vis2[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;Point&gt;queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(<span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        vis2[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        curSum += arr[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">        cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">            Point cur = queue.poll();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> newX = cur.x + dir[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> newY = cur.y + dir[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt; <span class="number">2</span> * n + <span class="number">1</span> &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt; <span class="number">2</span> * m + <span class="number">1</span> &amp;&amp; vis2[newX][newY] == <span class="number">0</span> &amp;&amp; vis[newX][newY] == <span class="number">0</span>) &#123;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> Point(newX, newY));</span><br><span class="line">                    vis2[newX][newY] = <span class="number">1</span>;</span><br><span class="line">                    curSum += arr[newX][newY];</span><br><span class="line">                    <span class="keyword">if</span>(curSum * <span class="number">2</span> &gt; sum) <span class="keyword">return</span> ;</span><br><span class="line">                    <span class="keyword">if</span>(arr[newX][newY] != <span class="number">0</span>) cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(curSum * <span class="number">2</span> == sum) minCnt = Math.min(minCnt, cnt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> newX = x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> newY = y + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt; <span class="number">2</span> * n + <span class="number">1</span> &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt; <span class="number">2</span> * m + <span class="number">1</span> &amp;&amp; vis[newX][newY] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[newX][newY] == <span class="number">0</span>) &#123;</span><br><span class="line">                    vis[newX][newY] = <span class="number">1</span>;</span><br><span class="line">                    dfs(newX, newY);</span><br><span class="line">                    vis[newX][newY] = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> Update();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        m = sc.nextInt(); n =sc.nextInt();</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[n * <span class="number">2</span> + <span class="number">1</span>][m * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                arr[i * <span class="number">2</span> + <span class="number">1</span>][j * <span class="number">2</span> + <span class="number">1</span>] = sc.nextInt();</span><br><span class="line">                sum += arr[i * <span class="number">2</span> + <span class="number">1</span>][j * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sum % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            vis[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(minCnt == <span class="number">1000</span>) System.out.print(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">else</span> System.out.print(minCnt);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bfs </tag>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 994.腐烂的橘子</title>
      <link href="//AC-everyday/leetcode/leetcode-994-rotting-oranges/"/>
      <url>//AC-everyday/leetcode/leetcode-994-rotting-oranges/</url>
      
        <content type="html"><![CDATA[<p>解法一，直接暴力。假设网格两个边长分别为 <code>n</code> 和 <code>m</code> ,复杂度 <code>O(n*m*max(n, m))</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">orangesRotting</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = grid.length, m = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> vis[][] = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>) cur++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cnt == <span class="number">0</span>) ans = cur;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(ans == cur) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> ans = cur;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(ans == <span class="number">0</span>) <span class="keyword">return</span> cnt;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(grid[i][j] == <span class="number">2</span> &amp;&amp; vis[i][j] == cnt) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(i - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[i - <span class="number">1</span>][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                            grid[i - <span class="number">1</span>][j] = <span class="number">2</span>;</span><br><span class="line">                            vis[i - <span class="number">1</span>][j] = cnt + <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(j - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[i][j - <span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                            grid[i][j - <span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">                            vis[i][j - <span class="number">1</span>] = cnt + <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(i + <span class="number">1</span> &lt; n &amp;&amp; grid[i + <span class="number">1</span>][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                            grid[i + <span class="number">1</span>][j] = <span class="number">2</span>;</span><br><span class="line">                            vis[i + <span class="number">1</span>][j] = cnt + <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(j + <span class="number">1</span> &lt; m &amp;&amp; grid[i][j + <span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                            grid[i][j + <span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">                            vis[i][j + <span class="number">1</span>] = cnt + <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法二，广度优先搜索。</p><ul><li>先找出腐烂的橘子，添加进 <code>queue</code> 中。</li><li>队列 <code>queue</code>只让腐烂的橘子入队；</li><li>出队时，让当前腐烂橘子四周的新鲜橘子都变为腐烂，即 <code>grid[newX][newY] = 2</code>。</li><li>用 <code>minute</code> 记录腐烂的持续时间，每一层的橘子在内一层的橘子的腐烂时间基础之上自增 <code>1</code>，代表时间过了 <code>1</code> 分钟。</li><li>最后检查网格中是否还有新鲜的橘子：<ul><li>有，返回 <code>-1</code> 代表 <code>impossible</code>。</li><li>没有则返回 <code>minute</code>。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pos</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y, minute;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pos</span><span class="params">(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> _minute)</span> </span>&#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">        minute = _minute;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">orangesRotting</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Pos&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> n = grid.length, m = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> minute = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> Pos(i, j, minute));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">            Pos cur = queue.poll();</span><br><span class="line">            minute = cur.minute;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> newX = cur.x + dir[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> newY = cur.y + dir[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt; n &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt; m &amp;&amp; grid[newX][newY] == <span class="number">1</span>) &#123;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> Pos(newX, newY, minute + <span class="number">1</span>));</span><br><span class="line">                    grid[newX][newY] = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minute;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理论上讲解法二应该比解法一速度快，但是在<code>leetcode</code>上解法二用的时间更多，很奇怪。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础练习 十六进制转八进制</title>
      <link href="//AC-everyday/lanqiao/basic/basic-12/"/>
      <url>//AC-everyday/lanqiao/basic/basic-12/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">资源限制</span><br><span class="line">时间限制：1.0s   内存限制：512.0MB</span><br><span class="line">问题描述</span><br><span class="line">　　给定n个十六进制正整数，输出它们对应的八进制数。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">　　输入的第一行为一个正整数n （1&lt;&#x3D;n&lt;&#x3D;10）。</span><br><span class="line">　　接下来n行，每行一个由0~9、大写字母A~F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line">　　输出n行，每行为输入对应的八进制正整数。</span><br><span class="line"></span><br><span class="line">　　【注意】</span><br><span class="line">　　输入的十六进制数不会有前导0，比如012A。</span><br><span class="line">　　输出的八进制数也不能有前导0。</span><br><span class="line"></span><br><span class="line">样例输入</span><br><span class="line">　　2</span><br><span class="line">　　39</span><br><span class="line">　　123ABC</span><br><span class="line"></span><br><span class="line">样例输出</span><br><span class="line">　　71</span><br><span class="line">　　4435274</span><br><span class="line"></span><br><span class="line">　　【提示】</span><br><span class="line">　　先将十六进制数转换成某进制数，再由某进制数转换成八进制。</span><br></pre></td></tr></table></figure><p><mark>每个十六进制数长度不超过100000</mark></p><p>由于是高精度问题，所以不能直接转数字。</p><div class="note danger"><p>在<code>java</code>里面的字符串拼接千万别用<code>+=</code>，转化成<code>StringBuffer</code>再操作，要不然会超时到怀疑人生。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">H2B</span><span class="params">(<span class="keyword">char</span> H)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(H == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">return</span> <span class="string">&quot;0000&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(H == <span class="string">&#x27;1&#x27;</span>) <span class="keyword">return</span> <span class="string">&quot;0001&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(H == <span class="string">&#x27;2&#x27;</span>) <span class="keyword">return</span> <span class="string">&quot;0010&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(H == <span class="string">&#x27;3&#x27;</span>) <span class="keyword">return</span> <span class="string">&quot;0011&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(H == <span class="string">&#x27;4&#x27;</span>) <span class="keyword">return</span> <span class="string">&quot;0100&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(H == <span class="string">&#x27;5&#x27;</span>) <span class="keyword">return</span> <span class="string">&quot;0101&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(H == <span class="string">&#x27;6&#x27;</span>) <span class="keyword">return</span> <span class="string">&quot;0110&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(H == <span class="string">&#x27;7&#x27;</span>) <span class="keyword">return</span> <span class="string">&quot;0111&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(H == <span class="string">&#x27;8&#x27;</span>) <span class="keyword">return</span> <span class="string">&quot;1000&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(H == <span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="string">&quot;1001&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(H == <span class="string">&#x27;A&#x27;</span>) <span class="keyword">return</span> <span class="string">&quot;1010&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(H == <span class="string">&#x27;B&#x27;</span>) <span class="keyword">return</span> <span class="string">&quot;1011&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(H == <span class="string">&#x27;C&#x27;</span>) <span class="keyword">return</span> <span class="string">&quot;1100&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(H == <span class="string">&#x27;D&#x27;</span>) <span class="keyword">return</span> <span class="string">&quot;1101&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(H == <span class="string">&#x27;E&#x27;</span>) <span class="keyword">return</span> <span class="string">&quot;1110&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1111&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Hex2Bin</span><span class="params">(String H)</span> </span>&#123;</span><br><span class="line">        StringBuffer B = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; H.length(); i++) &#123;</span><br><span class="line">            B.append(H2B(H.charAt(i)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> B.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(n-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            String Hex = sc.next();</span><br><span class="line">            <span class="keyword">if</span>(Hex.equals(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">                System.out.println(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String Bin = Hex2Bin(Hex); <span class="comment">// 先转换为二进制</span></span><br><span class="line">                <span class="keyword">if</span>(Bin.length() % <span class="number">3</span> == <span class="number">1</span>) Bin = <span class="string">&quot;00&quot;</span> + Bin;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(Bin.length() % <span class="number">3</span> == <span class="number">2</span>) Bin = <span class="string">&quot;0&quot;</span> + Bin;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">int</span> len = Bin.length();</span><br><span class="line">                <span class="keyword">int</span> st = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(Bin.substring(<span class="number">0</span>, <span class="number">3</span>).equals(<span class="string">&quot;000&quot;</span>)) st = <span class="number">3</span>;</span><br><span class="line">                </span><br><span class="line">                StringBuffer Oct = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = st; i &lt; len; i += <span class="number">3</span>) &#123;</span><br><span class="line">                    <span class="keyword">switch</span>(Bin.substring(i, i + <span class="number">3</span>)) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;000&quot;</span> : Oct.append(<span class="string">&quot;0&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;001&quot;</span> : Oct.append(<span class="string">&quot;1&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;010&quot;</span> : Oct.append(<span class="string">&quot;2&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;011&quot;</span> : Oct.append(<span class="string">&quot;3&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;100&quot;</span> : Oct.append(<span class="string">&quot;4&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;101&quot;</span> : Oct.append(<span class="string">&quot;5&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;110&quot;</span> : Oct.append(<span class="string">&quot;6&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;111&quot;</span> : Oct.append(<span class="string">&quot;7&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>:<span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                String O = Oct.toString();</span><br><span class="line">                System.out.println(O);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 第 178 场周赛</title>
      <link href="//AC-everyday/leetcode/contest/LeetCode-Weekly-Contest-178/"/>
      <url>//AC-everyday/leetcode/contest/LeetCode-Weekly-Contest-178/</url>
      
        <content type="html"><![CDATA[<h4 id="1-有多少小于当前数字的数字"><a href="#1-有多少小于当前数字的数字" class="headerlink" title="1. 有多少小于当前数字的数字"></a>1. 有多少小于当前数字的数字</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">smallerNumbersThanCurrent</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i != j &amp;&amp; nums[j] &lt; nums[i]) cur++;</span><br><span class="line">            &#125;</span><br><span class="line">            ret.push_back(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-通过投票对团队排名"><a href="#2-通过投票对团队排名" class="headerlink" title="2. 通过投票对团队排名"></a>2. 通过投票对团队排名</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">        <span class="built_in">string</span> ch;</span><br><span class="line">        <span class="keyword">int</span> rank[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node b)<span class="keyword">const</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(rank[i] &gt; b.rank[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(rank[i] &lt; b.rank[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ch &lt; b.ch;</span><br><span class="line">        &#125;</span><br><span class="line">        node()&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">rankTeams</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; votes)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> allchar = votes[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> len = allchar.length();</span><br><span class="line">        node all[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123; <span class="comment">// init</span></span><br><span class="line">            all[(allchar[i] - <span class="string">&#x27;A&#x27;</span>)].ch = allchar[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">26</span>; k++) all[j].rank[k] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; votes.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">                all[(votes[i][j]) - <span class="string">&#x27;A&#x27;</span>].rank[j]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sort(all, all + <span class="number">26</span>);</span><br><span class="line">        <span class="comment">// for(int i = 0; i &lt; len ; i++) &#123;</span></span><br><span class="line">        <span class="comment">//     cout &lt;&lt; all[i].ch &lt;&lt; &quot; : &quot;;</span></span><br><span class="line">        <span class="comment">//     for(int j = 0; j &lt; len; j++) cout &lt;&lt; all[i].rank[j] &lt;&lt; &quot; &quot;; cout &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">        <span class="comment">// &#125; cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">string</span> ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            ans += all[i].ch;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; all[i].rank[0] &lt;&lt; &quot; &quot; &lt;&lt; all[i].rank[1] &lt;&lt; &quot; &quot; &lt;&lt; all[i].rank[2] &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-二叉树中的列表"><a href="#3-二叉树中的列表" class="headerlink" title="3. 二叉树中的列表"></a>3. 二叉树中的列表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(ListNode* head, TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span> || root -&gt; val != head -&gt; val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> solve(head -&gt; next, root -&gt; left) || solve(head -&gt; next, root -&gt; right); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSubPath</span><span class="params">(ListNode* head, TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> solve(head, root) || isSubPath(head, root -&gt; left) || isSubPath(head, root -&gt; right);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="4-使网格图至少有一条有效路径的最小代价"><a href="#4-使网格图至少有一条有效路径的最小代价" class="headerlink" title="4. 使网格图至少有一条有效路径的最小代价"></a>4. 使网格图至少有一条有效路径的最小代价</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> x, y, c;</span><br><span class="line">        point()&#123;&#125;</span><br><span class="line">        point(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> c):x(x), y(y), c(c)&#123;&#125;</span><br><span class="line">        <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (point a, point b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a.c &gt; b.c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_ok</span><span class="params">(point p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (p.x &gt;= <span class="number">0</span> &amp;&amp; p.x &lt; n &amp;&amp; p.y &gt;= <span class="number">0</span> &amp;&amp; p.y &lt; m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minCost</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">priority_queue</span>&lt;point&gt; pq;</span><br><span class="line">        <span class="keyword">int</span> vis[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">-1</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">int</span> nx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;, ny[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;; <span class="comment">//按照右左下上的顺序</span></span><br><span class="line">        n = grid.size(), m = grid[<span class="number">0</span>].size();</span><br><span class="line">        point cur = point(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        pq.push(cur);</span><br><span class="line">        vis[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!pq.empty()) &#123;</span><br><span class="line">            cur = pq.top();</span><br><span class="line">            pq.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                point nxt = cur;</span><br><span class="line">                nxt.x += nx[i]; nxt.y += ny[i];</span><br><span class="line">                <span class="keyword">if</span>(!is_ok(nxt)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(grid[cur.x][cur.y] != i + <span class="number">1</span>) nxt.c++;</span><br><span class="line">                <span class="keyword">if</span>(vis[nxt.x][nxt.y] == <span class="number">-1</span> || nxt.c &lt; vis[nxt.x][nxt.y]) &#123;</span><br><span class="line">                    vis[nxt.x][nxt.y] = nxt.c;</span><br><span class="line">                    pq.push(nxt);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vis[n<span class="number">-1</span>][m<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十届蓝桥杯大赛软件类省赛Java大学B组题解</title>
      <link href="//AC-everyday/lanqiao/The-10th-Blue-Bridge-Cup-Software-Provincial-Java-University-Group-B/"/>
      <url>//AC-everyday/lanqiao/The-10th-Blue-Bridge-Cup-Software-Provincial-Java-University-Group-B/</url>
      
        <content type="html"><![CDATA[<p>第十届蓝桥杯大赛软件类省赛Java大学B组题解</p><h4 id="试题-A-组队"><a href="#试题-A-组队" class="headerlink" title="试题 A: 组队"></a>试题 A: 组队</h4><p>本题总分:5 分</p><p>答案: 490</p><p>数据小，直接暴力写就行，就是五层循环有点丑，无伤大雅😁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">20</span>, n = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> grade[][] = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                grade[i][j] = cin.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == i)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (k == i || k == j)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; m; p++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (p == i || p == j || p == k)</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> q = <span class="number">0</span>; q &lt; m; q++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (q == i || q == j || q == k || q == p)</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            ans = Math.max(ans, grade[i][<span class="number">0</span>] + grade[j][<span class="number">1</span>] + grade[k][<span class="number">2</span>] + grade[p][<span class="number">3</span>] + grade[q][<span class="number">4</span>]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(ans);</span><br><span class="line"></span><br><span class="line">        cin.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 数据 </span></span><br><span class="line"><span class="comment">97 90 0 0 0 92 85 96 0 0 0 0 0 0 93 0 0 0 80 86 89 83 97 0 0 82 86 0 0 0 0</span></span><br><span class="line"><span class="comment">0 0 87 90 0 97 96 0 0 0 0 89 0 0 95 99 0 0 0 0 0 96 97 0 0 0 0 93 98 94 91 0</span></span><br><span class="line"><span class="comment">0 0 0 83 87 0 0 0 0 98 97 98 0 0 0 93 86 98 83 99 98 81 93 87 92 96 98 0 0 0</span></span><br><span class="line"><span class="comment">89 92 0 99 96 95 81</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="试题-B-不同子串"><a href="#试题-B-不同子串" class="headerlink" title="试题 B: 不同子串"></a>试题 B: 不同子串</h4><p>本题总分:5 分</p><p>答案: 100</p><p>就是将所有子串都加入到集合中，通过<code>HashMap</code>自动去重来判断有多少不同字串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String str = cin.next();</span><br><span class="line">        <span class="keyword">int</span> len = str.length();</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; len; j++) &#123;</span><br><span class="line">                set.add(str.substring(i, j + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(set.size());</span><br><span class="line"></span><br><span class="line">        cin.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 数据 </span></span><br><span class="line"><span class="comment">0100110001010001</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="试题-C-数列求值"><a href="#试题-C-数列求值" class="headerlink" title="试题 C: 数列求值"></a>试题 C: 数列求值</h4><p>本题总分:10 分</p><p>答案: 4659</p><p>由于只需要后四位，每次对<code>10000</code>取模就行了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">1</span>, c = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= <span class="number">20190324</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = (a + b + c) % <span class="number">10000</span>;</span><br><span class="line">            a = b; b = c; c = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(c);</span><br><span class="line">        cin.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 数据 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>剩下的有空再写。。。</p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 51.N皇后</title>
      <link href="//AC-everyday/leetcode/leetcode-51-N-Queens/"/>
      <url>//AC-everyday/leetcode/leetcode-51-N-Queens/</url>
      
        <content type="html"><![CDATA[ <blockquote class="blockquote-center"><p>在家别憋坏了，写个题运动一下。</p></blockquote><a id="more"></a><p><code>n</code> 皇后问题研究的是如何将 <code>n</code> 个皇后放置在 <code>n</code>×<code>n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p><img data-src="/images/leetcode/51.png" alt="上图为 8 皇后问题的一种解法。"></p><p>给定一个整数 <code>n</code>，返回所有不同的 <code>n</code> 皇后问题的解决方案。<br>每一种解法包含一个明确的 <code>n</code> 皇后问题的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入: 4</span><br><span class="line">输出: [</span><br><span class="line"> [&quot;.Q..&quot;,  &#x2F;&#x2F; 解法 1</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;..Q.&quot;],</span><br><span class="line"></span><br><span class="line"> [&quot;..Q.&quot;,  &#x2F;&#x2F; 解法 2</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;.Q..&quot;]</span><br><span class="line">]</span><br><span class="line">解释: 4 皇后问题存在两个不同的解法。</span><br></pre></td></tr></table></figure><div class="note primary"><p>因为这个新型肺炎导致现在还没开学，现在只能每天躺床上了。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L[], R[], col[], row[];<span class="comment">//L和R标记两个对角线, col标记哪一列有皇后, row存储每一行的皇后在哪一列</span></span><br><span class="line">    List&lt;List&lt;String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        L = <span class="keyword">new</span> <span class="keyword">int</span>[n + n];</span><br><span class="line">        R = <span class="keyword">new</span> <span class="keyword">int</span>[n + n];</span><br><span class="line">        col = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        row = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        init(n);</span><br><span class="line">        solve(<span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> cur_row, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur_row == n) &#123; </span><br><span class="line">            List&lt;String&gt;cur_ans = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; row[i]; j++) sb.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">                sb.append(<span class="string">&quot;Q&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = row[i] + <span class="number">1</span>; j &lt; n; j++) sb.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">                cur_ans.add(sb.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(cur_ans);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(col[i] == <span class="number">0</span> &amp;&amp; L[cur_row + i] == <span class="number">0</span> &amp;&amp; R[cur_row - i + n] == <span class="number">0</span>) &#123;</span><br><span class="line">                row[cur_row] = i; col[i] = <span class="number">1</span>; L[cur_row + i] = <span class="number">1</span>; R[cur_row - i + n] = <span class="number">1</span>;</span><br><span class="line">                solve(cur_row + <span class="number">1</span>, n);</span><br><span class="line">                col[i] = <span class="number">0</span>; L[cur_row + i] = <span class="number">0</span>; R[cur_row - i + n] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> dfs </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Hexo博客Next主题中添加腾讯兔小巢</title>
      <link href="//blog/hexo-add-tucao/"/>
      <url>//blog/hexo-add-tucao/</url>
      
        <content type="html"><![CDATA[<h3 id="关于兔小巢"><a href="#关于兔小巢" class="headerlink" title="关于兔小巢"></a>关于兔小巢</h3><h4 id="兔小巢是哪些人，为什么做的？"><a href="#兔小巢是哪些人，为什么做的？" class="headerlink" title="兔小巢是哪些人，为什么做的？"></a>兔小巢是哪些人，为什么做的？</h4><p>答：我们是腾讯 CDC 的几个产品经理，做的产品免不了经常被用户在微博、贴吧等地方吐槽。与其让用户在网上各个地方吐槽，不如布置一个舒服点的地方，让产品经理和用户经常碰面。于是有了兔小巢，也希望这个“地方”能给同行的产品人用。</p><h4 id="这是免费开放的吗？有哪些-App-在用呢？"><a href="#这是免费开放的吗？有哪些-App-在用呢？" class="headerlink" title="这是免费开放的吗？有哪些 App 在用呢？"></a>这是免费开放的吗？有哪些 App 在用呢？</h4><p>答：兔小巢免费开放。不会走付费升级的路子。现在已经有包括腾讯新闻、天天快报、起点读书等上百个产品使用。</p><h4 id="不是腾讯的-APP-，也可以用吗？"><a href="#不是腾讯的-APP-，也可以用吗？" class="headerlink" title="不是腾讯的 APP ，也可以用吗？"></a>不是腾讯的 APP ，也可以用吗？</h4><p>答：当然可以用，开放出来，就是为了志同道合的产品人，都能在一个舒服的地方，和自己的用户唠嗑。</p><h4 id="适合哪些类型-App-啊？嵌入复杂吗？"><a href="#适合哪些类型-App-啊？嵌入复杂吗？" class="headerlink" title="适合哪些类型 App 啊？嵌入复杂吗？"></a>适合哪些类型 App 啊？嵌入复杂吗？</h4><p>答：特别适合内容型、工具型产品。这里是产品经理与用户“见面”、唠嗑、听用户吐槽的地方。我们争取做到让产品在3分钟内完成兔小巢的嵌入。简单、易用是兔小巢的性格。</p><h4 id="你们是否持续认真做的？遇到-bug-或不爽怎么办？"><a href="#你们是否持续认真做的？遇到-bug-或不爽怎么办？" class="headerlink" title="你们是否持续认真做的？遇到 bug 或不爽怎么办？"></a>你们是否持续认真做的？遇到 bug 或不爽怎么办？</h4><p>答：虽然是一款小产品，但为了让我们自己有舒服的地方面对用户，也是本着一个产品人的心，我们会不断让兔小巢好用、更好用。遇到 bug 或不爽，果断戳这里来吐槽，欢迎大家反馈意见。</p><h4 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h4><h5 id="注册腾讯吐个槽-gt-链接"><a href="#注册腾讯吐个槽-gt-链接" class="headerlink" title="注册腾讯吐个槽 ==&gt; 链接"></a>注册腾讯吐个槽 ==&gt; <a href="https://tucao.qq.com/" rel="external nofollow noreferrer">链接</a></h5><h5 id="创建产品"><a href="#创建产品" class="headerlink" title="创建产品"></a>创建产品</h5><p>创建成功会显示：</p><blockquote><p>创建成功，您的吐个槽访问地址如下:<br><a href="https://support.qq.com/product/%E4%BD%A0%E7%9A%84%E4%BA%A7%E5%93%81id" rel="external nofollow noreferrer">https://support.qq.com/product/你的产品id</a></p></blockquote><h5 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h5><p>让兔小巢在侧边栏显示</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line"><span class="addition">+  腾讯兔小巢: https://support.qq.com/products/你的产品id || qq</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 4.寻找两个有序数组的中位数</title>
      <link href="//AC-everyday/leetcode/leetcode-4-median-of-two-sorted-arrays/"/>
      <url>//AC-everyday/leetcode/leetcode-4-median-of-two-sorted-arrays/</url>
      
        <content type="html"><![CDATA[<p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。<br>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。<br>你可以假设 nums1 和 nums2 不会同时为空。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums1 &#x3D; [1, 3]</span><br><span class="line">nums2 &#x3D; [2]</span><br><span class="line"></span><br><span class="line">则中位数是 2.0</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums1 &#x3D; [1, 2]</span><br><span class="line">nums2 &#x3D; [3, 4]</span><br><span class="line"></span><br><span class="line">则中位数是 (2 + 3)&#x2F;2 &#x3D; 2.5</span><br></pre></td></tr></table></figure><p><img data-src="/images/leetcode/4.jpg" alt="ac"></p><p><strong>简单解析</strong>：最重要的就是求两个有序数组中的第k大，有几个小细节注意一下就行了。<br>如，求两个有序数组$A$和$B$的第$K$大的数，那么将$A$和$B$的前$\frac{K}{2}$的数组分别切割出来，比较$A[\frac{K}{2}]$和$B[\frac{K}{2}]$的大小就可以消去$\frac{K}{2}$个数，为什么那？因为如果$A[\frac{K}{2}]&lt;B[\frac{K}{2}]$，那么$A[0:\frac{K}{2}]$肯定都小于$B[\frac{K}{2}]$（废话），所以接下来只需要在剩下的数中找第$\frac{K}{2}$大的数就行了（一些细节没描述），详见代码。<br>时间复杂度：$O(log_{2}{(len(A)+len(B)}))$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findkth</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> l1, <span class="keyword">int</span> r1, <span class="keyword">int</span> l2, <span class="keyword">int</span> r2, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 &gt; r1) <span class="keyword">return</span> nums2[l2 + k <span class="number">-1</span>]; <span class="comment">// 如果nums1空了，return nums2的第k个，下同理</span></span><br><span class="line">        <span class="keyword">if</span> (l2 &gt; r2) <span class="keyword">return</span> nums1[l1 + k <span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> min(nums1[l1], nums2[l2]); <span class="comment">// 因为最后一次比较后肯定是前k个比较完了，l1和r1一个是在前k个，一个不是</span></span><br><span class="line">                                                        <span class="comment">// 前k个，答案是第k个，是小的那个，所以取min()</span></span><br><span class="line">        <span class="keyword">int</span> mid = k / <span class="number">2</span>; <span class="comment">// 如果是奇数就向下取整</span></span><br><span class="line">        <span class="keyword">int</span> new1 = l1 + mid - <span class="number">1</span>, new2 = l2 + mid <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (new1 &gt; r1) new1 = r1; <span class="comment">// 当溢出时让new1=r1，不影响结果，只是令log2不太log2而已</span></span><br><span class="line">        <span class="keyword">if</span> (new2 &gt; r2) new2 = r2;</span><br><span class="line">        <span class="keyword">if</span> (nums1[new1] &lt; nums2[new2]) &#123;</span><br><span class="line">            <span class="keyword">return</span> findkth(nums1, nums2, new1 + <span class="number">1</span>, r1, l2, r2, k - (new1 - l1 + <span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> findkth(nums1, nums2, l1, r1, new2 + <span class="number">1</span>, r2, k - (new2 - l2 + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = nums1.size(), len2 = nums2.size();</span><br><span class="line">        <span class="keyword">if</span> ((len1 + len2) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> findkth(nums1, nums2, <span class="number">0</span>, len1 - <span class="number">1</span>, <span class="number">0</span>, len2 - <span class="number">1</span>, (len1 + len2 + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> ans = findkth(nums1, nums2, <span class="number">0</span>, len1 - <span class="number">1</span>, <span class="number">0</span>, len2 - <span class="number">1</span>, (len1 + len2) / <span class="number">2</span>);</span><br><span class="line">        ans += findkth(nums1, nums2, <span class="number">0</span>, len1 - <span class="number">1</span>, <span class="number">0</span>, len2 - <span class="number">1</span>, (len1 + len2) / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        ans /= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python对淘宝评论进行情感分析并绘制词云</title>
      <link href="//Junior/python/emotional-analysis-of-taobao-comments-using-python/"/>
      <url>//Junior/python/emotional-analysis-of-taobao-comments-using-python/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>针对单个商品爬取所有用户评论，然后对评论信息进行数据清洗，最后使用百度的深度学习中文情感分析工具<code>Senta</code>进行情感分析，使得所有的好评、差评、好评率、好评与差评使用比例饼图展现。</p><a id="more"></a><h4 id="爬取数据"><a href="#爬取数据" class="headerlink" title="爬取数据"></a>爬取数据</h4><p>因为要使用<code>selenium</code>操纵<code>Google Chrome</code>浏览器，所以要将<code>chromedriver</code>放到<code>usr/local/bin</code>目录下。</p><img data-src="/images/junior/python/pachong_taobao/chromedriver.jpg" width="80%"><p>我选择的商品是 <code>三只松鼠_香酥小黄鱼96g</code> 。</p><p><img data-src="/images/junior/python/pachong_taobao/target.jpg" alt="target"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爬取评论</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># chromeDriver 在 /usr/local/bin</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 三只松鼠_香酥小黄鱼96g商品链接</span></span><br><span class="line">url=<span class="string">&#x27;https://detail.tmall.com/item.htm?spm=a230r.1.14.6.4c207c75wjrvsJ&amp;id=551835141835&amp;cm_id=140105335569ed55e27b&amp;abbucket=9&amp;skuId=4069566081270&#x27;</span></span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;window.scrollBy(0, 768)&quot;</span>,<span class="string">&quot;&quot;</span>) <span class="comment"># 页面向下滚动768px</span></span><br><span class="line"><span class="comment"># 在点击之前多sleep一会，考虑网速原因，如果在按钮未加载出来之前click程序就会报错终止。</span></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line">comments_li = driver.find_element_by_id(<span class="string">&#x27;J_TabBar&#x27;</span>).find_elements_by_tag_name(<span class="string">&#x27;li&#x27;</span>)[<span class="number">1</span>].click() <span class="comment"># 找到评论按钮所在的li标签</span></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;original_data&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> opf:</span><br><span class="line">    writer = csv.writer(opf)</span><br><span class="line">    title=[<span class="string">&#x27;user_id&#x27;</span>,<span class="string">&#x27;comments&#x27;</span>]</span><br><span class="line">    writer.writerow(title)</span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 天猫只能显示99页的评论</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        <span class="comment"># 防止被轻易检测出是爬虫，每次睡眠时间都不一样</span></span><br><span class="line">        sleep(<span class="number">2</span> + random.random())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):  <span class="comment"># 网页下拉三次，确保数据加载完成</span></span><br><span class="line">            driver.execute_script(<span class="string">&quot;window.scrollBy(0, 800)&quot;</span>, <span class="string">&quot;&quot;</span>)  <span class="comment"># 页面向下滚动800px</span></span><br><span class="line">            sleep(<span class="number">1</span> + random.random())</span><br><span class="line">        sleep(random.choice([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) + random.random())</span><br><span class="line">        parent_div = driver.find_element_by_id(<span class="string">&#x27;J_Reviews&#x27;</span>).find_element_by_class_name(<span class="string">&#x27;rate-grid&#x27;</span>)</span><br><span class="line">        all_trs = parent_div.find_elements_by_tag_name(<span class="string">&#x27;tr&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> all_trs:</span><br><span class="line">            data = []</span><br><span class="line">            data.append(<span class="string">&quot;user_%d&quot;</span> % count)</span><br><span class="line">            comments=<span class="string">&#x27; &#x27;</span></span><br><span class="line">            all_comments = tr.find_elements_by_class_name(<span class="string">&#x27;tm-rate-fulltxt&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> i, comment <span class="keyword">in</span> enumerate(all_comments):</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                    comments = comments + comment.text.strip()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    comments = comments + <span class="string">&#x27;\n        追加评论: &#x27;</span> + comment.text.strip()</span><br><span class="line">            data.append(comments)</span><br><span class="line">            writer.writerow(data)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        driver.find_element_by_class_name(<span class="string">&#x27;rate-paginator&#x27;</span>).find_elements_by_tag_name(<span class="string">&#x27;a&#x27;</span>)[<span class="number">-1</span>].click()</span><br><span class="line">        sleep(random.choice([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]) + random.random())</span><br><span class="line">        driver.delete_all_cookies()</span><br></pre></td></tr></table></figure><p>为了不给淘宝系统添加负担，每操作一下都会<code>sleep</code>一会，确保爬取过程顺畅。爬取过程中如果遇见登录窗口，一定要及时关闭，防止爬虫中断。</p><p>因为淘宝只显示<code>99</code>页评论，所以对于单个商品只爬到了<code>2000</code>条评论。</p><p><img data-src="/images/junior/python/pachong_taobao/original_data.jpg" alt="original_data"></p><h4 id="清洗数据"><a href="#清洗数据" class="headerlink" title="清洗数据"></a>清洗数据</h4><p>很容易就可以发现上述数据有很多是没有用处的，并且妨碍情感分析的。比如 <code>追加评论：</code> 和 <code>此用户没有填写评论!</code> ，这些明显没用的要删掉。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将爬到的评论进行清洗</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;original_data.csv&#x27;</span>, names=[<span class="string">&#x27;user_id&#x27;</span>, <span class="string">&#x27;content&#x27;</span>], header=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去重</span></span><br><span class="line">cnt = df.duplicated().value_counts()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除店家的回复，店家回复的格式: &quot;解释:...&quot;</span></span><br><span class="line">comment_split = df[<span class="string">&#x27;content&#x27;</span>].str.split(<span class="string">&#x27;解释&#x27;</span>).apply(pd.Series)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只取第一列作为有效数据</span></span><br><span class="line">df[<span class="string">&#x27;content&#x27;</span>] = comment_split[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;content&#x27;</span>] = df[<span class="string">&#x27;content&#x27;</span>].str.replace(<span class="string">&#x27;追加评论：&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">df[<span class="string">&#x27;content&#x27;</span>] = df[<span class="string">&#x27;content&#x27;</span>].str.replace(<span class="string">&#x27;此用户没有填写评论!&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># df.info()</span></span><br><span class="line">df.to_csv(<span class="string">&#x27;new_data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># from snownlp import SnowNLP</span></span><br><span class="line"><span class="comment"># comments = df.iloc[:, 1]</span></span><br><span class="line"><span class="comment"># comments = comments[comments.apply(len)&gt;=10]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># good_counter = 0 # 好评数</span></span><br><span class="line"><span class="comment"># just_so_so_counter = 0 # 中评</span></span><br><span class="line"><span class="comment"># bad_counter = 0 #差评数</span></span><br><span class="line"><span class="comment"># sum = 0 # 总评分</span></span><br><span class="line"><span class="comment"># cnt = 0</span></span><br><span class="line"><span class="comment"># for item in comments:</span></span><br><span class="line"><span class="comment">#     sentiment = SnowNLP(str(item)).sentiments</span></span><br><span class="line"><span class="comment">#     sum += sentiment</span></span><br><span class="line"><span class="comment">#     if sentiment &gt; 0.8:</span></span><br><span class="line"><span class="comment">#         good_counter += 1</span></span><br><span class="line"><span class="comment">#     elif sentiment &gt; 0.4:</span></span><br><span class="line"><span class="comment">#         just_so_so_counter += 1</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         bad_counter += 1</span></span><br><span class="line"><span class="comment">#     print(&quot;%d %f %s&quot; % (cnt, sentiment, item))</span></span><br><span class="line"><span class="comment">#     cnt += 1</span></span><br><span class="line"><span class="comment"># print(&quot;good: %d, just_so_so: %d, bad: %d, average : %f&quot;</span></span><br><span class="line"><span class="comment">#       %(good_counter, just_so_so_counter, bad_counter, sum/len(comments)))</span></span><br></pre></td></tr></table></figure><h4 id="情感分析"><a href="#情感分析" class="headerlink" title="情感分析"></a>情感分析</h4><p>刚开始纠结用哪个框架来分析，在比较了<code>SnowNLP</code>和<code>senta_bilstm</code>之后<code>senta_bilstm</code>完胜，毕竟是百度的。</p><p>比如下面这句话，明明是好评，使用<code>SnowNLP</code>分析成了差评（越接近<code>1</code>越积极，越接近<code>0</code>越消极）。</p><p><img data-src="/images/junior/python/pachong_taobao/snownlp.jpg" alt="snownlp"></p><p>再看<code>paddelhub</code>的<code>senta_bilstm</code>的效果。</p><img data-src="/images/junior/python/pachong_taobao/senta_bilstm.jpg" width="80%"><p>上面才是正确的情感分析应该显示出来的，百度完胜！</p><p>下面开始正式使用<code>senta_bilstm</code>进行情感分析。</p><p><img data-src="/images/junior/python/pachong_taobao/analysis_0.jpg" alt="analysis_0"></p><p>我对差评比较感兴趣，所以单独把差评打印出来了一份。</p><p><img data-src="/images/junior/python/pachong_taobao/analysis_1.jpg" alt="analysis_1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paddlehub <span class="keyword">as</span> hub</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> six</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.font_manager <span class="keyword">as</span> fm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;Arial Unicode MS&#x27;</span>] <span class="comment"># 更换字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span> <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">senta = hub.Module(name=<span class="string">&quot;senta_bilstm&quot;</span>)</span><br><span class="line"></span><br><span class="line">text = []</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;new_data.csv&#x27;</span>)</span><br><span class="line">pos = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(df)):</span><br><span class="line">    text.append(df.loc[i, <span class="string">&#x27;content&#x27;</span>])</span><br><span class="line">dict = &#123;<span class="string">&quot;content&quot;</span>: text&#125;</span><br><span class="line"></span><br><span class="line">input_dict = &#123;<span class="string">&quot;text&quot;</span>: text&#125;</span><br><span class="line"></span><br><span class="line">results = senta.sentiment_classify(data=input_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, text <span class="keyword">in</span> enumerate(text):</span><br><span class="line">    results[index][<span class="string">&quot;text&quot;</span>] = text</span><br><span class="line"></span><br><span class="line">good = <span class="number">0</span></span><br><span class="line">bad = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> index, result <span class="keyword">in</span> enumerate(results):</span><br><span class="line">    <span class="keyword">if</span> six.PY2:</span><br><span class="line">        print(json.dumps(results[index], encoding=<span class="string">&quot;utf8&quot;</span>, ensure_ascii=<span class="literal">False</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tag = results[index][<span class="string">&#x27;sentiment_key&#x27;</span>]</span><br><span class="line">        <span class="comment"># print(&quot;\033[42m %s \033[0m&quot; % results[index][&#x27;sentiment_key&#x27;])</span></span><br><span class="line">        <span class="keyword">if</span> tag == <span class="string">&#x27;positive&#x27;</span>:</span><br><span class="line">            print(<span class="string">&quot;%4d \033[41m 好评 \033[0m &quot;</span> % index, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            good += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;%4d \033[43m 差评 \033[0m &quot;</span> % index, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            bad += <span class="number">1</span></span><br><span class="line">        print(<span class="string">&quot;\033[42m %f \033[0m %s&quot;</span> %(results[index][<span class="string">&#x27;positive_probs&#x27;</span>], results[index][<span class="string">&#x27;text&#x27;</span>]))</span><br><span class="line">print(<span class="string">&quot;好评: %d, 差评: %d 好评率: %.2f%s&quot;</span> % (good, bad, <span class="number">100</span> * good/(good + bad), <span class="string">&quot;%&quot;</span>))</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;好评差评比例饼图&#x27;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">label = [<span class="string">&#x27;好评&#x27;</span>, <span class="string">&#x27;差评&#x27;</span>]</span><br><span class="line">explode = [<span class="number">0.01</span>, <span class="number">0.01</span>]</span><br><span class="line">patches, texts, autotexts = plt.pie([good, bad], explode=explode, labels=label, autopct=<span class="string">&#x27;%1.1f%%&#x27;</span>)</span><br><span class="line">proptease = fm.FontProperties()</span><br><span class="line">proptease.set_size(<span class="number">20</span>)</span><br><span class="line">plt.setp(autotexts, fontproperties=proptease)</span><br><span class="line">plt.setp(texts, fontproperties=proptease)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="绘制词云"><a href="#绘制词云" class="headerlink" title="绘制词云"></a>绘制词云</h4><p>使用的<code>WordCloud</code>绘制词云，背景随便找一个图片就行。</p><img data-src="/images/junior/python/pachong_taobao/wordcloud.jpg" width="80%"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line">mpl.use(<span class="string">&quot;TkAgg&quot;</span>)</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud, STOPWORDS, ImageColorGenerator</span><br><span class="line"><span class="comment"># Read the whole text.</span></span><br><span class="line">text = <span class="string">&#x27;&#x27;</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;new_data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(df)):</span><br><span class="line">    text += df.loc[i, <span class="string">&#x27;content&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># read the mask / color image taken from # http://jirkavinse.deviantart.com/art/quot-Real-Life-quot-Alice-282261010</span></span><br><span class="line">Adele_coloring = np.array(Image.open(<span class="string">&quot;head.png&quot;</span>))</span><br><span class="line">stopwords = set(STOPWORDS)</span><br><span class="line">stopwords.add(<span class="string">&quot;said&quot;</span>)</span><br><span class="line"></span><br><span class="line">font = <span class="string">&#x27;/Library/Fonts/Arial Unicode.ttf&#x27;</span></span><br><span class="line"></span><br><span class="line">wc = WordCloud(font_path=font,</span><br><span class="line">                          width=<span class="number">1200</span>,</span><br><span class="line">                          height=<span class="number">1200</span>,</span><br><span class="line">                          mask=Adele_coloring).generate(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create coloring from image</span></span><br><span class="line">image_colors = ImageColorGenerator(Adele_coloring)</span><br><span class="line"></span><br><span class="line"><span class="comment"># show</span></span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">plt.imshow(wc.recolor(color_func=image_colors), interpolation=<span class="string">&quot;bilinear&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">wc.to_file(<span class="string">&#x27;show_English.png&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://blog.csdn.net/weixin_42219368/article/details/80840151?utm_source=app" rel="external nofollow noreferrer">热销商品评论之情感分析案例 - 基于LDA、贝叶斯模型算法实现</a></li><li><a href="https://lovelybuggies.github.io/2019/01/19/word_cloud%E4%B8%AD%E6%96%87%E8%AF%8D%E4%BA%91/" rel="external nofollow noreferrer">word_cloud 中文词云</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在服务器搭建jupyter notebook</title>
      <link href="//Junior/python/install-anaconda-and-jupyter/"/>
      <url>//Junior/python/install-anaconda-and-jupyter/</url>
      
        <content type="html"><![CDATA[<h4 id="安装Anaconda-和-Jupyter"><a href="#安装Anaconda-和-Jupyter" class="headerlink" title="安装Anaconda 和 Jupyter"></a>安装Anaconda 和 Jupyter</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;repo.anaconda.com&#x2F;archive&#x2F;Anaconda3-2019.03-Linux-x86_64.sh</span><br><span class="line">chmod +x Anaconda3-2019.03-Linux-x86_64.sh</span><br><span class="line">yum install -y bzip2</span><br><span class="line">.&#x2F;Anaconda3-2019.03-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>安装过程中遇见 <code>yes/no</code> 选择 <code>yes</code> ，其他的默认回车。</p><p>安装结束后运行 <code>source ~/.bashrc</code></p><h4 id="生成Jupyter-Notebook配置文件"><a href="#生成Jupyter-Notebook配置文件" class="headerlink" title="生成Jupyter Notebook配置文件"></a>生成Jupyter Notebook配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><h4 id="修改Jupyter配置文件允许Root启动"><a href="#修改Jupyter配置文件允许Root启动" class="headerlink" title="修改Jupyter配置文件允许Root启动"></a>修改Jupyter配置文件允许Root启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;root&#x2F;.jupyter&#x2F;jupyter_notebook_config.py</span><br><span class="line">将c.NotebookApp.allow_root &#x3D; False前边的  &#39;#&#39;去掉，在把False修改为True</span><br></pre></td></tr></table></figure><h4 id="生成密码"><a href="#生成密码" class="headerlink" title="生成密码"></a>生成密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">打开 ipython &#x2F;&#x2F;直接输入ipython</span><br><span class="line">from notebook.auth import passwd</span><br><span class="line">passwd()</span><br><span class="line">Enter password:  &#x2F;&#x2F;输入一次密码</span><br><span class="line">Verify password:  &#x2F;&#x2F;再次输入密码</span><br><span class="line">sha1：ae9e423f48ae:a8................................ &#x2F;&#x2F;复制下来，下面要用。</span><br></pre></td></tr></table></figure><h4 id="再次修改配置文件"><a href="#再次修改配置文件" class="headerlink" title="再次修改配置文件"></a>再次修改配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;root&#x2F;.jupyter&#x2F;jupyter_notebook_config.py</span><br><span class="line">&#x2F;&#x2F; 将下面内容前面的注释删掉，并修改一些内容。</span><br><span class="line">c.NotebookApp.ip&#x3D;&#39;*&#39;</span><br><span class="line">c.NotebookApp.password &#x3D; &#39;sha1:ae9e423f48aea8xxxxxx&#39; &#x2F;&#x2F;这个密码是上面生成的。</span><br><span class="line">c.NotebookApp.allow_remote_access &#x3D; True</span><br><span class="line">c.NotebookApp.open_browser &#x3D; False</span><br><span class="line">c.NotebookApp.port &#x3D; 9999 &#x2F;&#x2F;默认8888，改不改都行。</span><br></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br><span class="line">&#x2F;&#x2F;记得先关掉Firewall</span><br></pre></td></tr></table></figure><h4 id="后台运行-jupyter-notebook"><a href="#后台运行-jupyter-notebook" class="headerlink" title="后台运行 jupyter notebook"></a>后台运行 <code>jupyter notebook</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup jupyter notebook &gt; &#x2F;root&#x2F;python-note&#x2F;jupyter.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p> 该命令将使得 Jupyter 在后台运行，并将日志写在 <code>/root/python-note/jupyter.log</code> 文件中。</p><h4 id="在-anaconda-中安装-opencv"><a href="#在-anaconda-中安装-opencv" class="headerlink" title="在 anaconda 中安装 opencv"></a>在 <code>anaconda</code> 中安装 <code>opencv</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install opencv </span><br></pre></td></tr></table></figure><p><img data-src="/images/junior/python/opencv/jupyter.jpg" alt="jupyter"></p>]]></content>
      
      
      <categories>
          
          <category> 大三-python数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用opencv制作头像</title>
      <link href="//Junior/python/create-an-avatar-using-opencv/"/>
      <url>//Junior/python/create-an-avatar-using-opencv/</url>
      
        <content type="html"><![CDATA[<h4 id="原始图像"><a href="#原始图像" class="headerlink" title="原始图像"></a>原始图像</h4><p><img data-src="/images/junior/python/opencv/avatar.png" alt="avatar"></p><h4 id="首先使用-cv2-inRange-选取叶子"><a href="#首先使用-cv2-inRange-选取叶子" class="headerlink" title="首先使用 cv2.inRange() 选取叶子"></a>首先使用 <code>cv2.inRange()</code> 选取叶子</h4><img data-src="/images/junior/python/opencv/avatar_leaf.png" width="25%"><h4 id="然后对原图的-bgr-三个数组进行修改"><a href="#然后对原图的-bgr-三个数组进行修改" class="headerlink" title="然后对原图的 bgr 三个数组进行修改"></a>然后对原图的 <code>bgr</code> 三个数组进行修改</h4><img data-src="/images/junior/python/opencv/new_avatar.jpg" width="25%"><h4 id="RGB对照表"><a href="#RGB对照表" class="headerlink" title="RGB对照表"></a>RGB对照表</h4><table><thead><tr><th align="center">颜色名称</th><th align="center">红色值Red</th><th align="center">绿色值Green</th><th align="center">蓝色值Blue</th></tr></thead><tbody><tr><td align="center"><strong style="background:white;color:#000000;border-radius:10px;padding:1px 3px">黑色</strong></td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center"><strong style="background:white;color:#0000FF;border-radius:10px;padding:1px 3px">蓝色</strong></td><td align="center">0</td><td align="center">0</td><td align="center">255</td></tr><tr><td align="center"><strong style="background:white;color:#00FF00;border-radius:10px;padding:1px 3px">绿色</strong></td><td align="center">0</td><td align="center">255</td><td align="center">0</td></tr><tr><td align="center"><strong style="background:white;color:#00FFFF;border-radius:10px;padding:1px 3px">青色</strong></td><td align="center">0</td><td align="center">255</td><td align="center">255</td></tr><tr><td align="center"><strong style="background:white;color:#FF0000;border-radius:10px;padding:1px 3px">红色</strong></td><td align="center">255</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center"><strong style="background:white;color:#FF00FF;border-radius:10px;padding:1px 3px">洋红色</strong></td><td align="center">255</td><td align="center">0</td><td align="center">255</td></tr><tr><td align="center"><strong style="background:white;color:#FFFF00;border-radius:10px;padding:1px 3px">黄色</strong></td><td align="center">255</td><td align="center">255</td><td align="center">0</td></tr><tr><td align="center"><strong style="background:black;color:white;border-radius:10px;padding:1px 3px">白色</strong></td><td align="center">255</td><td align="center">255</td><td align="center">255</td></tr></tbody></table><h4 id="HSV-对照表"><a href="#HSV-对照表" class="headerlink" title="HSV 对照表"></a>HSV 对照表</h4><p><img data-src="/images/junior/python/opencv/hsv_table.png" alt="img"></p><h4 id="在PS上操作"><a href="#在PS上操作" class="headerlink" title="在PS上操作"></a>在PS上操作</h4><blockquote><p>类似于 <code>Photoshop</code> 的替换颜色功能。上面做的没 <code>ps</code> 的好看，因为只是简单处理了一下。</p></blockquote><img data-src="/images/junior/python/opencv/ps_avatar.jpg" width="80%"><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img_bgr = cv2.imread(<span class="string">&#x27;avatar.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert BGR to HSV</span></span><br><span class="line">img_hsv = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2HSV)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define range of blue color in HSV</span></span><br><span class="line"><span class="comment"># lower_green = np.array([35, 43, 46])</span></span><br><span class="line"><span class="comment"># upper_green = np.array([77, 255, 255])</span></span><br><span class="line">lower_green = np.array([<span class="number">35</span>, <span class="number">80</span>, <span class="number">150</span>])</span><br><span class="line">upper_green = np.array([<span class="number">77</span>, <span class="number">255</span>, <span class="number">255</span>])</span><br><span class="line">leaf = cv2.inRange(img_hsv, lower_green, upper_green)</span><br><span class="line"></span><br><span class="line">img_y_range = leaf.shape[<span class="number">0</span>]</span><br><span class="line">img_x_range = leaf.shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, img_y_range - <span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, img_x_range):</span><br><span class="line">        <span class="keyword">if</span> leaf[i][j] == <span class="number">255</span>:</span><br><span class="line">            b_temp = img_bgr[i][j][<span class="number">0</span>]</span><br><span class="line">            g_temp = <span class="number">255</span> - img_bgr[i][j][<span class="number">1</span>]</span><br><span class="line">            r_temp = img_bgr[i][j][<span class="number">2</span>]</span><br><span class="line">            img_bgr[i][j][<span class="number">0</span>] = (<span class="number">50</span> + (b_temp % <span class="number">10</span>) * <span class="number">3</span>)</span><br><span class="line">            img_bgr[i][j][<span class="number">1</span>] = (<span class="number">0</span> + (g_temp % <span class="number">10</span>) * <span class="number">3</span>)</span><br><span class="line">            img_bgr[i][j][<span class="number">2</span>] = (<span class="number">210</span> + (r_temp % <span class="number">10</span>) * <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;leaf&#x27;</span>, leaf)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;new_avatar&#x27;</span>, img_bgr)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 科技改变生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib数据可视化</title>
      <link href="//Junior/python/matplotlib-data-visualization/"/>
      <url>//Junior/python/matplotlib-data-visualization/</url>
      
        <content type="html"><![CDATA[<p>数据：<a href="https://github.com/wolibo/ck/blob/master/%E4%BB%93%E5%BA%93/%E5%A4%A7%E4%B8%89/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/matplotlib/%E5%9B%BD%E6%B0%91%E7%BB%8F%E6%B5%8E%E6%A0%B8%E7%AE%97%E5%AD%A3%E5%BA%A6%E6%95%B0%E6%8D%AE.npz" rel="external nofollow noreferrer">国民经济核算季度数据.npz</a></p><p>在这里存一下我写的low代码。</p><a id="more"></a><h3 id="分析1996-2015年人口数据特征间的关系"><a href="#分析1996-2015年人口数据特征间的关系" class="headerlink" title="分析1996-2015年人口数据特征间的关系"></a>分析1996-2015年人口数据特征间的关系</h3><h4 id="读取人口数据populations-npz。"><a href="#读取人口数据populations-npz。" class="headerlink" title="读取人口数据populations.npz。"></a>读取人口数据populations.npz。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;Arial Unicode MS&#x27;</span>] <span class="comment"># 更换字体，针对mac用户</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span> <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">font2 = &#123;<span class="string">&#x27;family&#x27;</span> : <span class="string">&#x27;Songti SC&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;weight&#x27;</span> : <span class="string">&#x27;normal&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;size&#x27;</span>   : <span class="number">20</span>,&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取人口数据populations.npz</span></span><br><span class="line">populationData = np.load(<span class="string">&quot;populations.npz&quot;</span>, allow_pickle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1、首先需要看一下这个文件的数组名都是什么</span></span><br><span class="line"><span class="string">input: print(populationData.files) # 查看各个数组的名称</span></span><br><span class="line"><span class="string">output: [&#x27;data&#x27;, &#x27;feature_names&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">data = populationData[<span class="string">&#x27;data&#x27;</span>][<span class="number">-3</span>::<span class="number">-1</span>,:] <span class="comment"># 因为数据是倒序的，看着不舒服，倒序一下</span></span><br><span class="line">name = populationData[<span class="string">&#x27;feature_names&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="绘制散点图或折线图了解6特征的变化趋势，显示并保存图表，给出简单结论。"><a href="#绘制散点图或折线图了解6特征的变化趋势，显示并保存图表，给出简单结论。" class="headerlink" title="绘制散点图或折线图了解6特征的变化趋势，显示并保存图表，给出简单结论。"></a>绘制散点图或折线图了解6特征的变化趋势，显示并保存图表，给出简单结论。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onePointTwo</span>():</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">7</span>, <span class="number">6</span>))</span><br><span class="line">    plt.title(<span class="string">&#x27;1996-2015年人口数据折线图&#x27;</span>, font2)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;年份&#x27;</span>, font2)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;人口（万人）&#x27;</span>, font2)</span><br><span class="line">    x = data[:, <span class="number">0</span>]</span><br><span class="line">    plt.xticks(np.arange(<span class="number">0</span>, <span class="number">20</span>, <span class="number">3</span>), x[<span class="number">0</span>:<span class="number">20</span>:<span class="number">3</span>], rotation=<span class="number">27</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">    plt.yticks(fontsize=<span class="number">15</span>)</span><br><span class="line">    boderParameter = plt.gca()  <span class="comment"># 获取当前的Axes</span></span><br><span class="line">    boderParameter.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">    boderParameter.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">    plt.plot(x, data[:, <span class="number">1</span>], marker=<span class="string">&#x27;.&#x27;</span>, label=<span class="string">&#x27;年末总人口&#x27;</span>)</span><br><span class="line">    plt.plot(x, data[:, <span class="number">2</span>], marker=<span class="string">&#x27;*&#x27;</span>, label=<span class="string">&#x27;男性人口&#x27;</span>)</span><br><span class="line">    plt.plot(x, data[:, <span class="number">3</span>], marker=<span class="string">&#x27;x&#x27;</span>, label=<span class="string">&#x27;女性人口&#x27;</span>)</span><br><span class="line">    plt.plot(x, data[:, <span class="number">4</span>], marker=<span class="string">&#x27;^&#x27;</span>, label=<span class="string">&#x27;城镇人口&#x27;</span>)</span><br><span class="line">    plt.plot(x, data[:, <span class="number">5</span>], marker=<span class="string">&#x27;s&#x27;</span>, label=<span class="string">&#x27;乡村人口&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.grid(<span class="literal">True</span>)  <span class="comment"># 加上网格</span></span><br><span class="line">    <span class="comment"># 不加 bbox_inches = &#x27;tight&#x27; 图片可能会保存不完整</span></span><br><span class="line">    plt.savefig(<span class="string">&#x27;1.png&#x27;</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><img data-src="/images/junior/python/matplotlib/plot-1.2.png" style="zoom:80%;" /><h4 id="分析人口数据特征与时间的相关性，显示并保存图表，给出简单结论。"><a href="#分析人口数据特征与时间的相关性，显示并保存图表，给出简单结论。" class="headerlink" title="分析人口数据特征与时间的相关性，显示并保存图表，给出简单结论。"></a>分析人口数据特征与时间的相关性，显示并保存图表，给出简单结论。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onePointThree</span>():</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">7</span>, <span class="number">6</span>))</span><br><span class="line">    plt.title(<span class="string">&#x27;1996-2015年年末人口数据折线图&#x27;</span>, font2)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;年份&#x27;</span>, font2)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;人口（万人）&#x27;</span>, font2)</span><br><span class="line">    x = data[:, <span class="number">0</span>]</span><br><span class="line">    plt.xticks(np.arange(<span class="number">0</span>, <span class="number">20</span>, <span class="number">3</span>), x[<span class="number">0</span>:<span class="number">20</span>:<span class="number">3</span>], rotation=<span class="number">27</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">    plt.yticks(fontsize=<span class="number">15</span>)</span><br><span class="line">    boderParameter = plt.gca()  <span class="comment"># 获取当前的Axes</span></span><br><span class="line">    boderParameter.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">    boderParameter.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">    plt.plot(x, data[:, <span class="number">1</span>], color=<span class="string">&#x27;r&#x27;</span>, marker=<span class="string">&#x27;^&#x27;</span>, label=<span class="string">&#x27;年末总人口&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.grid(<span class="literal">True</span>)  <span class="comment"># 加上网格</span></span><br><span class="line">    <span class="comment"># 不加 bbox_inches = &#x27;tight&#x27; 图片可能会保存不完整</span></span><br><span class="line">    plt.savefig(<span class="string">&#x27;2.png&#x27;</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><img data-src="/images/junior/python/matplotlib/plot-1.3.png" style="zoom:80%;" /><h4 id="分析未来男女人口比例趋势，显示并保存图表，给出简单结论。"><a href="#分析未来男女人口比例趋势，显示并保存图表，给出简单结论。" class="headerlink" title="分析未来男女人口比例趋势，显示并保存图表，给出简单结论。"></a>分析未来男女人口比例趋势，显示并保存图表，给出简单结论。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onePointFour</span>():</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">7</span>, <span class="number">6</span>))</span><br><span class="line">    plt.title(<span class="string">&#x27;1996-2015年男女人口数据折线图&#x27;</span>, font2)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;年份&#x27;</span>, font2)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;人口（万人）&#x27;</span>, font2)</span><br><span class="line">    x = data[:, <span class="number">0</span>]</span><br><span class="line">    plt.xticks(np.arange(<span class="number">0</span>, <span class="number">20</span>, <span class="number">3</span>), x[<span class="number">0</span>:<span class="number">20</span>:<span class="number">3</span>], rotation=<span class="number">27</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">    plt.yticks(fontsize=<span class="number">15</span>)</span><br><span class="line">    boderParameter = plt.gca()  <span class="comment"># 获取当前的Axes</span></span><br><span class="line">    boderParameter.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">    boderParameter.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">    plt.plot(x, data[:, <span class="number">2</span>], color=<span class="string">&#x27;r&#x27;</span>, marker=<span class="string">&#x27;^&#x27;</span>, label=<span class="string">&#x27;男性人口&#x27;</span>)</span><br><span class="line">    plt.plot(x, data[:, <span class="number">3</span>], color=<span class="string">&#x27;g&#x27;</span>, marker=<span class="string">&#x27;x&#x27;</span>, label=<span class="string">&#x27;女性人口&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.grid(<span class="literal">True</span>)  <span class="comment"># 加上网格</span></span><br><span class="line">    <span class="comment"># 不加 bbox_inches = &#x27;tight&#x27; 图片可能会保存不完整</span></span><br><span class="line">    plt.savefig(<span class="string">&#x27;3.png&#x27;</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><img data-src="/images/junior/python/matplotlib/plot-1.4.png" style="zoom:80%;" /><h4 id="分析城乡人口变化趋势，显示并保存图表，给出简单结论。"><a href="#分析城乡人口变化趋势，显示并保存图表，给出简单结论。" class="headerlink" title="分析城乡人口变化趋势，显示并保存图表，给出简单结论。"></a>分析城乡人口变化趋势，显示并保存图表，给出简单结论。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onePointFive</span>():</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">7</span>, <span class="number">6</span>))</span><br><span class="line">    plt.title(<span class="string">&#x27;1996-2015年城乡人口数据折线图&#x27;</span>, font2)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;年份&#x27;</span>, font2)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;人口（万人）&#x27;</span>, font2)</span><br><span class="line">    x = data[:, <span class="number">0</span>]</span><br><span class="line">    plt.xticks(np.arange(<span class="number">0</span>, <span class="number">20</span>, <span class="number">3</span>), x[<span class="number">0</span>:<span class="number">20</span>:<span class="number">3</span>], rotation=<span class="number">27</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">    plt.yticks(fontsize=<span class="number">15</span>)</span><br><span class="line">    boderParameter = plt.gca()  <span class="comment"># 获取当前的Axes</span></span><br><span class="line">    boderParameter.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">    boderParameter.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">    plt.plot(x, data[:, <span class="number">4</span>], color=<span class="string">&#x27;g&#x27;</span>, marker=<span class="string">&#x27;x&#x27;</span>, label=<span class="string">&#x27;城镇人口&#x27;</span>)</span><br><span class="line">    plt.plot(x, data[:, <span class="number">5</span>], color=<span class="string">&#x27;r&#x27;</span>, marker=<span class="string">&#x27;^&#x27;</span>, label=<span class="string">&#x27;乡村人口&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.grid(<span class="literal">True</span>)  <span class="comment"># 加上网格</span></span><br><span class="line">    <span class="comment"># 不加 bbox_inches = &#x27;tight&#x27; 图片可能会保存不完整</span></span><br><span class="line">    plt.savefig(<span class="string">&#x27;4.png&#x27;</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><img data-src="/images/junior/python/matplotlib/plot-1.5.png" style="zoom:80%;" /><h3 id="分析1996-2015年人口数据各特征的分布与分散情况"><a href="#分析1996-2015年人口数据各特征的分布与分散情况" class="headerlink" title="分析1996-2015年人口数据各特征的分布与分散情况"></a>分析1996-2015年人口数据各特征的分布与分散情况</h3><h4 id="分析未来男女人口比例趋势，显示并保存图表，给出简单结论。-1"><a href="#分析未来男女人口比例趋势，显示并保存图表，给出简单结论。-1" class="headerlink" title="分析未来男女人口比例趋势，显示并保存图表，给出简单结论。"></a>分析未来男女人口比例趋势，显示并保存图表，给出简单结论。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoPointOne</span>():</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">8</span>,<span class="number">10</span>))</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;1996-2015年男女人口数据直方图&#x27;</span>, font2)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;年份&#x27;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;人口（万人）&#x27;</span>, font2)</span><br><span class="line">    x = data[:, <span class="number">0</span>]</span><br><span class="line">    plt.xticks(np.arange(<span class="number">0</span>, <span class="number">60</span>, <span class="number">9</span>), x[<span class="number">0</span>:<span class="number">20</span>:<span class="number">3</span>], rotation=<span class="number">27</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">    plt.yticks(fontsize=<span class="number">15</span>)</span><br><span class="line">    boderParameter = plt.gca()  <span class="comment"># 获取当前的Axes</span></span><br><span class="line">    boderParameter.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">    boderParameter.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">    xx = np.arange(<span class="number">0</span>, <span class="number">60</span>, <span class="number">3</span>)</span><br><span class="line">    plt.bar(xx, data[:, <span class="number">2</span>], label=<span class="string">&quot;男性&quot;</span>, color=<span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">    plt.bar(xx + <span class="number">1</span>, data[:, <span class="number">3</span>], label=<span class="string">&quot;女性&quot;</span>, color=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;1996-2015年城乡人口数据直方图&#x27;</span>, font2)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;年份&#x27;</span>, fontsize = <span class="number">16</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;人口（万人）&#x27;</span>, font2)</span><br><span class="line">    plt.xticks(np.arange(<span class="number">0</span>, <span class="number">60</span>, <span class="number">9</span>), x[<span class="number">0</span>:<span class="number">20</span>:<span class="number">3</span>], rotation=<span class="number">27</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">    plt.yticks(fontsize=<span class="number">15</span>)</span><br><span class="line">    boderParameter = plt.gca()  <span class="comment"># 获取当前的Axes</span></span><br><span class="line">    boderParameter.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">    boderParameter.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">    plt.bar(xx, data[:, <span class="number">4</span>], label=<span class="string">&quot;城镇&quot;</span>, color=<span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">    plt.bar(xx + <span class="number">1</span>, data[:, <span class="number">5</span>], label=<span class="string">&quot;乡村&quot;</span>, color=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><img data-src="/images/junior/python/matplotlib/plot-2.1.png" style="zoom:80%;" /><h4 id="绘制男女比例和城乡比例饼图"><a href="#绘制男女比例和城乡比例饼图" class="headerlink" title="绘制男女比例和城乡比例饼图"></a>绘制男女比例和城乡比例饼图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoPointTwo</span>():</span></span><br><span class="line">    label1 = [<span class="string">&#x27;男性人口&#x27;</span>, <span class="string">&#x27;女性人口&#x27;</span>]</span><br><span class="line">    label2 = [<span class="string">&#x27;城镇人口&#x27;</span>, <span class="string">&#x27;农村人口&#x27;</span>]</span><br><span class="line">    explode1 = [<span class="number">0.01</span>, <span class="number">0.01</span>]</span><br><span class="line">    p = plt.figure(figsize=(<span class="number">20</span>, <span class="number">40</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">20</span>):</span><br><span class="line">        p.add_subplot(<span class="number">8</span>, <span class="number">5</span>, i+<span class="number">1</span>)</span><br><span class="line">        plt.title(str(<span class="number">1996</span>+i) + <span class="string">&#x27;年男女人口比例饼图&#x27;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">        patches, texts, autotexts = plt.pie(data[i, <span class="number">2</span>:<span class="number">4</span>], explode=explode1, labels=label1, autopct=<span class="string">&#x27;%1.1f%%&#x27;</span>)</span><br><span class="line">        proptease = fm.FontProperties()</span><br><span class="line">        proptease.set_size(<span class="number">20</span>)</span><br><span class="line">        plt.setp(autotexts, fontproperties=proptease)</span><br><span class="line">        plt.setp(texts, fontproperties=proptease)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">20</span>):</span><br><span class="line">        p.add_subplot(<span class="number">8</span>, <span class="number">5</span>, i+<span class="number">21</span>)</span><br><span class="line">        plt.title(str(<span class="number">1996</span>+i) + <span class="string">&#x27;年城乡人口比例饼图&#x27;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">        patches, texts, autotexts = plt.pie(data[i, <span class="number">4</span>:<span class="number">6</span>], explode=explode1, labels=label2, autopct=<span class="string">&#x27;%1.1f%%&#x27;</span>)</span><br><span class="line">        proptease = fm.FontProperties()</span><br><span class="line">        proptease.set_size(<span class="number">20</span>)</span><br><span class="line">        plt.setp(autotexts, fontproperties=proptease)</span><br><span class="line">        plt.setp(texts, fontproperties=proptease)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p><img data-src="/images/junior/python/matplotlib/plot-2.2.png"></p><h4 id="绘制6特征的箱线图"><a href="#绘制6特征的箱线图" class="headerlink" title="绘制6特征的箱线图"></a>绘制6特征的箱线图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoPointThree</span>():</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">7</span>, <span class="number">6</span>))</span><br><span class="line">    plt.title(<span class="string">&#x27;1996-2015年人口数据6特征箱线图&#x27;</span>, font2)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;人口特征&#x27;</span>, font2)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;人口（万人）&#x27;</span>, font2)</span><br><span class="line">    plt.xticks(fontsize=<span class="number">15</span>)</span><br><span class="line">    plt.yticks(fontsize=<span class="number">15</span>)</span><br><span class="line">    new_data = data</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">20</span>):</span><br><span class="line">        new_data[:, <span class="number">0</span>][i] = int(data[:, <span class="number">0</span>][i][<span class="number">0</span>:<span class="number">-1</span>])</span><br><span class="line">    new_name = [<span class="string">&#x27;时间&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> name[<span class="number">1</span>:]:</span><br><span class="line">        new_name.append(i[<span class="number">0</span>:<span class="number">-4</span>])</span><br><span class="line">    plt.boxplot([list(new_data[:,i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">6</span>)], notch=<span class="literal">True</span>, labels=new_name, meanline=<span class="literal">True</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><img data-src="/images/junior/python/matplotlib/plot-2.3.png" style="zoom:80%;" /><h4 id="分析人口结构变化、分析变化增速，给出结论。"><a href="#分析人口结构变化、分析变化增速，给出结论。" class="headerlink" title="分析人口结构变化、分析变化增速，给出结论。"></a>分析人口结构变化、分析变化增速，给出结论。</h4>]]></content>
      
      
      <categories>
          
          <category> 大三-python数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最优批处理问题</title>
      <link href="//Junior/Algorithm-class/optimal-batch-problem/"/>
      <url>//Junior/Algorithm-class/optimal-batch-problem/</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h4><p>在一台超级计算机上，编号为$1, 2,\cdots, n$ 的 $n$ 个作业等待批处理。批处理的任务就是将这 $n$ 个作业分成若干批，每批包含相邻的若干作业。</p><a id="more"></a><p>从时刻 $0$ 开始，分批加工这些作业。在每批作业开始前，机器需要启动时间 $S$ ，而完成这批作业所需的时间是单独完成批中各个作业需要时间的总和。单独完成第 $i$ 个作业所需的时间是 $t_i$ ，所需的费用是它的完成时刻乘以 一个费用系数 $f_i$ 。同一批作业将在同一时刻完成。例如，如果在时刻 $T$ 开始一批作业 $x,x+1,\cdots,x+k$，则这一批作业的完成时刻均为$T+S+(t_x+t_{x+1}+ \cdots +t_{x+k})$。最优批处理问题就是要确定总费用最小的批处理方案。例如，假定有 $5$ 个作业等待批处理，且<br>$$<br>S =1,(t_1,t_2,t_3,t_4,t_5)=(1,3,4,2,1),(f_1, f_2, f_3, f_4, f_5)=(3,2,3,3,4)<br>$$<br>如果采用批处理方案$ { 1 , 2 } , { 3 } , { 4 , 5 }$ ，则 各作业的完成时间分别为 $(5,5,10,14,14)$ ，各 作业的费用分别为 $(15,10, 30, 42, 56)$ ，因此，这个批处理方案总费用是 $153$。 </p><h5 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计:"></a>算法设计:</h5><p>对于给定的待批处理的 $n$ 个作业，计算其总费用最小的批处理方案。</p><h5 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入:"></a>数据输入:</h5><p>由文件 $input.txt$ 提供输入数据。文件的第 $1$ 行是待批处理的作业数 $n$ ，第 $2$ 行是启动时间 $S$ 。接下来每行有 $2$ 个数，分别为单独完成第 $i$ 个作业所需的时间是 $t_i$ 和所需的费用系数 $f_i$ 。 </p><h5 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出:"></a>结果输出:</h5><p>将计算出的最小总费用输出到文件 $output.txt$ 中。 </p><h5 id="输入文件示例"><a href="#输入文件示例" class="headerlink" title="输入文件示例"></a>输入文件示例</h5><p>$input.txt$ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1</span><br><span class="line">1 3</span><br><span class="line">3 2</span><br><span class="line">4 3</span><br><span class="line">2 3</span><br><span class="line">1 4</span><br></pre></td></tr></table></figure><h5 id="输出文件示例"><a href="#输出文件示例" class="headerlink" title="输出文件示例"></a>输出文件示例</h5><p>$output.txt$ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">153</span><br></pre></td></tr></table></figure><h4 id="解析"><a href="#解析" class="headerlink" title="解析:"></a>解析:</h4><p>设 $dp[i]$ 表示完成编号为 $i,i+1,\cdots,n$ 的作业所需的最小费用。<br>则从右到左扫描，把编号为 $i,i+1,j-1$ 的作业作为第一批作业，$j\in[i+1,n+1]$<br>$$<br>\begin{eqnarray}<br>dp[i] &amp;=&amp; min(dp[j]+(S+t_i+t_{i+1}+\cdots+t_{j-1})\times(f_j+f_{j+1}+\cdots+f_n)\\<br>&amp;+&amp;(S+t_i+t_{i+1}+\cdots+t_{j-1})\times(f_i+f_{i+1}+ \cdots +f_{j-1}))\\<br>&amp;=&amp;dp[j]+(S+t_i+t_{i+1}+\cdots+t_{j-1})\times(f_i+f_{i+1}+\cdots+f_n)<br>\end{eqnarray}<br>$$<br>然后 $t$ 数组和 $f$ 数组都用后缀和优化一下。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = INT_MAX;<span class="comment">//假设不会超过int</span></span><br><span class="line"><span class="keyword">int</span> t[maxn], f[maxn], sumt[maxn], sumf[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"><span class="keyword">int</span> n, S;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n))&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;S);</span><br><span class="line">        <span class="built_in">memset</span>(sumt, <span class="number">0</span>, <span class="keyword">sizeof</span>(sumt));</span><br><span class="line">        <span class="built_in">memset</span>(sumf, <span class="number">0</span>, <span class="keyword">sizeof</span>(sumf));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) dp[i] = INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;t[i], &amp;f[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;<span class="number">0</span>; i--)&#123;</span><br><span class="line">            sumt[i] = sumt[i+<span class="number">1</span>] + t[i];</span><br><span class="line">            sumf[i] = sumf[i+<span class="number">1</span>] + f[i];</span><br><span class="line">        &#125;</span><br><span class="line">        dp[n+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;<span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=n+<span class="number">1</span>; j++)&#123;</span><br><span class="line">                dp[i] = min(dp[i], dp[j]+(S+sumt[i]-sumt[j])*sumf[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大三-计算机算法设计与分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机算法设计与分析 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>独立任务最优调度问题</title>
      <link href="//Junior/Algorithm-class/independent-task-optimal-scheduling-problem/"/>
      <url>//Junior/Algorithm-class/independent-task-optimal-scheduling-problem/</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h4><p>用 $2$ 台处理机 $A$ 和 $B$ 处理 $n$ 个作业。设第 $i$ 个作业交给机器 $A$ 处理时需要时间 $a_i$ ，若 由机器 $B$ 来处理，则需要时间 bi 。</p><a id="more"></a><p>由于各作业的特点和机器的性能关系，很可能对于某些 $i$， 有 $a_i\leq b_i$ ，而对于某些 $j$, $j \neq i$，有 ${a_j}＜{b_j}$ 。既不能将一个作业分开由 $2$ 台机器处理，也 没有一台机器能同时处理 $2$ 个作业。设计一个动态规划算法，使得这 $2$ 台机器处理完这 $n$ 个作业的时间最短(从任何一台机器开工到最后一台机器停工的总时间)。研究一个实例: ( $a_1,a_2,a_3,a_4,a_5,a_6$ ) = (2, 5, 7, 10, 5, 2); ( $b_1,b_2,b_3,b_4,b_5,b_6$ ) = (3, 8, 4, 11, 3, 4)。 </p><h5 id="编程任务"><a href="#编程任务" class="headerlink" title="编程任务:"></a>编程任务:</h5><p>对于给定的 $2$ 台处理机 $A$ 和 $B$ 处理 $n$ 个作业，找出一个最优调度方案，使 $2$ 台机器处理 完这 $n$ 个作业的时间最短。 </p><h5 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入:"></a>数据输入:</h5><p>由文件input.txt提供输入数据。文件的第1行是1个正整数n, 表示要处理n个作业。<br>接下来的 2 行中，每行有 n 个正整数，分别表示处理机 A 和 B 处理第 i 个作业需要的处理时 间。 </p><h5 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出:"></a>结果输出:</h5><p>程序运行结束时，将计算出的最短处理时间输出到文件 output.txt 中。<br>输入文件示例 输出文件示例 </p><h5 id="input"><a href="#input" class="headerlink" title="input"></a>input</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">2 5 7 10 5 2</span><br><span class="line">3 8 4 11 3 4</span><br></pre></td></tr></table></figure><h5 id="output"><a href="#output" class="headerlink" title="output"></a>output</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure><h4 id="解析"><a href="#解析" class="headerlink" title="解析:"></a>解析:</h4><p>首先看完题脑子🧠里就会出现一个暴力的 $O(2^n)$ 的思路，这题的 $n\le 200$ ，暴力的能跑 $n \le 30$ 的都不错了，虽然知道肯定会会超时，但还是随手写了一下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"><span class="keyword">int</span> ans = INT_MAX, n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> sum1, <span class="keyword">int</span> sum2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(idx==n)&#123;</span><br><span class="line">        ans = min(ans, max(sum1, sum2));</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(idx+<span class="number">1</span>, sum1 + a[idx], sum2 + <span class="number">0</span>);</span><br><span class="line">    dfs(idx+<span class="number">1</span>, sum1 + <span class="number">0</span>, sum2 + b[idx]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        ans = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就只能推状态转移方程了。</p><p>设 $dp[i][j]$ 表示前 $i$ 个作业 $A$ 机器用了 $j$ 时间的条件下 $B$ 机器最少花费的时间。<br>首先设 $sum=\sum_{i=1}^{n}{a_i}$ ，然后令 $j\in[1,sum]$ 。</p><p>则：</p><p>$$<br>dp[i][j]=min(dp[i-1][j-a[i]],dp[i-1][j]+b[i])<br>$$</p><p>解释一下上面两个状态：</p><ul><li>$dp[i-1][j-a[i]]$ : 第 $i$ 个任务交给 $A$ 机器，所以前 $i-1$ 个任务 $A$ 机器花费 $j-a[i]$ 。</li><li>$dp[i-1][j]+b[i]$ : 第 $i$ 个任务交给 $B$ 机器，所以前 $i-1$ 个任务 $A$ 机器花费的时间就是 $j$ 。</li></ul><p>所以结果就是 $max(j,dp[n][j])|j\in[1,sum]$ 的最小值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1e4</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][MAX];</span><br><span class="line"><span class="keyword">int</span> ans, n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">cin</span> &gt;&gt; a[i], sum += a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0x3f3f3f3f</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=sum; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;=a[i]) dp[i][j] = min(dp[i][j], dp[i<span class="number">-1</span>][j-a[i]]);</span><br><span class="line">                dp[i][j] = min(dp[i][j], dp[i<span class="number">-1</span>][j] + b[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = dp[n][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=sum; j++)&#123;</span><br><span class="line">            ans = min(ans, max(dp[n][j], j));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大三-计算机算法设计与分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机算法设计与分析 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串比较问题</title>
      <link href="//Junior/Algorithm-class/string-comparison-problem/"/>
      <url>//Junior/Algorithm-class/string-comparison-problem/</url>
      
        <content type="html"><![CDATA[<p>【问题描述】对于长度相同的两个字符串A和B，其距离定义为相应位置字符距离之和。两个非空格字符的距离是它们的ASCII编码之差的绝对值。空格与空格的距离为0， 空格与其他字符的距离为一定值k。在一般情况下，字符串A和B的长度不一定相同。字符串A的扩展是在A中插入若干空格字符所产生的字符串。在字符串A和B的所有长度相同的扩展中，有一对距离最小的扩展，该距离称为字符串A和B的扩展距离。对于给定的字符串A和B， 试设计一个算法，计算其扩展距离。</p><a id="more"></a><p>【算法设计】对于给定的字符串A和B，计算其扩展距离。</p><p>【输入形式】第一行是字符串A，第二行是字符串B，第三行是空格与其他字符的距离定值k 。 </p><p>【输出形式】输出计算出的字符串A和B的扩展距离。</p><p>典型的动态规划问题，设 $dp[len(A)][len(B)]$ 代表 A 和 B 的扩展距离。<br>可以得到：</p><p>$$<br>dp[i][j] = min(dp[i-1][j-1]+abs(A[i]-B[j]),dp[i-1][j]+k, dp[i][j-1]+k)​<br>$$</p><p>解释一下就是：</p><ul><li>当$A[i]$和$B[j]$都不是第一个字符时，结果可以取$A[0:i-1]$和$B[0:j-1]$的扩展距离加 $A[i]$和$B[j]$的扩展距离。</li><li>当$A[i]$不是第一个字符时，结果可以取$A[0:i-1]$和$B[0:j]$的扩展距离加$A[i]$与在$B$末尾中添加的一个空格的扩展距离。</li><li>当$B[i]$不是第一个字符时，结果可以取$A[0:i]$和$B[0:j-1]$的扩展距离加$B[i]$与在$A$末尾中添加的一个空格的扩展距离。</li><li>结果就是上面三个的最小值。（还需要注意一下边界）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = INT_MAX;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn], k, lena, lenb;</span><br><span class="line"><span class="keyword">char</span> a[maxn], b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dist</span><span class="params">(<span class="keyword">char</span> i, <span class="keyword">char</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="string">&#x27; &#x27;</span> &amp;&amp; j==<span class="string">&#x27; &#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="string">&#x27; &#x27;</span> || j==<span class="string">&#x27; &#x27;</span>) <span class="keyword">return</span> k;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(i-j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s%s%d&quot;</span>, a, b, &amp;k)!=EOF)&#123;</span><br><span class="line">        lena = <span class="built_in">strlen</span>(a); lenb = <span class="built_in">strlen</span>(b);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=lena; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=lenb; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i+j) dp[i][j] = INF;</span><br><span class="line">                <span class="keyword">if</span>(i*j) dp[i][j] = min(dp[i][j], dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + dist(a[i<span class="number">-1</span>], b[j<span class="number">-1</span>]));</span><br><span class="line">                <span class="keyword">if</span>(i) dp[i][j] = min(dp[i][j], dp[i<span class="number">-1</span>][j] + dist(a[i<span class="number">-1</span>], <span class="string">&#x27; &#x27;</span>));</span><br><span class="line">                <span class="keyword">if</span>(j) dp[i][j] = min(dp[i][j], dp[i][j<span class="number">-1</span>] + dist(b[j<span class="number">-1</span>], <span class="string">&#x27; &#x27;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, dp[lena][lenb]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大三-计算机算法设计与分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机算法设计与分析 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS升级Catalina后破解软件无法打开的解决办法</title>
      <link href="//software/how-to-fix-corrupted-file-on-MacOS/"/>
      <url>//software/how-to-fix-corrupted-file-on-MacOS/</url>
      
        <content type="html"><![CDATA[<p>在升级 Catalina 后，下载的一些破解软件无法打开，显示文件已损坏，推荐扔进废纸篓。</p><p>只需输入以下命令：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xattr -d com.apple.quarantine /Applications/xxxx.app</span><br></pre></td></tr></table></figure><p>将 <mark>xxxx.app</mark> 修改为你打不开的软件名即可（输入名字第一个字后按 <code>tab</code>  键自动补全，如果没补全说明路径不对）。</p>]]></content>
      
      
      <categories>
          
          <category> 软件问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>金币陈列问题</title>
      <link href="//Junior/Algorithm-class/gold-coin-display-problem/"/>
      <url>//Junior/Algorithm-class/gold-coin-display-problem/</url>
      
        <content type="html"><![CDATA[<h4 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h4><p>给出两个 $m(n \leq 100)$ 行 $n(n \leq 100)$ 列的01矩阵分别为 $coin1[][]$ 和 $coin2[][]$ ，请问是否能通过两种操作使得 $coin1$ 变成 $coin2$ ，并计算出最少操作次数。</p><p>操作1：行变换 —— 01翻转<br>操作2：列变换 —— 交换两列</p><a id="more"></a><h4 id="起初我的错误思路是："><a href="#起初我的错误思路是：" class="headerlink" title="起初我的错误思路是："></a>起初我的错误思路是：</h4><ol><li>先判断每一行，如果 1 的个数即不相同也不互补就是无解，互补就翻转</li><li>然后判断每一列，贪心计算最少交换次数，无法交换后和目标阵列相同就是无解</li></ol><p>然后就发现了一个 bug ，如果 n 为偶数并且 1 的个数既相同，那么就是既可以换也可以不换。这样复杂度就由原来的 $O(mn)$ 上升为 $O(mn2^m)$ ，显然不行。</p><p>如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>第一行不交换就是无解，换了就有解。</p><h4 id="正确思路："><a href="#正确思路：" class="headerlink" title="正确思路："></a>正确思路：</h4><p>可以枚举初始状态矩阵每一列变成目标状态第一列的情况，取结果的最小值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> coin1[maxn][maxn], coin2[maxn][maxn], temp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, k;<span class="comment">//n行 m列 k组数据 </span></span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cp</span><span class="params">(<span class="keyword">int</span> a[maxn][maxn], <span class="keyword">int</span> b[maxn][maxn])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">            a[i][j] = b[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeColumn</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == y) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) swap(temp[i][x], temp[i][y]);</span><br><span class="line">    cnt++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeRow</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) temp[x][i]^=<span class="number">1</span>;</span><br><span class="line">    cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(coin2[i][x] != temp[i][y]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; coin1[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; coin2[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> cur=<span class="number">0</span>; cur&lt;m; cur++)&#123;<span class="comment">//将当前这一列作为目标矩阵的第一列</span></span><br><span class="line">            cp(temp, coin1); cnt = <span class="number">0</span>; changeColumn(<span class="number">0</span>, cur);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp[i][<span class="number">0</span>] != coin2[i][<span class="number">0</span>]) changeRow(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">bool</span> found;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">                found = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(same(i, i))&#123;</span><br><span class="line">                    found = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;m; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(same(i, j))&#123;</span><br><span class="line">                        <span class="keyword">if</span>(same(j, j)) <span class="keyword">continue</span>;</span><br><span class="line">                        changeColumn(i, j);</span><br><span class="line">                        found = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!found) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(found &amp;&amp; cnt&lt;ans) ans = cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (ans == INF ? <span class="number">-1</span> : ans) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="henu计算机算法设计与分析ac代码："><a href="#henu计算机算法设计与分析ac代码：" class="headerlink" title="henu计算机算法设计与分析ac代码："></a>henu计算机算法设计与分析ac代码：</h4><p>某老师神奇般的放了三个空的文件作为测试数据，就是这么坑！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> coin1[maxn][maxn], coin2[maxn][maxn], temp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;<span class="comment">//n行 m列</span></span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cp</span><span class="params">(<span class="keyword">int</span> a[maxn][maxn], <span class="keyword">int</span> b[maxn][maxn])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">            a[i][j] = b[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeColumn</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == y) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) swap(temp[i][x], temp[i][y]);</span><br><span class="line">    cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeRow</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) temp[x][i]^=<span class="number">1</span>;</span><br><span class="line">    cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(coin2[i][x] != temp[i][y]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">cin</span> &gt;&gt; str)&#123;</span><br><span class="line">        n = str[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        m = str[<span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                coin1[i][j] = str[j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                coin2[i][j] = str[j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> cur=<span class="number">0</span>; cur&lt;m; cur++)&#123;</span><br><span class="line">            cp(temp, coin1); cnt = <span class="number">0</span>; changeColumn(<span class="number">0</span>, cur);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp[i][<span class="number">0</span>] != coin2[i][<span class="number">0</span>]) changeRow(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">bool</span> found;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">                found = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(same(i, i))&#123;</span><br><span class="line">                    found = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;m; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(same(i, j))&#123;</span><br><span class="line">                        <span class="keyword">if</span>(same(j, j)) <span class="keyword">continue</span>;</span><br><span class="line">                        changeColumn(i, j);</span><br><span class="line">                        found = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!found) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(found &amp;&amp; cnt&lt;ans) ans = cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (ans == INF ? <span class="number">-1</span> : ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大三-计算机算法设计与分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机算法设计与分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>像我一样的穷人如何使用百度网盘</title>
      <link href="//software/BaiduNetdisk-PK-ENFI/"/>
      <url>//software/BaiduNetdisk-PK-ENFI/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>强烈谴责百度网盘的<mark>超级限速</mark>行为！</p></blockquote><blockquote><p>这是我开通了普通会员之后的速度，不开时几十k每秒。(断断续续下载好几天了。。。)</p></blockquote><img width="90%" data-src="/images/software/baidunetdisk.jpg"/><blockquote><p>还是<a href="http://enfi.cloud/#/index" rel="external nofollow noreferrer">ENFI下载器</a>比较好用，今天群友推荐的。</p></blockquote><img width="90%" data-src="/images/software/ENFI下载器.jpg"/>]]></content>
      
      
      <categories>
          
          <category> 软件问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 百度网盘 </tag>
            
            <tag> ENFI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cplusplus小技巧</title>
      <link href="//cplusplus-tips/"/>
      <url>//cplusplus-tips/</url>
      
        <content type="html"><![CDATA[<h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><h4 id="对元素去重"><a href="#对元素去重" class="headerlink" title="对元素去重"></a>对元素去重</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ve=&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">ve.erase(unique(ve.begin(), ve.end()), ve.end());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> item : ve)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; item &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">output: </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> </span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>set</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map</p><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><p>queue</p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>截取子串。</p><p><code>string substr (int pos = 0, int len)</code></p><p><code>pos</code>起始位置，<code>len</code>截取长度。</p><h3 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h3><p>bitset</p><h3 id="next-permutation"><a href="#next-permutation" class="headerlink" title="next_permutation"></a>next_permutation</h3><p>用来按字典序生成所有当前排列后面的所有排列。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> item : arr)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; item &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(next_permutation(arr.begin(), arr.end()));</span><br><span class="line">output:</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> </span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span> </span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span> </span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> </span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA-11021-Tribles-概率问题</title>
      <link href="//BlueBook-liurujia/UVA-11021-Tribles/"/>
      <url>//BlueBook-liurujia/UVA-11021-Tribles/</url>
      
        <content type="html"><![CDATA[<div class="note info"><p>有 $k$ 只麻球，每只活一天就会死亡，临死前可能会生出一些新的麻球。具体来说，生 $i$ 只麻球的概率为 $p_i$ 。给定 $m$ ，求 $m$ 天后所有麻球均死亡的概率。</p></div><a id="more"></a><div class="note success"><p>每只麻球均可视为一个独立的问题。设 $f[i]$ 表示：第一天只有 $1$ 只麻球，在第 $i$ 天它及它的后代全部死亡的概率。由全概率公式，有递推公式：<br>$$<br>\begin{eqnarray}<br>f[i]&amp;=&amp;P_0+P_1f[i−1]+P_2f[i−1]^2+P_3f[i−1]^3+ \cdots +P_{n−1}f[i−1]^{n−1} \\<br>&amp;=&amp;\sum_{j=0}^{n-1}{P_jf[i-1]^j}<br>\end{eqnarray}<br>$$<br>其中 $P_jf[i−1]^j$ 的含义是这个麻球生了 $j$ 个后代，并且它们在 $i−1$ 天后全部死亡的概率。由于一开始有 $k$ 只麻球，最终答案为 $f[m]^k$ 。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> f[maxn], P[maxn];</span><br><span class="line"><span class="keyword">int</span> n, k, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> Case = <span class="number">1</span>; Case &lt;= T; Case++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;k, &amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;P[i]);</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">0</span>; f[<span class="number">1</span>] = P[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            f[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                f[i] += P[j] * <span class="built_in">pow</span>(f[i<span class="number">-1</span>], j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case #%d: %.7lf\n&quot;</span>, Case, <span class="built_in">pow</span>(f[m],k));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-ICPC Asia Regional Contest</title>
      <link href="//Junior/ACM-ICPC-Asia-Regional-Contest/"/>
      <url>//Junior/ACM-ICPC-Asia-Regional-Contest/</url>
      
        <content type="html"><![CDATA[<p>写几个去年的区域赛题</p><h4 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h4><h5 id="2018-2019-ACM-ICPC-Asia-Beijing-Regional-Contest"><a href="#2018-2019-ACM-ICPC-Asia-Beijing-Regional-Contest" class="headerlink" title="2018-2019 ACM-ICPC, Asia Beijing Regional Contest"></a><a href="https://hihocoder.com/contest/icpcbeijing2018/problems" rel="external nofollow noreferrer">2018-2019 ACM-ICPC, Asia Beijing Regional Contest</a></h5><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://hihocoder.com/contest/icpcbeijing2018/problem/1" rel="external nofollow noreferrer">A - Jin Yong’s Wukong Ranking List</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://hihocoder.com/contest/icpcbeijing2018/problem/4" rel="external nofollow noreferrer">D - Frog and Portal</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://hihocoder.com/contest/icpcbeijing2018/problem/9" rel="external nofollow noreferrer">I - Palindromes</a></li></ul><h5 id="2018-2019-ACM-ICPC-Asia-Shenyang-Regional-Contest"><a href="#2018-2019-ACM-ICPC-Asia-Shenyang-Regional-Contest" class="headerlink" title="2018-2019 ACM-ICPC, Asia Shenyang Regional Contest"></a><a href="https://codeforces.com/gym/101955" rel="external nofollow noreferrer">2018-2019 ACM-ICPC, Asia Shenyang Regional Contest</a></h5><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://codeforces.com/gym/101955/problem/J" rel="external nofollow noreferrer">J - How Much Memory Your Code Is Using?</a></li></ul><h5 id="2018-2019-ACM-ICPC-Asia-Jiaozuo-Regional-Contest"><a href="#2018-2019-ACM-ICPC-Asia-Jiaozuo-Regional-Contest" class="headerlink" title="2018-2019 ACM-ICPC, Asia Jiaozuo Regional Contest"></a><a href="https://codeforces.com/gym/102028" rel="external nofollow noreferrer">2018-2019 ACM-ICPC, Asia Jiaozuo Regional Contest</a></h5><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://codeforces.com/gym/102028/problem/A" rel="external nofollow noreferrer">A - Xu Xiake in Henan Province</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://codeforces.com/gym/102028/problem/D" rel="external nofollow noreferrer">D - Keiichi Tsuchiya the Drift King</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://codeforces.com/gym/102028/problem/I" rel="external nofollow noreferrer">I - Distance</a></li></ul><h5 id="2018-2019-ACM-ICPC-Asia-Xuzhou-Regional-Contest"><a href="#2018-2019-ACM-ICPC-Asia-Xuzhou-Regional-Contest" class="headerlink" title="2018-2019 ACM-ICPC, Asia Xuzhou Regional Contest"></a><a href="https://codeforces.com/gym/102012" rel="external nofollow noreferrer">2018-2019 ACM-ICPC, Asia Xuzhou Regional Contest</a></h5><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://codeforces.com/gym/102012/problem/A" rel="external nofollow noreferrer">A - Rikka with Minimum Spanning Trees</a></li></ul><h5 id="2018-2019-ACM-ICPC-Asia-Nanjing-Regional-Contest"><a href="#2018-2019-ACM-ICPC-Asia-Nanjing-Regional-Contest" class="headerlink" title="2018-2019 ACM-ICPC, Asia Nanjing Regional Contest"></a><a href="https://codeforces.com/gym/101981" rel="external nofollow noreferrer">2018-2019 ACM-ICPC, Asia Nanjing Regional Contest</a></h5><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://codeforces.com/gym/101981/problem/A" rel="external nofollow noreferrer">A - Adrien and Austin</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://codeforces.com/gym/101981/problem/I" rel="external nofollow noreferrer">I - Magic Potion</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> icpc真题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算几何入门</title>
      <link href="//tutorial/Computer-geometry-tutorial/"/>
      <url>//tutorial/Computer-geometry-tutorial/</url>
      
        <content type="html"><![CDATA[<h2 id="计算几何基础"><a href="#计算几何基础" class="headerlink" title="计算几何基础"></a>计算几何基础</h2><h3 id="单位向量-Unit-vector"><a href="#单位向量-Unit-vector" class="headerlink" title="单位向量 $(Unit\ vector)$"></a>单位向量 $(Unit\ vector)$</h3><p>​    对于任意向量 $\vec a$ ，不论方向如何，若其大小为单位长度，则称其为 $\vec a$ 方向上的单位向量 $(Unit\ vector)$ 。单位向量通常被记为 $\vec u$ 。<br>特殊地，三维笛卡尔坐标系上的三个基向量 $\vec i=(1,0,0),\vec j=(0,1,0),\vec k=(0,0,1)$ 都是单位向量。<br>点或向量的结构体如下：</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sgn返回x经过eps处理的符号，负数返回-1，正数返回1，x的绝对值如果足够小，就返回0。</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt; -eps ? <span class="number">-1</span> : x &gt; eps ? <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> x,<span class="keyword">double</span> y):x(x),y(y)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br></pre></td></tr></table></figure><h3 id="向量相关的运算"><a href="#向量相关的运算" class="headerlink" title="向量相关的运算"></a>向量相关的运算</h3><h4 id="向量与向量的加法"><a href="#向量与向量的加法" class="headerlink" title="向量与向量的加法"></a>向量与向量的加法</h4><p>​    向量的加法满足<a href="https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%8C%E5%9B%9B%E9%82%8A%E5%BD%A2%E6%81%86%E7%AD%89%E5%BC%8F" rel="external nofollow noreferrer">平行四边形法则</a>和<a href="https://zh.wikipedia.org/wiki/%E4%B8%89%E8%A7%92%E4%B8%8D%E7%AD%89%E5%BC%8F#%E5%90%91%E9%87%8F" rel="external nofollow noreferrer">三角形法则</a>。具体地，两个向量 $\vec a$ 和 $\vec b$ 相加，得到的是另一个向量。这个向量可以表示为 $\vec a$ 和 $\vec b$ 的起点重合后，以它们为邻边构成的平行四边形的一条对角线（以共同的起点为起点的那一条，见下图左），或者表示为将的 $\vec a$ 终点和 $\vec b$ 的起点重合后，从 $\vec a$ 的起点指向 $\vec b$ 的终点的向量：</p><p><img data-src="/images/acm/2019/Vector_addition.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vector <span class="keyword">operator</span> + (Vector A,Vector B)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x+B.x,A.y+B.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="向量与向量的减法"><a href="#向量与向量的减法" class="headerlink" title="向量与向量的减法"></a>向量与向量的减法</h4><p>​    两个向量 $\vec a$ 和 $\vec b$ 的相减，则可以看成是向量 $\vec a$ 加上一个与 $\vec b$ 大小相等，方向相反的向量。又或者，$\vec a$ 和 $\vec b$ 的相减得到的向量可以表示为 $\vec a$ 和 $\vec b$ 的起点重合后，从 $\vec b$ 的终点指向 $\vec a$ 的终点的向量：</p><p><img data-src="/images/acm/2019/Vector_subtraction.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vector <span class="keyword">operator</span> - (Point A,Point B)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x-B.x,A.y-B.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="向量与数的乘法"><a href="#向量与数的乘法" class="headerlink" title="向量与数的乘法"></a>向量与数的乘法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vector <span class="keyword">operator</span> * (Vector A,<span class="keyword">double</span> p)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x*p,A.y*p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="向量与数的除法"><a href="#向量与数的除法" class="headerlink" title="向量与数的除法"></a>向量与数的除法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vector <span class="keyword">operator</span> / (Vector A,<span class="keyword">double</span> p)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x/p,A.y/p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Dot-product"><a href="#Dot-product" class="headerlink" title="$Dot\ product$"></a>$Dot\ product$</h4><ul><li>${\vec a}\cdot{\vec b}=|\vec a||\vec b|\cos{\theta}$<ul><li>这里$\ |\vec a|\ $表示$\vec a$的模（长度），$\theta$表示两个向量之间的角度。</li></ul></li><li>运算结果：标量</li><li>用处：<ul><li>判断正交[^1]（点积为零）</li><li>计算两向量的夹角 $cos\beta=\dfrac{ {\vec a}\cdot{\vec b} }{|\vec a||\vec b|}$</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Dot</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.x*B.x+A.y*B.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Length</span><span class="params">(Vector A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(Dot(A,A));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Angle</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>(Dot(A,B)/Length(A)/Length(B));<span class="comment">//用连除代替乘法，防止乘法溢出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Cross-product"><a href="#Cross-product" class="headerlink" title="$Cross\ product$"></a>$Cross\ product$</h4><ul><li><p>运算结果：向量</p></li><li><p>用处：计算面积或判断点的位置关系等。</p></li><li><p>使用右手定则确定叉积的方向</p><p><img data-src="/images/acm/2019/Right_hand_rule_cross_product.png"></p></li><li><p>叉积 ${\vec a} \times {\vec b}$（垂直方向、<font color="violet">紫色</font>）随着向量 $\vec a$（<font color="blue">蓝色</font>）和 $\vec b$（<font color="red">红色</font>）的夹角变化。 叉积垂直于两个向量，模长在两者平行时为零、在两者垂直时达到最大值 $|\vec a||\vec b|$。</p><p><img data-src="/images/acm/2019/Cross_product.gif"></p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//叉积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cross</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (A.x*B.y-A.y*B.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//三角形面积的二倍的叉乘公式</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Area2</span><span class="params">(Point A,Point B,Point C)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Cross(B-A,C-A);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="向量的旋转"><a href="#向量的旋转" class="headerlink" title="向量的旋转"></a>向量的旋转</h4><img width="50%" data-src="/images/acm/2019/vec-rotate.jpg"><blockquote><p>将向量 $\vec a=(x,y)$ 绕原点逆时针旋转$\alpha$度。</p></blockquote><p>假设模长$d=\sqrt{x^2+y^2}$<br>那么$\vec a=(x,y)=(d\cos{\beta},d\sin{\beta})$<br>旋转$\alpha$度就是：<br>$$<br>\begin{eqnarray}<br>\vec{\grave a} &amp;=&amp; (d\cos{(\beta+\alpha)},d\sin{(\beta+\alpha)}) \\<br>&amp;=&amp; (d(\cos{\beta}\cdot\cos{\alpha}-\sin{\beta}\cdot\sin{\alpha}),<br>d(\sin{\beta}\cdot\cos{\alpha}+\cos{\beta}\cdot\sin{\alpha})) \\<br>&amp;&amp;将x=d\cos{\beta}, y=d\sin{\beta}代进去\\<br>&amp;=&amp; (x\cos{\alpha}-y\sin{\alpha},x\sin{\alpha}+y\cos{\alpha})<br>\end{eqnarray}<br>$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将向量p绕原点逆时针旋转a度</span></span><br><span class="line"><span class="function">Point <span class="title">rotate</span><span class="params">(Point p, <span class="keyword">double</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Point(p.x*<span class="built_in">cos</span>(a) - p.y*<span class="built_in">sin</span>(a), p.x*<span class="built_in">sin</span>(a) + p.y*<span class="built_in">cos</span>(a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h3><blockquote><p>给定一个简单多边形，求其面积<br>输入：多边形（定点按照逆时针顺序排列）<br>输出：面积S</p></blockquote><p>化繁为简，多边形一般分解为多个三角形。<br>首先考虑给定一个三角形，如何计算面积？</p><ol><li>在解析几何里，$\triangle ABC$的面积可以通过如下方式求的：<ol><li>获得点坐标</li><li>获得边长$a,b,c$</li><li>海伦公式求得面积$S=\sqrt{s(s-a)(s-b)(s-c)}$，其中$s=\dfrac{a+b+c}{2}$</li></ol></li><li>在计算几何里，我们知道$\triangle ABC$的面积就是$\vec {AB}$和$\vec {AC}$叉积的绝对值的一半。</li></ol><p><mark>显然</mark>，利用叉积来计算面积的精度误差远小于第一种方法。<br>下面函数就可以计算多边形的<mark>有向面积</mark>了。适合凸多边形[^2]和凹多边形。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多边形的有向面积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PolygonArea</span><span class="params">(Point* p,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> area=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        area+=Cross(p[i]-p[<span class="number">0</span>],p[i+<span class="number">1</span>]-p[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> area/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h3><p>例题： <a href="https://codeforces.com/contest/498/problem/A" rel="external nofollow noreferrer">https://codeforces.com/contest/498/problem/A</a><br>题意：问你你家到你学校的平面上有很多直线（给出一般式的系数），问你至少穿过多少条直线才能到达学校？<br>代码题解： <a href="https://blog.csdn.net/intmainhhh/article/details/96175992" rel="external nofollow noreferrer">https://blog.csdn.net/intmainhhh/article/details/96175992</a></p><blockquote><p>判断点$A(x_1,y_1)$和$B(x_2,y_2)$是否在直线$f(x,y)=ax+by+c=0$的两侧。</p></blockquote><ul><li>直接将点$A$和$B$带入$f(x,y)$，若$f(x1,y1)\times f(x2,y2) &lt; 0$，则两点位于直线两侧。</li><li>显然，$f(x,y)=0$时说明$(x,y)$在直线上。</li></ul><h2 id="二维几何基础算法部件"><a href="#二维几何基础算法部件" class="headerlink" title="二维几何基础算法部件"></a>二维几何基础算法部件</h2><img data-src="/images/acm/2019/prove.jpg" width="50%"><h3 id="点在线段之间"><a href="#点在线段之间" class="headerlink" title="点在线段之间"></a>点在线段之间</h3><ol><li>首先需要满足点在线段所在直线</li><li>然后点的 $x$ 在线段端点之间</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PointOnSegment</span><span class="params">(Point p, Point a, Point b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !sgn(Cross(p-a, b-a)) &amp;&amp; sgn(Dot(p-a, p-b)) &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求两直线交点"><a href="#求两直线交点" class="headerlink" title="求两直线交点"></a>求两直线交点</h3><p>前提是两直线不平行（叉积为0）<br>用参数方程表示直线：两直线分别为$P+t\vec v$ 和$Q+t\vec w$<br>设向量$u=P-Q$，交点在第一条直线的参数为$t_1$，第二条直线上的参数为$t_2$，两直线连立可以解的：<br>$t_1=\dfrac{Cross(w,u)}{Cross(v,w)}$，$t_2=\dfrac{Cross(v,u)}{Cross(v,w)}$<br>计算$t_1$过程如下，$t_2$同理<br>$$<br>\begin{eqnarray}<br>P+t_1\vec v &amp;=&amp; Q+t_2\vec w \\<br>P-Q &amp;=&amp; \vec u = t_2\vec w-t_1\vec v \\<br>\vec u\times\vec w &amp;=&amp; t_2\vec w\times \vec w-t_1\vec v\times\vec w \\<br>\vec u\times\vec w &amp;=&amp; -t_1\vec v\times\vec w \\<br>t_1 &amp;=&amp; \dfrac{Cross(w,u)}{Cross(v,w)}<br>\end{eqnarray}<br>$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求两直线交点</span></span><br><span class="line"><span class="comment">//调用前请确保P+tv和Q+tw有唯一交点，当且仅当Cross(v,w)非0</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineIntersection</span><span class="params">(Point P,Vector v,Point Q,Vector w)</span></span>&#123;</span><br><span class="line">    Vector u=P-Q;</span><br><span class="line">    <span class="keyword">double</span> t=Cross(w,u)/Cross(v,w);</span><br><span class="line">    <span class="keyword">return</span> P+v*t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点到直线的距离"><a href="#点到直线的距离" class="headerlink" title="点到直线的距离"></a>点到直线的距离</h3><blockquote><p>显然叉积求平行四边形面积，除以底得到高，就是点到直线的距离</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点到直线的距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToLine</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    Vector v1=B-A,v2=P-A;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(Cross(v1,v2))/Length(v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点到线段的距离"><a href="#点到线段的距离" class="headerlink" title="点到线段的距离"></a>点到线段的距离</h3><blockquote><p>显然和点到直线的距离不一样，这个需要判断点到线段所在直线的垂足是否在线段上。<br>自己画个图就明白了。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点到线段的距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToSegment</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A==B) <span class="keyword">return</span> Length(P-A);</span><br><span class="line">    Vector v1=B-A,v2=P-A,v3=P-B;</span><br><span class="line">    <span class="keyword">if</span>(sgn(Dot(v1,v2))&lt;<span class="number">0</span>) <span class="keyword">return</span> Length(v2);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(sgn(Dot(v1,v3))&gt;<span class="number">0</span>) <span class="keyword">return</span> Length(v3);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">fabs</span>(Cross(v1,v2))/Length(v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点在直线上的投影"><a href="#点在直线上的投影" class="headerlink" title="点在直线上的投影"></a>点在直线上的投影</h3><img data-src="/images/acm/2019/projection.jpg" width="50%"><p>设$Q=A+t_0\vec v$，$\vec v$是$\vec{AB}$<br>因为$PQ$ $\bot$ $AB$，两个向量点积为0，因此：$Dot(\vec v,P-(A+t_0\vec v))=0$<br>根据分配律(中学书上有证明，自己画个图做投影就能看出来)有：$Dot(\vec v,P-A)-t_0\times Dot(\vec v,\vec v)=0$<br>因此：$t_0=\dfrac{Dot(\vec v,P-A)}{Dot(\vec v,\vec v)}$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点在直线上的投影</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineProjection</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    Vector v=B-A;</span><br><span class="line">    <span class="keyword">return</span> A+v*(Dot(v,P-A)/Dot(v,v));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线段相交判定"><a href="#线段相交判定" class="headerlink" title="线段相交判定"></a>线段相交判定</h3><p>首先规定：“规范相交”指线段相交，并且交点不是线段端点。“非规范相交”可以在端点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断两线段严格相交</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SegmentProperIntersection</span><span class="params">(Point a1,Point a2,Point b1,Point b2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> c1=Cross(a2-a1,b1-a1), c2=Cross(a2-a1,b2-a1),</span><br><span class="line">           c3=Cross(b2-b1,a1-b1), c4=Cross(b2-b1,a2-b1);</span><br><span class="line">    <span class="keyword">return</span> sgn(c1)*sgn(c2)&lt;<span class="number">0</span> &amp;&amp; sgn(c3)*sgn(c4)&lt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断点是否在线段上</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PointOnSegment</span><span class="params">(Point P,Point a1,Point a2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sgn(Cross(a1-P,a2-P))==<span class="number">0</span> &amp;&amp; sgn(Dot(a1-P,a2-P))&lt;=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点在多边形内判定"><a href="#点在多边形内判定" class="headerlink" title="点在多边形内判定"></a>点在多边形内判定</h3><blockquote><p>主要有两种方法：1，射线法。2，转角法。<br>假设多边形顶点按照逆时针顺序排列。</p></blockquote><ol><li><p>射线法：判断点在多边形内：从该点做一条水平向右的射线，统计射线与多边形相交的情况，若相交次数为偶数，则说明该点在形外，否则在形内。为了便于交点在定点或射线与某些边重合时的判断，可以将每条边看成左开右闭的线段，即若交点为左端点就不计算。</p><p>一般用转角法比较简单，感兴趣的自己根据上面的步骤实现代码。</p></li><li><p>转角法：看多边形相对于这个点转了多少度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PointInPolygon</span><span class="params">(Point p,Point*poly,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> wn=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(PointOnSegment(p,poly[i],poly[(i+<span class="number">1</span>)%n])) <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//在边界上</span></span><br><span class="line">        <span class="keyword">int</span> k=sgn( Cross(poly[(i+<span class="number">1</span>)%n]-poly[i], p-poly[i] ) );<span class="comment">//判断点在边的哪侧,1:左,-1:右</span></span><br><span class="line">        <span class="keyword">int</span> d1=sgn( poly[i].y-p.y );</span><br><span class="line">        <span class="keyword">int</span> d2=sgn( poly[(i+<span class="number">1</span>)%n].y-p.y );</span><br><span class="line">        <span class="keyword">if</span>(k&gt;<span class="number">0</span> &amp;&amp; d1&lt;=<span class="number">0</span> &amp;&amp; d2&gt;<span class="number">0</span>) wn++;<span class="comment">//左开右闭，没有k==0的舍去重边</span></span><br><span class="line">        <span class="keyword">if</span>(k&lt;<span class="number">0</span> &amp;&amp; d2&lt;=<span class="number">0</span> &amp;&amp; d1&gt;<span class="number">0</span>) wn--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(wn!=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//内部</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//外部</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="与圆有关的相关计算"><a href="#与圆有关的相关计算" class="headerlink" title="与圆有关的相关计算"></a>与圆有关的相关计算</h3><p><mark>自学</mark></p><h3 id="凸包"><a href="#凸包" class="headerlink" title="凸包"></a>凸包</h3><blockquote><p>凸包就是把所有点包起来并且面积最小的凸多边形[^2]。</p></blockquote><p>常用的求解凸包的算法有$Graham$算法和$Andrew$算法。</p><p>这里仅介绍基于水平排序[^3]的$Andrew$算法。先按照水平序排序，删除重复点后得到序列$p_1,p_2,···$，然后把$p_1,p_2$放到凸包中，从$p_3$开始，当新点在凸包”前进“方向的左边时继续，否则一次删除最近加入凸包的点，直到新点在左边。</p><p><img data-src="/images/acm/2019/convexhull.jpg"></p><p><a href="https://blog.csdn.net/love_phoebe/article/details/81192919" rel="external nofollow noreferrer">然后看个完整的过程</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x||(a.x==b.x&amp;&amp;a.y&lt;b.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当精度要求高时，需要用sgn三态函数进行比较</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ConvexHull</span><span class="params">(Point* p,<span class="keyword">int</span> n,Point* ch)</span></span>&#123;</span><br><span class="line">    sort(p,p+n);<span class="comment">//先比较x坐标，再比较y坐标</span></span><br><span class="line">    n=unique(p,p+n)-p;<span class="comment">//去重，这个算法如果有重复的点就会出错</span></span><br><span class="line">    <span class="keyword">int</span> m=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(m&gt;<span class="number">1</span> &amp;&amp; Cross(ch[m<span class="number">-1</span>]-ch[m<span class="number">-2</span>], p[i]-ch[m<span class="number">-1</span>])&lt;=<span class="number">0</span> ) --m;<span class="comment">//如果不希望在凸包边上有点，可以将&lt;=改为&lt;</span></span><br><span class="line">        ch[m++]=p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(m&gt;k &amp;&amp; Cross(ch[m<span class="number">-1</span>]-ch[m<span class="number">-2</span>], p[i]-ch[m<span class="number">-1</span>])&lt;=<span class="number">0</span>) --m;</span><br><span class="line">        ch[m++]=p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">1</span>) m--;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="半平面交"><a href="#半平面交" class="headerlink" title="半平面交"></a>半平面交</h3><p><mark>自学</mark></p><h3 id="平面区域"><a href="#平面区域" class="headerlink" title="平面区域"></a>平面区域</h3><p><mark>自学</mark></p><h2 id="小技巧和小陷阱"><a href="#小技巧和小陷阱" class="headerlink" title="小技巧和小陷阱"></a>小技巧和小陷阱</h2><ol><li><p><code>double hypot(double x,double y)</code>用来求$\sqrt{x^2+y^2}$</p></li><li><p><code>atan2(y,x)</code>函数用来求向量<code>(x,y)</code>的极角（单位：弧度）。三角函数都很慢，不可大量使用。</p></li><li><p>有些题目明确说明了坐标是整型，那么我们一定要把点的结构体中的坐标类型改成<code>int</code>，否则精度上容易出错。</p></li><li><p>因为被计算机表示浮点数的方式所限制，CPU在进行浮点数计算时会出现误差。如执行<code>0.1 + 0.2 == 0.3</code>结果往往为<code>false</code>，在四则运算中，加减法对精度的影响较小，而乘法对精度的影响更大，<mark>除法的对精度的影响最大</mark>。所以，在设计算法时，为了提高最终结果的精度，要尽量减少计算的数量，尤其是乘法和除法的数量。<br>浮点数与浮点数之间不能直接比较，要引入一个<code>eps</code>常量。<code>eps</code>是epsilon（$\epsilon$）的简写，在数学中往往代表任意小的量。在对浮点数进行大小比较时，如果他们的差的绝对值小于这个量，那么我们就认为他们是相等的，从而避免了浮点数精度误差对浮点数比较的影响。eps在大部分题目时取<code>1e-8</code>就够了，但要根据题目实际的内容进行调整。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sgn返回x经过eps处理的符号，负数返回-1，正数返回1，x的绝对值如果足够小，就返回0。</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt; -eps ? <span class="number">-1</span> : x &gt; eps ? <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><p><img data-src="/images/acm/2019/float-table.jpg"></p></li><li><p>用<code>scanf</code>输入浮点数时，<code>double</code>的占位符是<code>%lf</code>，但是浮点数<code>double</code>在<code>printf</code>系列函数中的标准占位符是<code>%f</code>而不是<code>%lf</code>，使用时最好使用前者，因为虽然后者在大部分的计算机和编译器中能得到正确结果，但在有些情况下会出错（<mark>比如在POJ上</mark>）。</p></li><li><p>当提供给C语言中的标准库函数<code>double sqrt (double x)</code>的<code>x</code>为负值时，<code>sqrt</code>会返回<code>nan</code>，输出时会显示成<code>nan</code>或<code>-1.#IND00</code>（根据系统的不同）。在进行计算几何编程时，经常有对接近零的数进行开方的情况，如果输入的数是一个极小的负数，那么<code>sqrt</code>会返回<code>nan</code>这个错误的结果，导致输出错误。解决的方法就是将<code>sqrt</code>包装一下，<mark>在每次开方前进行判断</mark>。<code>double mysqrt(double x)&#123;return max(0.0, sqrt(x))&#125;;</code></p></li><li><p>大部分的标程的输出是不会输出<mark>负零</mark>的，有时这样的结果是错误的，所以在没有Special Judge的题目要求四舍五入时，不要忘记对负零进行特殊判断。</p></li></ol><blockquote><p>涉及的定义</p></blockquote><p>[^3]: 水平排序：$Andrew$算法水平排序是按照 $x$ 从小到大排序(如果 $x$ 相同，按照 $y$ 从小到大排序)，在 $Graham$ 中先排$y$<br>[^2]: 凸多边形：把凸多边形的任意一条边向两边无限延长为一条直线时，其他各边都在此直线的同旁，那么这个多边形叫做凸多边形。<br>[^1]: 正交：是<a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0" rel="external nofollow noreferrer">线性代数</a>的概念，是<a href="https://zh.wikipedia.org/wiki/%E5%9E%82%E7%9B%B4" rel="external nofollow noreferrer">垂直</a>这一直观概念的推广。作为一个形容词，只有在一个确定的<a href="https://zh.wikipedia.org/wiki/%E5%86%85%E7%A7%AF%E7%A9%BA%E9%97%B4" rel="external nofollow noreferrer">内积空间</a>中才有意义。若内积空间中两<a href="https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F" rel="external nofollow noreferrer">向量</a>的<a href="https://zh.wikipedia.org/wiki/%E5%85%A7%E7%A9%8D" rel="external nofollow noreferrer">内积</a>为0，则称它们是<strong>正交</strong>的。如果能够定义向量间的夹角，则正交可以直观的理解为垂直。</p>]]></content>
      
      
      <categories>
          
          <category> ACM-计算几何 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专题十三 基础计算几何</title>
      <link href="//kuangbin-topic/13/"/>
      <url>//kuangbin-topic/13/</url>
      
        <content type="html"><![CDATA[<h3 id="POJ-2318-TOYS"><a href="#POJ-2318-TOYS" class="headerlink" title="POJ 2318 TOYS"></a><a href="https://vjudge.net/problem/POJ-2318" rel="external nofollow noreferrer"><strong>POJ 2318</strong></a> TOYS</h3><p><strong>分析：</strong>就是让你找每个盒子里面有几个玩具，由于坐标都是整数，处理更加简单，二分+叉积判断位置。</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">5000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">int</span> x,<span class="keyword">int</span> y):x(x),y(y)&#123;&#125;</span><br><span class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x-b.x,y-b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//叉积</span></span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">operator</span> ^(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.y-y*b.x;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">    Point up,down;</span><br><span class="line">    Line()&#123;&#125;</span><br><span class="line">    Line(Point up,Point down):up(up),down(down)&#123;&#125;</span><br><span class="line">&#125;box[MAXN];</span><br><span class="line"><span class="keyword">int</span> num[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BinSearch</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">0</span>,R=n+<span class="number">1</span>,ans;</span><br><span class="line">    <span class="keyword">while</span>(L&lt;=R)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=L+((R-L)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(sgn((box[mid].up-p)^(box[mid].down-p))&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            ans=mid;</span><br><span class="line">            R=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            L=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    num[ans<span class="number">-1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)&amp;&amp;n)&#123;</span><br><span class="line">        <span class="keyword">int</span> x1,y1,x2,y2,x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d&quot;</span>,&amp;m,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">        box[<span class="number">0</span>]=Line(Point(x1,y1),Point(x1,y2));</span><br><span class="line">        box[n+<span class="number">1</span>]=Line(Point(x2,y1),Point(x2,y2));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;box[i].up.x,&amp;box[i].down.x);</span><br><span class="line">            box[i].up.y=y1; box[i].down.y=y2;</span><br><span class="line">        &#125;</span><br><span class="line">        Point p;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span> num);</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;p.x,&amp;p.y);</span><br><span class="line">            BinSearch(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d: %d\n&quot;</span>,i,num[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-2398-Toy-Storage"><a href="#POJ-2398-Toy-Storage" class="headerlink" title="POJ 2398 Toy Storage"></a><a href="https://vjudge.net/problem/POJ-2398" rel="external nofollow noreferrer"><strong>POJ 2398</strong></a> Toy Storage</h3><p><strong>分析：</strong>和上一题差不多，就是多了一步排序，多加一个数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">5000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">int</span> x,<span class="keyword">int</span> y):x(x),y(y)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x!=b.x) <span class="keyword">return</span> x&lt;b.x;</span><br><span class="line">        <span class="keyword">return</span> y&lt;b.y;</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x-b.x,y-b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//叉积</span></span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">operator</span> ^(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.y-y*b.x;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">    Point up,down;</span><br><span class="line">    Line()&#123;&#125;</span><br><span class="line">    Line(Point up,Point down):up(up),down(down)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Line&amp; x)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> up&lt;x.up;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;box[MAXN];</span><br><span class="line"><span class="keyword">int</span> num[MAXN],cnt[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BinSearch</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">0</span>,R=n+<span class="number">1</span>,ans;</span><br><span class="line">    <span class="keyword">while</span>(L&lt;=R)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=L+((R-L)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(sgn((box[mid].up-p)^(box[mid].down-p))&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            ans=mid;</span><br><span class="line">            R=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            L=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    num[ans<span class="number">-1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)&amp;&amp;n)&#123;</span><br><span class="line">        <span class="keyword">int</span> x1,y1,x2,y2,x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d&quot;</span>,&amp;m,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">        box[<span class="number">0</span>]=Line(Point(x1,y1),Point(x1,y2));</span><br><span class="line">        box[n+<span class="number">1</span>]=Line(Point(x2,y1),Point(x2,y2));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;box[i].up.x,&amp;box[i].down.x);</span><br><span class="line">            box[i].up.y=y1; box[i].down.y=y2;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(box,box+n+<span class="number">2</span>);</span><br><span class="line">        Point p;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span> num);</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span> cnt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;p.x,&amp;p.y);</span><br><span class="line">            BinSearch(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Box&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num[i]!=<span class="number">0</span>) cnt[num[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[i]!=<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d: %d\n&quot;</span>,i,cnt[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-3304-Segments"><a href="#POJ-3304-Segments" class="headerlink" title="POJ 3304 Segments"></a><a href="https://vjudge.net/problem/POJ-3304" rel="external nofollow noreferrer"><strong>POJ 3304</strong></a> Segments</h3><p><strong>分析</strong>：这题就是问是否存在一条直线，使得所有线段在这条直线上的投影存在至少一个公共点。</p><p>显然，投影在直线存在公共点，那么以公共点为垂足的这个直线的垂线肯定穿过所有线段，这个问题就转化为了是否存在一条直线和所有线段相交。那么枚举所有线段的端点任取两个作为直线就行了（可以自己画图看一下）。</p><p><mark>有一点需要注意：</mark>在枚举端点时，如果两个端点的距离小于<code>1e-8</code>就跳过去，因为在题目要求精度下，相当于零向量和其他向量叉积，这样的叉积出来就是0，算出来的结果肯定就错了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">100</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> t,n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> x,<span class="keyword">double</span> y):x(x),y(y)&#123;&#125;</span><br><span class="line">    Point <span class="keyword">operator</span> -(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x-b.x,y-b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//叉积</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> ^(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.y-y*b.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;P[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">    Point s,e;</span><br><span class="line">    Line()&#123;&#125;</span><br><span class="line">    Line(Point _s,Point _e):s(_s),e(_e)&#123;&#125;</span><br><span class="line">&#125;S[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ok</span><span class="params">(Point a,Point b,Point c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sgn((a^b)*(a^c));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dis</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sgn(<span class="built_in">sqrt</span>((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> ret=ok(b-a,S[i].s-a,S[i].e-a);</span><br><span class="line">        <span class="keyword">if</span>(ret&lt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">double</span> x1,y1,x2,y2;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf%lf&quot;</span>,&amp;P[i&lt;&lt;<span class="number">1</span>].x,&amp;P[i&lt;&lt;<span class="number">1</span>].y,&amp;P[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].x,&amp;P[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].y);</span><br><span class="line">            S[i]=Line(P[i&lt;&lt;<span class="number">1</span>],P[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Yes!&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(n&lt;&lt;<span class="number">1</span>);i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;(n&lt;&lt;<span class="number">1</span>);j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dis(P[i],P[j])&amp;&amp;check(P[i],P[j]))&#123;</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="built_in">puts</span>(<span class="string">&quot;Yes!&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-1269-Intersecting-Lines"><a href="#POJ-1269-Intersecting-Lines" class="headerlink" title="POJ 1269 Intersecting Lines"></a><a href="https://vjudge.net/problem/POJ-1269" rel="external nofollow noreferrer"><strong>POJ 1269</strong></a> Intersecting Lines</h3><p><strong>分析</strong>：就是让求两个直线的交点，叉积判断平行和三点共线，利用直线的参数表示法求解交点。</p><p>注意⚠️：如果使用<code>%.2lf</code>用<code>C++</code>提交，<code>%.2f</code>用<code>G++</code>提交。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> _x,<span class="keyword">double</span> _y):x(_x),y(_y)&#123;&#125;</span><br><span class="line">    Point <span class="keyword">operator</span> -(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x-b.x,y-b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> +(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x+b.x,y+b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> *(<span class="keyword">const</span> <span class="keyword">double</span>&amp; k)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x*k,y*k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//叉积</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> ^(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.y-y*b.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">    Point s,e;</span><br><span class="line">    Line()&#123;&#125;</span><br><span class="line">    Line(Point _s,Point _e):s(_s),e(_e)&#123;&#125;</span><br><span class="line">    <span class="comment">//点和直线的关系</span></span><br><span class="line">    <span class="comment">//1 在左侧</span></span><br><span class="line">    <span class="comment">//2 在右侧</span></span><br><span class="line">    <span class="comment">//3 在直线上</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relation</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c=sgn((p-s)^(e-s));</span><br><span class="line">        <span class="keyword">if</span>(c&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两向量平行</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">parallel</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn((e-s)^(v.e-v.s))==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两直线关系</span></span><br><span class="line">    <span class="comment">//0 平行</span></span><br><span class="line">    <span class="comment">//1 重合</span></span><br><span class="line">    <span class="comment">//2 相交</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">linecrossline</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((*<span class="keyword">this</span>).parallel(v)) <span class="keyword">return</span> v.relation(s)==<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求两直线的交点</span></span><br><span class="line">    <span class="comment">//要保证两直线不平行或重合</span></span><br><span class="line">    <span class="function">Point <span class="title">crosspoint</span><span class="params">(Line L)</span></span>&#123;</span><br><span class="line">        Point P=s,Q=L.s,v=e-s,w=L.e-L.s;</span><br><span class="line">        Point u=P-Q;</span><br><span class="line">        <span class="keyword">double</span> t=(w^u)/(v^w);</span><br><span class="line">        <span class="keyword">return</span> P+v*t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;INTERSECTING LINES OUTPUT&quot;</span>);</span><br><span class="line">    Line A,B;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf%lf%lf%lf%lf%lf&quot;</span>,&amp;A.s.x,&amp;A.s.y,&amp;A.e.x,&amp;A.e.y,&amp;B.s.x,&amp;B.s.y,&amp;B.e.x,&amp;B.e.y);</span><br><span class="line">        <span class="keyword">int</span> re=A.linecrossline(B);</span><br><span class="line">        <span class="keyword">if</span>(re==<span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">&quot;NONE&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(re==<span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">&quot;LINE&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;POINT &quot;</span>);</span><br><span class="line">            Point itsct=A.crosspoint(B);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2lf %.2lf\n&quot;</span>,itsct.x,itsct.y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;END OF OUTPUT&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-1556-The-Doors"><a href="#POJ-1556-The-Doors" class="headerlink" title="POJ 1556 The Doors"></a><a href="https://vjudge.net/problem/POJ-1556" rel="external nofollow noreferrer"><strong>POJ 1556</strong></a> The Doors</h3><p><strong>分析</strong>：就是一个房间有很多墙，让你求两个坐标之间的最短路。直接根据两点之间是否有墙建图（判断线段是否规范相交），然后跑个最短路。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">74</span>&lt;&lt;<span class="number">1</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> _x,<span class="keyword">double</span> _y):x(_x),y(_y)&#123;&#125;</span><br><span class="line">    Point <span class="keyword">operator</span> -(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x-b.x,y-b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//叉积</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> ^(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.y-y*b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点积</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> *(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.x+y*b.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;P[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">    Point s,e;</span><br><span class="line">    Line()&#123;&#125;</span><br><span class="line">    Line(Point _s,Point _e):s(_s),e(_e)&#123;&#125;</span><br><span class="line">    <span class="comment">//两线段相交判断</span></span><br><span class="line">    <span class="comment">//2 规范相交</span></span><br><span class="line">    <span class="comment">//1 非规范相交</span></span><br><span class="line">    <span class="comment">//0 不相交</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">segcrossseg</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d1=sgn((e-s)^(v.s-s));</span><br><span class="line">        <span class="keyword">int</span> d2=sgn((e-s)^(v.e-s));</span><br><span class="line">        <span class="keyword">int</span> d3=sgn((v.e-v.s)^(s-v.s));</span><br><span class="line">        <span class="keyword">int</span> d4=sgn((v.e-v.s)^(e-v.s));</span><br><span class="line">        <span class="keyword">if</span>((d1^d2)==<span class="number">-2</span> &amp;&amp; (d3^d4)==<span class="number">-2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (d1==<span class="number">0</span> &amp;&amp; sgn((v.s-s)*(v.s-e))&lt;=<span class="number">0</span>)||</span><br><span class="line">                (d2==<span class="number">0</span> &amp;&amp; sgn((v.e-s)*(v.e-e))&lt;=<span class="number">0</span>)||</span><br><span class="line">                (d3==<span class="number">0</span> &amp;&amp; sgn((s-v.s)*(s-v.e))&lt;=<span class="number">0</span>)||</span><br><span class="line">                (d4==<span class="number">0</span> &amp;&amp; sgn((e-v.s)*(e-v.e))&lt;=<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;L[maxn];</span><br><span class="line"><span class="keyword">int</span> cntP,cntL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> G[maxn][maxn],dis[maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> s,t;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PPdis</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)&amp;&amp;n!=<span class="number">-1</span>)&#123;</span><br><span class="line">        cntP=<span class="number">0</span>;cntL=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> x,y1,y2,y3,y4;</span><br><span class="line">        P[cntP++]=Point(<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf%lf%lf&quot;</span>,&amp;x,&amp;y1,&amp;y2,&amp;y3,&amp;y4);</span><br><span class="line">            P[cntP++]=Point(x,y1);P[cntP++]=Point(x,y2);</span><br><span class="line">            P[cntP++]=Point(x,y3);P[cntP++]=Point(x,y4);</span><br><span class="line">            L[cntL++]=Line(Point(x,<span class="number">0</span>),Point(x,y1));</span><br><span class="line">            L[cntL++]=Line(Point(x,y2),Point(x,y3));</span><br><span class="line">            L[cntL++]=Line(Point(x,y4),Point(x,<span class="number">10</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        P[cntP++]=Point(<span class="number">10</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cntP;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cntP;j++)&#123;</span><br><span class="line">                G[i][j]=(i==j?<span class="number">0</span>:INF);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//建图</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cntP;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;cntP;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;cntL;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(sgn(L[k].s.x-P[j].x)&gt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span>(P[i].x!=P[j].x&amp;&amp;Line(P[i],P[j]).segcrossseg(L[k])!=<span class="number">2</span>)&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        flag=<span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                    G[i][j]=G[j][i]=PPdis(P[i],P[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cntP;i++)&#123;</span><br><span class="line">            dis[i]=INF;vis[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dis[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cntP;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> k=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">double</span> Min=INF;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cntP;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[j]&amp;&amp;sgn(dis[j]-Min)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                    Min=dis[j];</span><br><span class="line">                    k=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">            vis[k]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cntP;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[j]&amp;&amp;sgn(dis[k]+G[k][j]-dis[j])&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                    dis[j]=dis[k]+G[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,dis[cntP<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-2653-Pick-up-sticks"><a href="#POJ-2653-Pick-up-sticks" class="headerlink" title="POJ 2653 Pick-up sticks"></a><a href="https://vjudge.net/problem/POJ-2653" rel="external nofollow noreferrer"><strong>POJ 2653</strong></a> Pick-up sticks</h3><p><strong>分析</strong>：直接从前往后暴力判断。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> _x,<span class="keyword">double</span> _y):x(_x),y(_y)&#123;&#125;</span><br><span class="line">    Point <span class="keyword">operator</span> -(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x-b.x,y-b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//叉积</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> ^(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.y-y*b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点积</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> *(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.x+y*b.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">    Point s,e;</span><br><span class="line">    Line()&#123;&#125;</span><br><span class="line">    Line(Point _s,Point _e):s(_s),e(_e)&#123;&#125;</span><br><span class="line">    <span class="comment">//两线段相交判断</span></span><br><span class="line">    <span class="comment">//2 规范相交</span></span><br><span class="line">    <span class="comment">//1 非规范相交</span></span><br><span class="line">    <span class="comment">//0 不相交</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">segcrossseg</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d1=sgn((e-s)^(v.s-s));</span><br><span class="line">        <span class="keyword">int</span> d2=sgn((e-s)^(v.e-s));</span><br><span class="line">        <span class="keyword">int</span> d3=sgn((v.e-v.s)^(s-v.s));</span><br><span class="line">        <span class="keyword">int</span> d4=sgn((v.e-v.s)^(e-v.s));</span><br><span class="line">        <span class="keyword">if</span>((d1^d2)==<span class="number">-2</span> &amp;&amp; (d3^d4)==<span class="number">-2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (d1==<span class="number">0</span> &amp;&amp; sgn((v.s-s)*(v.s-e))&lt;=<span class="number">0</span>)||</span><br><span class="line">                (d2==<span class="number">0</span> &amp;&amp; sgn((v.e-s)*(v.e-e))&lt;=<span class="number">0</span>)||</span><br><span class="line">                (d3==<span class="number">0</span> &amp;&amp; sgn((s-v.s)*(s-v.e))&lt;=<span class="number">0</span>)||</span><br><span class="line">                (d4==<span class="number">0</span> &amp;&amp; sgn((e-v.s)*(e-v.e))&lt;=<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;L[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)&amp;&amp;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf%lf&quot;</span>,&amp;L[i].s.x,&amp;L[i].s.y,&amp;L[i].e.x,&amp;L[i].e.y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Top sticks: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(L[i].segcrossseg(L[j])==<span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j==n+<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(f!=<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">                f=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-1066-Treasure-Hunt"><a href="#POJ-1066-Treasure-Hunt" class="headerlink" title="POJ 1066 Treasure Hunt"></a><a href="https://vjudge.net/problem/POJ-1066" rel="external nofollow noreferrer"><strong>POJ 1066</strong></a> Treasure Hunt</h3><p><strong>分析</strong>：就是判断最少经过几个墙到达藏宝室。还是线段相交问题。<br>注意⚠️：n=0时直接输出1就行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">30</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> _x,<span class="keyword">double</span> _y):x(_x),y(_y)&#123;&#125;</span><br><span class="line">    Point <span class="keyword">operator</span> -(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x-b.x,y-b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//叉积</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> ^(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.y-y*b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点积</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> *(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.x+y*b.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;P[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">    Point s,e;</span><br><span class="line">    Line()&#123;&#125;</span><br><span class="line">    Line(Point _s,Point _e):s(_s),e(_e)&#123;&#125;</span><br><span class="line">    <span class="comment">//两线段相交判断</span></span><br><span class="line">    <span class="comment">//2 规范相交</span></span><br><span class="line">    <span class="comment">//1 非规范相交</span></span><br><span class="line">    <span class="comment">//0 不相交</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">segcrossseg</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d1=sgn((e-s)^(v.s-s));</span><br><span class="line">        <span class="keyword">int</span> d2=sgn((e-s)^(v.e-s));</span><br><span class="line">        <span class="keyword">int</span> d3=sgn((v.e-v.s)^(s-v.s));</span><br><span class="line">        <span class="keyword">int</span> d4=sgn((v.e-v.s)^(e-v.s));</span><br><span class="line">        <span class="keyword">if</span>((d1^d2)==<span class="number">-2</span> &amp;&amp; (d3^d4)==<span class="number">-2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (d1==<span class="number">0</span> &amp;&amp; sgn((v.s-s)*(v.s-e))&lt;=<span class="number">0</span>)||</span><br><span class="line">                (d2==<span class="number">0</span> &amp;&amp; sgn((v.e-s)*(v.e-e))&lt;=<span class="number">0</span>)||</span><br><span class="line">                (d3==<span class="number">0</span> &amp;&amp; sgn((s-v.s)*(s-v.e))&lt;=<span class="number">0</span>)||</span><br><span class="line">                (d4==<span class="number">0</span> &amp;&amp; sgn((e-v.s)*(e-v.e))&lt;=<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;L[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Number of doors = 1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf%lf&quot;</span>,&amp;P[i&lt;&lt;<span class="number">1</span>].x,&amp;P[i&lt;&lt;<span class="number">1</span>].y,&amp;P[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].x,&amp;P[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].y);</span><br><span class="line">        L[i]=Line(P[i&lt;&lt;<span class="number">1</span>],P[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    Point p;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;p.x,&amp;p.y);</span><br><span class="line">    <span class="keyword">int</span> ans=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(n&lt;&lt;<span class="number">1</span>);i++)&#123;</span><br><span class="line">        Line cur=Line(P[i],p);</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            cnt+=(cur.segcrossseg(L[j])==<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans=min(ans,cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Number of doors = %d&quot;</span>,ans+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-1410-Intersection"><a href="#POJ-1410-Intersection" class="headerlink" title="POJ 1410 Intersection"></a><a href="https://vjudge.net/problem/POJ-1410" rel="external nofollow noreferrer"><strong>POJ 1410</strong></a> Intersection</h3><p><strong>分析</strong>：可以直接判断线段相交+线段在矩形内，也可以判断投影+点的位置关系，还可以利用计算机图形学中的剪裁算法等。<br>若线段和矩形未通过<strong>快速排斥试验(Quick Rejection Test)**，则两者</strong>不可能<strong>相交。<br>反之，在通过QRT后，线段所在矩形一定与矩形</strong>有公共部分<strong>。<br>此时若线段</strong>所在直线<strong>与矩形任一</strong>对角线**相交，则线段一定与矩形区域相交。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> _x,<span class="keyword">double</span> _y):x(_x),y(_y)&#123;&#125;</span><br><span class="line">    Point <span class="keyword">operator</span> -(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x-b.x,y-b.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;s,e,l,r;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">Cross</span><span class="params">(<span class="keyword">const</span> Point a,<span class="keyword">const</span> Point b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x*b.y-a.y*b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">seg_intersection_rect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(min(s.x,e.x)&lt;=max(l.x,r.x)&amp;&amp;max(s.x,e.x)&gt;=min(l.x,r.x)&amp;&amp;</span><br><span class="line">        min(s.y,e.y)&lt;=max(l.y,r.y)&amp;&amp;max(s.y,e.y)&gt;=min(l.y,r.y)&amp;&amp;</span><br><span class="line">        (Cross(e-s,l-s)*Cross(e-s,r-s)&lt;=<span class="number">0</span>||</span><br><span class="line">        Cross(e-s,Point(l.x,r.y)-s)*Cross(e-s,Point(r.x,l.y)-s)&lt;=<span class="number">0</span>))<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf%lf&quot;</span>,&amp;s.x,&amp;s.y,&amp;e.x,&amp;e.y);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf%lf&quot;</span>,&amp;l.x,&amp;l.y,&amp;r.x,&amp;r.y);</span><br><span class="line">        <span class="keyword">if</span>(seg_intersection_rect())&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;F&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-1696-Space-Ant"><a href="#POJ-1696-Space-Ant" class="headerlink" title="POJ 1696 Space Ant"></a><a href="https://vjudge.net/problem/POJ-1696" rel="external nofollow noreferrer"><strong>POJ 1696</strong></a> Space Ant</h3><p><strong>分析</strong>：由于数据较少，直接按照极角进行排序，反复找相对当前点极角最小的点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50</span>+<span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">int</span> _x,<span class="keyword">int</span> _y):x(_x),y(_y)&#123;&#125;</span><br><span class="line">    Point <span class="keyword">operator</span> -(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x-b.x,y-b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">operator</span> ^(<span class="keyword">const</span> Point&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.y-y*b.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;P[maxn],ans[maxn];</span><br><span class="line"><span class="keyword">int</span> cur=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dis2</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=(a-P[cur])^(b-P[cur]);</span><br><span class="line">    <span class="keyword">if</span>(temp&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(temp==<span class="number">0</span>&amp;&amp;dis2(P[cur],a)&lt;dis2(P[cur],b)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M,N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;M);</span><br><span class="line">    <span class="keyword">while</span>(M--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;P[i].id,&amp;P[i].x,&amp;P[i].y);</span><br><span class="line">            <span class="keyword">if</span>(P[i].y&lt;P[<span class="number">0</span>].y) swap(P[<span class="number">0</span>],P[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        cur=<span class="number">0</span>;cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            sort(P+cur,P+N,cmp);</span><br><span class="line">            ans[cur++]=P[cnt++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,ans[i].id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-3347-Kadj-Squares"><a href="#POJ-3347-Kadj-Squares" class="headerlink" title="POJ 3347 Kadj Squares"></a><a href="https://vjudge.net/problem/POJ-3347" rel="external nofollow noreferrer"><strong>POJ 3347</strong></a> Kadj Squares</h3><p><strong>分析</strong>：首先计算出每个正方形的左边和右边顶点的横坐标，怎么求哪？就是枚举每个正方形前面的正方形，让当前的与前面的每个都算出一个正好贴紧的情况，其中只有一个是合法的（和其他的不相交的），就是那个横坐标最大的，所以每次求 $max$ 就行了，最后就是收缩被覆盖的正方形坐标，如果两个相邻的正方形大小不同，那么肯定存在覆盖关系，详细见图下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> sqrt2 = <span class="built_in">sqrt</span>(<span class="number">2.0</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Squ</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> left, right, len;</span><br><span class="line">&#125;S[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n)!=EOF &amp;&amp; n)&#123;</span><br><span class="line">        <span class="keyword">int</span> cur_right=<span class="number">0</span>, cur_side=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;S[i].len); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">            <span class="keyword">double</span> L = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; ++j)&#123;</span><br><span class="line">                L = max(L, S[j].right-<span class="built_in">fabs</span>(S[j].len-S[i].len)/sqrt2);</span><br><span class="line">            &#125;</span><br><span class="line">            S[i].left=L;</span><br><span class="line">            S[i].right=S[i].left+S[i].len*sqrt2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(sgn(S[i].len-S[j].len)==<span class="number">1</span> &amp;&amp; sgn(S[i].left-S[j].right)==<span class="number">-1</span>)&#123;</span><br><span class="line">                    S[j].right = S[i].left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(sgn(S[i].len-S[j].len)==<span class="number">-1</span> &amp;&amp; sgn(S[i].left-S[j].right)==<span class="number">-1</span>)&#123;</span><br><span class="line">                    S[i].left = S[j].right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sgn(S[i].right-S[i].left)==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-2826-An-Easy-Problem"><a href="#POJ-2826-An-Easy-Problem" class="headerlink" title="POJ 2826 An Easy Problem?!"></a><a href="https://vjudge.net/problem/POJ-2826" rel="external nofollow noreferrer"><strong>POJ 2826</strong></a> An Easy Problem?!</h3><p><img data-src="/images/acm/2019/poj-2826.jpg" alt="poj-2826-status"></p><p><strong>分析</strong>：<strong>被这题坑了好久啊</strong>，还是经验少，注意一下坑点：</p><ol><li>特判平行（一般都能想到，但是我就是<code>wa​</code>在了这点）</li><li>在利用斜率计算线上点时注意斜率不存在的情况。</li><li>相交却装不了水有三种情况，详见代码</li><li>还有个<code>(sgn(p1.y-cp.y)==0&amp;&amp;(p1.x-cp.x)==0)||(sgn(p3.y-cp.y)==0&amp;&amp;(p3.x-cp.x)==0)</code></li></ol><p>可能分析麻烦了，不过总算是过了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> _x, <span class="keyword">double</span> _y)&#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> -(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x-b.x, y-b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//叉积</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> ^(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.y - y*b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点积</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> *(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.x + y*b.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">    Point s, e;</span><br><span class="line">    Line()&#123;&#125;</span><br><span class="line">    Line(Point _s, Point _e)&#123;</span><br><span class="line">        s = _s;</span><br><span class="line">        e = _e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两向量平行 (对应直线平行或重合)</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">parallel</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn((e-s)^(v.e-v.s)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两线段相交判断</span></span><br><span class="line">    <span class="comment">//2 规范相交</span></span><br><span class="line">    <span class="comment">//1 非规范相交</span></span><br><span class="line">    <span class="comment">//0 不相交</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">segcrossseg</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d1 = sgn((e-s)^(v.s-s));</span><br><span class="line">        <span class="keyword">int</span> d2 = sgn((e-s)^(v.e-s));</span><br><span class="line">        <span class="keyword">int</span> d3 = sgn((v.e-v.s)^(s-v.s));</span><br><span class="line">        <span class="keyword">int</span> d4 = sgn((v.e-v.s)^(e-v.s));</span><br><span class="line">        <span class="keyword">if</span>( (d1^d2)==<span class="number">-2</span> &amp;&amp; (d3^d4)==<span class="number">-2</span> )<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (d1==<span class="number">0</span> &amp;&amp; sgn((v.s-s)*(v.s-e))&lt;=<span class="number">0</span>) ||</span><br><span class="line">        (d2==<span class="number">0</span> &amp;&amp; sgn((v.e-s)*(v.e-e))&lt;=<span class="number">0</span>) ||</span><br><span class="line">        (d3==<span class="number">0</span> &amp;&amp; sgn((s-v.s)*(s-v.e))&lt;=<span class="number">0</span>) ||</span><br><span class="line">        (d4==<span class="number">0</span> &amp;&amp; sgn((e-v.s)*(e-v.e))&lt;=<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求两直线的交点</span></span><br><span class="line">    <span class="comment">//要保证两直线不平行或重合</span></span><br><span class="line">    <span class="function">Point <span class="title">crosspoint</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> a1 = (v.e-v.s)^(s-v.s);</span><br><span class="line">        <span class="keyword">double</span> a2 = (v.e-v.s)^(e-v.s);</span><br><span class="line">        <span class="keyword">return</span> Point((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">double</span> x1,x2,x3,x4,y1,y2,y3,y4;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;x3&gt;&gt;y3&gt;&gt;x4&gt;&gt;y4;</span><br><span class="line">        Point p1=Point(x1,y1), p2=Point(x2,y2);</span><br><span class="line">        Point p3=Point(x3,y3), p4=Point(x4,y4);</span><br><span class="line">        Line l1=Line(p1,p2), l2=Line(p3,p4);</span><br><span class="line">        <span class="keyword">if</span>(l1.parallel(l2))&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0.00\n&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l1.segcrossseg(l2))&#123;<span class="comment">//判断相交</span></span><br><span class="line">            <span class="keyword">if</span>(sgn(y1-y2)==<span class="number">0</span>||sgn(y3-y4)==<span class="number">0</span>)&#123;<span class="comment">//判断是否存在水平线段</span></span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0.00\n&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                Point cp = l1.crosspoint(l2);</span><br><span class="line">                Point unit_row=Point(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(sgn(p1.y-p2.y)&lt;<span class="number">0</span>) swap(p1,p2);<span class="comment">//令p1是第一个线段y值偏大那个点</span></span><br><span class="line">                <span class="keyword">if</span>(sgn(p3.y-p4.y)&lt;<span class="number">0</span>) swap(p3,p4);<span class="comment">//令p3是第二个线段y值偏大那个点</span></span><br><span class="line">                <span class="keyword">if</span>((sgn(p1.y-cp.y)==<span class="number">0</span>&amp;&amp;(p1.x-cp.x)==<span class="number">0</span>)||(sgn(p3.y-cp.y)==<span class="number">0</span>&amp;&amp;(p3.x-cp.x)==<span class="number">0</span>))&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0.00\n&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sgn((p1-cp)*unit_row)==<span class="number">1</span>&amp;&amp;sgn((p3-cp)*unit_row)==<span class="number">1</span> &amp;&amp;</span><br><span class="line">                 ((sgn(p1.x-p3.x)&gt;=<span class="number">0</span>&amp;&amp;sgn(p1.y-p3.y)&gt;=<span class="number">0</span>&amp;&amp;((p3-cp)^(p1-cp))&gt;=<span class="number">0</span>)</span><br><span class="line">                 ||(sgn(p1.x-p3.x)&lt;=<span class="number">0</span>&amp;&amp;sgn(p1.y-p3.y)&lt;=<span class="number">0</span>&amp;&amp;((p1-cp)^(p3-cp))&gt;=<span class="number">0</span>)))&#123;<span class="comment">//all_right</span></span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0.00\n&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sgn((p1-cp)*unit_row)==<span class="number">-1</span>&amp;&amp;sgn((p3-cp)*unit_row)==<span class="number">-1</span> </span><br><span class="line">                &amp;&amp; ((sgn(p1.x-p3.x)&gt;=<span class="number">0</span>&amp;&amp;sgn(p1.y-p3.y)&lt;=<span class="number">0</span>&amp;&amp;((p3-cp)^(p1-cp))&gt;=<span class="number">0</span>)</span><br><span class="line">                ||(sgn(p1.x-p3.x)&lt;=<span class="number">0</span>&amp;&amp;sgn(p1.y-p3.y)&gt;=<span class="number">0</span>&amp;&amp;((p1-cp)^(p3-cp))&gt;=<span class="number">0</span>)))&#123;<span class="comment">//all_left</span></span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0.00\n&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//cp p1 p3</span></span><br><span class="line">                    <span class="keyword">double</span> k = <span class="number">1.0</span>;</span><br><span class="line">                    <span class="keyword">if</span>(sgn(p1.y-p3.y)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(p3.x==cp.x)&#123;<span class="comment">//如果不存在斜率</span></span><br><span class="line">                            p3.y = p1.y; </span><br><span class="line">                            p3.x = cp.x;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            k = (p3.y-cp.y)/(p3.x-cp.x);</span><br><span class="line">                            p3.y = p1.y; </span><br><span class="line">                            p3.x = (p3.y-cp.y)/k + cp.x;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span>(p1.x==cp.x)&#123;</span><br><span class="line">                            p1.y = p3.y; </span><br><span class="line">                            p1.x = cp.x;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            k = (p1.y-cp.y)/(p1.x-cp.x);</span><br><span class="line">                            p1.y = p3.y; </span><br><span class="line">                            p1.x = (p1.y-cp.y)/k + cp.x;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">double</span> ans = <span class="built_in">fabs</span>((p1-cp)^(p3-cp))/<span class="number">2</span>;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0.00\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-1039-Pipe"><a href="#POJ-1039-Pipe" class="headerlink" title="POJ 1039 Pipe"></a><a href="https://vjudge.net/problem/POJ-1039" rel="external nofollow noreferrer"><strong>POJ 1039</strong></a> Pipe</h3><h3 id="POJ-3449-Geometric-Shapes"><a href="#POJ-3449-Geometric-Shapes" class="headerlink" title="POJ 3449 Geometric Shapes"></a><a href="https://vjudge.net/problem/POJ-3449" rel="external nofollow noreferrer"><strong>POJ 3449</strong></a> Geometric Shapes</h3><h3 id="POJ-1584-A-Round-Peg-in-a-Ground-Hole"><a href="#POJ-1584-A-Round-Peg-in-a-Ground-Hole" class="headerlink" title="POJ 1584 A Round Peg in a Ground Hole"></a><a href="https://vjudge.net/problem/POJ-1584" rel="external nofollow noreferrer"><strong>POJ 1584</strong></a> A Round Peg in a Ground Hole</h3>]]></content>
      
      
      <categories>
          
          <category> ACM-邝斌专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
            <tag> 邝斌专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU-1754 I Hate It</title>
      <link href="//AC-everyday/HDU-1754-I-Hate-It/"/>
      <url>//AC-everyday/HDU-1754-I-Hate-It/</url>
      
        <content type="html"><![CDATA[<blockquote><p>很久没写线段树了，今天写了一个线段树的模版题，单点修改和区间查询最小值。<br>不知道为什么，就输入一个字符，<code>%c</code>超时，换成<code>%s</code>就过了。</p></blockquote><p><img data-src="/images/acm/2019/hdu-1754.jpg" alt="hdu-1754-status"></p><a id="more"></a><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> score[MAXN],tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build_tree</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L==R)&#123;</span><br><span class="line">        tree[o]=score[L];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=L+((R-L)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    Build_tree(o&lt;&lt;<span class="number">1</span>,L,mid);</span><br><span class="line">    Build_tree(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,R);</span><br><span class="line">    tree[o]=max(tree[o&lt;&lt;<span class="number">1</span>],tree[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> idx,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L==R)&#123;</span><br><span class="line">        tree[o]=val;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=L+((R-L)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(idx&lt;=mid) Update(o&lt;&lt;<span class="number">1</span>,L,mid,idx,val);</span><br><span class="line">    <span class="keyword">else</span> Update(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,R,idx,val);</span><br><span class="line">    tree[o]=max(tree[o&lt;&lt;<span class="number">1</span>],tree[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=L&amp;&amp;qr&gt;=R) <span class="keyword">return</span> tree[o];</span><br><span class="line">    <span class="keyword">int</span> mid=L+((R-L)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid) ret=max(ret,Query(o&lt;&lt;<span class="number">1</span>,L,mid,ql,qr));</span><br><span class="line">    <span class="keyword">if</span>(qr&gt;mid) ret=max(ret,Query(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,R,ql,qr));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;M))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;score[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Build_tree(<span class="number">1</span>,<span class="number">1</span>,N);</span><br><span class="line">        <span class="keyword">char</span> order;</span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        <span class="keyword">while</span>(M--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>,&amp;order,&amp;l,&amp;r);<span class="comment">//如果用%c会超时，神奇</span></span><br><span class="line">            <span class="keyword">if</span>(order==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Query(<span class="number">1</span>,<span class="number">1</span>,N,l,r));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(order==<span class="string">&#x27;U&#x27;</span>)&#123;</span><br><span class="line">                Update(<span class="number">1</span>,<span class="number">1</span>,N,l,r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA - 11235 Frequent values</title>
      <link href="//BlueBook-liurujia/UVA-11235-Frequent-values/"/>
      <url>//BlueBook-liurujia/UVA-11235-Frequent-values/</url>
      
        <content type="html"><![CDATA[<p><a href="https://vjudge.net/problem/23846/origin" rel="external nofollow noreferrer">UVA - 11235</a></p><p><strong>题目大意：</strong><br>    给一个非降序排列的整数数组a，你的任务是对于一系列询问(i, j)，回答ai,ai+1…aj中次数出现最多的值所出现的次数。</p><a id="more"></a><div class="note primary"><p>这是一个 RMQ 问题，蓝书198页有讲解<br>ST(Sparse-Table) 算法中：<br>令 dp(i, j) 表示从i开始的，长度为 $2^j$ 的一段元素的最值，则可以用递推的方法计算 dp(i, j)：<br>递推方程：$dp(i, j) = min/max{ dp(i, j-1), dp(i+2^{j-1}, j-1) }$</p></div><p><strong>分析：</strong></p><p>由于数列是非降序的，所以所有相等的数都会聚集在一起。这样我们就可以把整个数组进行游程编码 (Run Length Encoding, RLE)。如-1, 1, 1, 2, 2, 2, 4 就可以编码成 (-1, 1), (1, 2), (2, 3), (4, 1) 表示 (a, b) 数组中的a连续出现了b次。用 num[i] 表示原数组下标是i的数在编码后的第 num[i] 段。Left[i], Right[i] 表示第i段的左边界和右边界，用cnt[i]表示第i段有cnt[i]个相同的数。<mark> 这样的话每次查询 (L, R) 就只要计算 (Right[L]-L+1), (R-Left[R]+1) 和 RMQ(num[L]+1, num[R]-1) 这三个值的最大值就可以了。 </mark><br>其中，RMQ 是对 cnt 数组进行区间查询的结果。<br>特殊的，如果 L 和 R 在同一个区间内的话，那么结果就是（R-L+1）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> cnt[MAXN];<span class="comment">//第i段有cnt[i]个相同的数</span></span><br><span class="line"><span class="keyword">int</span> num[MAXN],Left[MAXN],Right[MAXN];<span class="comment">//位置i属于哪一段和这个段的左右区间</span></span><br><span class="line"><span class="keyword">int</span> dp[MAXN][<span class="number">16</span>+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> n,q,a,total,last;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RMQ_init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=total;i++) dp[i][<span class="number">0</span>]=cnt[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=total;j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)&lt;=total;i++)&#123;</span><br><span class="line">            dp[i][j]=max(dp[i][j<span class="number">-1</span>],dp[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RMQ</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&gt;R) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((<span class="number">1</span>&lt;&lt;(<span class="number">1</span>+k))&lt;=R-L+<span class="number">1</span>) k++;</span><br><span class="line">    <span class="keyword">return</span> max(dp[L][k],dp[R-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)&amp;&amp;n)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span> cnt);</span><br><span class="line">        <span class="built_in">memset</span>(Right,<span class="number">0</span>,<span class="keyword">sizeof</span> Right);</span><br><span class="line">        <span class="built_in">memset</span>(Left,<span class="number">0</span>,<span class="keyword">sizeof</span> Left);</span><br><span class="line">        total=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">                ++total;</span><br><span class="line">                last=a;</span><br><span class="line">                Left[total]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a==last)&#123;</span><br><span class="line">                cnt[total]++;</span><br><span class="line">                num[i]=total;</span><br><span class="line">                Right[total]++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                last=a;</span><br><span class="line">                num[i]=++total;</span><br><span class="line">                Left[total]=Right[total]=i;</span><br><span class="line">                cnt[total]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        RMQ_init();</span><br><span class="line">        <span class="keyword">int</span> L,R;</span><br><span class="line">        <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;L,&amp;R);</span><br><span class="line">            <span class="keyword">if</span>(num[L]==num[R]) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,R-L+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,max(RMQ(num[L]+<span class="number">1</span>,num[R]<span class="number">-1</span>),max(Right[num[L]]-L+<span class="number">1</span>,R-Left[num[R]]+<span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RMQ </tag>
            
            <tag> 蓝书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邝斌计算几何模版</title>
      <link href="//Computing-geometry-jls/kuangbin/"/>
      <url>//Computing-geometry-jls/kuangbin/</url>
      
        <content type="html"><![CDATA[<h3 id="二维平面"><a href="#二维平面" class="headerlink" title="二维平面"></a>二维平面</h3><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算几何模板</span></span><br><span class="line"><span class="comment">//二维平面</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf = <span class="number">1e20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxp = <span class="number">1010</span>;</span><br><span class="line"><span class="comment">//Compares a double to zero</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//square of a double</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">sqr</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;<span class="keyword">return</span> x*x;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">  Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> _x,<span class="keyword">double</span> _y)&#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2f-%.2f\n&quot;</span>,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (Point b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn(x-b.x) == <span class="number">0</span> &amp;&amp; sgn(y-b.y) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Point b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn(x-b.x)== <span class="number">0</span>-sgn(y-b.y)?<span class="number">0</span>:x&lt;b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x-b.x,y-b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//叉积</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> ^(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.y-y*b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点积</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> *(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.x + y*b.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回长度</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">len</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hypot(x,y);<span class="comment">//库函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回长度的平方</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">len2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*x + y*y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回两点的距离</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">distance</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hypot(x-p.x,y-p.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> +(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x+b.x,y+b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> *(<span class="keyword">const</span> <span class="keyword">double</span> &amp;k)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x*k,y*k);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> /(<span class="keyword">const</span> <span class="keyword">double</span> &amp;k)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x/k,y/k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算 pa 和 pb 的夹角</span></span><br><span class="line">    <span class="comment">//就是求这个点看 a,b 所成的夹角</span></span><br><span class="line">    <span class="comment">//测试 LightOJ1203</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">rad</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line">        Point p = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="built_in">atan2</span>( <span class="built_in">fabs</span>((a-p)^(b-p)),(a-p)*(b-p) ));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//化为长度为 r 的向量</span></span><br><span class="line">    <span class="function">Point <span class="title">trunc</span><span class="params">(<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> l = len();</span><br><span class="line">        <span class="keyword">if</span>(!sgn(l))<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        r /= l;</span><br><span class="line">        <span class="keyword">return</span> Point(x*r,y*r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//逆时针旋转 90 度</span></span><br><span class="line">    <span class="function">Point <span class="title">rotleft</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(-y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//顺时针旋转 90 度</span></span><br><span class="line">    <span class="function">Point <span class="title">rotright</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(y,-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//绕着 p 点逆时针旋转 angle</span></span><br><span class="line">    <span class="function">Point <span class="title">rotate</span><span class="params">(Point p,<span class="keyword">double</span> angle)</span></span>&#123;</span><br><span class="line">        Point v = (*<span class="keyword">this</span>)-p;</span><br><span class="line">        <span class="keyword">double</span> c = <span class="built_in">cos</span>(angle), s = <span class="built_in">sin</span>(angle);</span><br><span class="line">        <span class="keyword">return</span> Point(p.x + v.x*c-v.y*s,p.y + v.x*s + v.y*c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">    Point s,e;</span><br><span class="line">Line()&#123;&#125;</span><br><span class="line">    Line(Point _s,Point _e)&#123;</span><br><span class="line">        s = _s;</span><br><span class="line">        e = _e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> ==(Line v)&#123;</span><br><span class="line">        <span class="keyword">return</span> (s == v.s)&amp;&amp;(e == v.e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据一个点和倾斜角 angle 确定直线,0&lt;=angle&lt;pi</span></span><br><span class="line">    Line(Point p,<span class="keyword">double</span> angle)&#123;</span><br><span class="line">        s = p;</span><br><span class="line">        <span class="keyword">if</span>(sgn(angle-pi/<span class="number">2</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">            e = (s + Point(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            e = (s + Point(<span class="number">1</span>,<span class="built_in">tan</span>(angle)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ax+by+c=0</span></span><br><span class="line">    Line(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sgn(a) == <span class="number">0</span>)&#123;</span><br><span class="line">            s = Point(<span class="number">0</span>,-c/b);</span><br><span class="line">            e = Point(<span class="number">1</span>,-c/b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sgn(b) == <span class="number">0</span>)&#123;</span><br><span class="line">            s = Point(-c/a,<span class="number">0</span>);</span><br><span class="line">            e = Point(-c/a,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            s = Point(<span class="number">0</span>,-c/b);</span><br><span class="line">            e = Point(<span class="number">1</span>,(-c-a)/b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">        s.input();</span><br><span class="line">        e.input();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">adjust</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(e &lt; s)&#123;</span><br><span class="line">            swap(s,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求线段长度</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.distance(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回直线倾斜角 0&lt;=angle&lt;pi</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">angle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> k = <span class="built_in">atan2</span>(e.y-s.y,e.x-s.x);</span><br><span class="line">        <span class="keyword">if</span>(sgn(k) &lt; <span class="number">0</span>)k += pi;</span><br><span class="line">        <span class="keyword">if</span>(sgn(k-pi) == <span class="number">0</span>)k-= pi;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点和直线关系</span></span><br><span class="line">    <span class="comment">//1 在左侧</span></span><br><span class="line">    <span class="comment">//2 在右侧</span></span><br><span class="line">    <span class="comment">//3 在直线上</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relation</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = sgn((p-s)^(e-s));</span><br><span class="line">        <span class="keyword">if</span>(c &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c &gt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 点在线段上的判断</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">pointonseg</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn((p-s)^(e-s)) == <span class="number">0</span> &amp;&amp; sgn((p-s)*(p-e)) &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两向量平行 (对应直线平行或重合)</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">parallel</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn((e-s)^(v.e-v.s)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两线段相交判断</span></span><br><span class="line">    <span class="comment">//2 规范相交</span></span><br><span class="line">    <span class="comment">//1 非规范相交</span></span><br><span class="line">    <span class="comment">//0 不相交</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">segcrossseg</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d1 = sgn((e-s)^(v.s-s));</span><br><span class="line">        <span class="keyword">int</span> d2 = sgn((e-s)^(v.e-s));</span><br><span class="line">        <span class="keyword">int</span> d3 = sgn((v.e-v.s)^(s-v.s));</span><br><span class="line">        <span class="keyword">int</span> d4 = sgn((v.e-v.s)^(e-v.s));</span><br><span class="line">        <span class="keyword">if</span>( (d1^d2)==<span class="number">-2</span> &amp;&amp; (d3^d4)==<span class="number">-2</span> )<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (d1==<span class="number">0</span> &amp;&amp; sgn((v.s-s)*(v.s-e))&lt;=<span class="number">0</span>) ||</span><br><span class="line">        (d2==<span class="number">0</span> &amp;&amp; sgn((v.e-s)*(v.e-e))&lt;=<span class="number">0</span>) ||</span><br><span class="line">        (d3==<span class="number">0</span> &amp;&amp; sgn((s-v.s)*(s-v.e))&lt;=<span class="number">0</span>) ||</span><br><span class="line">        (d4==<span class="number">0</span> &amp;&amp; sgn((e-v.s)*(e-v.e))&lt;=<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//直线和线段相交判断</span></span><br><span class="line">    <span class="comment">//-*this line -v seg</span></span><br><span class="line">    <span class="comment">//2 规范相交</span></span><br><span class="line">    <span class="comment">//1 非规范相交</span></span><br><span class="line">    <span class="comment">//0 不相交</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">linecrossseg</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d1 = sgn((e-s)^(v.s-s));</span><br><span class="line">        <span class="keyword">int</span> d2 = sgn((e-s)^(v.e-s));</span><br><span class="line">        <span class="keyword">if</span>((d1^d2)==<span class="number">-2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (d1==<span class="number">0</span>||d2==<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两直线关系</span></span><br><span class="line">    <span class="comment">//0 平行</span></span><br><span class="line">    <span class="comment">//1 重合</span></span><br><span class="line">    <span class="comment">//2 相交</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">linecrossline</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((*<span class="keyword">this</span>).parallel(v))</span><br><span class="line">        <span class="keyword">return</span> v.relation(s)==<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求两直线的交点</span></span><br><span class="line">    <span class="comment">//要保证两直线不平行或重合</span></span><br><span class="line">    <span class="function">Point <span class="title">crosspoint</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> a1 = (v.e-v.s)^(s-v.s);</span><br><span class="line">        <span class="keyword">double</span> a2 = (v.e-v.s)^(e-v.s);</span><br><span class="line">        <span class="keyword">return</span> Point((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点到直线的距离</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dispointtoline</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>((p-s)^(e-s))/length();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点到线段的距离</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dispointtoseg</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sgn((p-s)*(e-s))&lt;<span class="number">0</span> || sgn((p-e)*(s-e))&lt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> min(p.distance(s),p.distance(e));</span><br><span class="line">        <span class="keyword">return</span> dispointtoline(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回线段到线段的距离</span></span><br><span class="line">    <span class="comment">//前提是两线段不相交，相交距离就是 0 了</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dissegtoseg</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min(min(dispointtoseg(v.s),dispointtoseg(v.e)),min(v</span><br><span class="line">        .dispointtoseg(s),v.dispointtoseg(e)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回点 p 在直线上的投影</span></span><br><span class="line">    <span class="function">Point <span class="title">lineprog</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s + ( ((e-s)*((e-s)*(p-s)))/((e-s).len2()) );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回点 p 关于直线的对称点</span></span><br><span class="line">    <span class="function">Point <span class="title">symmetrypoint</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        Point q = lineprog(p);</span><br><span class="line">        <span class="keyword">return</span> Point(<span class="number">2</span>*q.x-p.x,<span class="number">2</span>*q.y-p.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//圆</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">circle</span>&#123;</span></span><br><span class="line">    Point p;<span class="comment">//圆心</span></span><br><span class="line">    <span class="keyword">double</span> r;<span class="comment">//半径</span></span><br><span class="line">circle()&#123;&#125;</span><br><span class="line">    circle(Point _p,<span class="keyword">double</span> _r)&#123;</span><br><span class="line">        p = _p;</span><br><span class="line">        r = _r;</span><br><span class="line">    &#125;</span><br><span class="line">    circle(<span class="keyword">double</span> x,<span class="keyword">double</span> y,<span class="keyword">double</span> _r)&#123;</span><br><span class="line">        p = Point(x,y);</span><br><span class="line">        r = _r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//三角形的外接圆</span></span><br><span class="line">    <span class="comment">//需要 Point 的 + / rotate() 以及 Line 的 crosspoint()</span></span><br><span class="line">    <span class="comment">//利用两条边的中垂线得到圆心</span></span><br><span class="line">    <span class="comment">//测试：UVA12304</span></span><br><span class="line">    circle(Point a,Point b,Point c)&#123;</span><br><span class="line">        Line u = Line((a+b)/<span class="number">2</span>,((a+b)/<span class="number">2</span>)+((b-a).rotleft()));</span><br><span class="line">        Line v = Line((b+c)/<span class="number">2</span>,((b+c)/<span class="number">2</span>)+((c-b).rotleft()));</span><br><span class="line">        p = u.crosspoint(v);</span><br><span class="line">        r = p.distance(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//三角形的内切圆</span></span><br><span class="line">    <span class="comment">//参数 bool t 没有作用，只是为了和上面外接圆函数区别</span></span><br><span class="line">    <span class="comment">//测试：UVA12304</span></span><br><span class="line">    circle(Point a,Point b,Point c,<span class="keyword">bool</span> t)&#123;</span><br><span class="line">        Line u,v;</span><br><span class="line">        <span class="keyword">double</span> m = <span class="built_in">atan2</span>(b.y-a.y,b.x-a.x), n = <span class="built_in">atan2</span>(c.y-a.y,c.x-a.</span><br><span class="line">        x);</span><br><span class="line">        u.s = a;</span><br><span class="line">        u.e = u.s + Point(<span class="built_in">cos</span>((n+m)/<span class="number">2</span>),<span class="built_in">sin</span>((n+m)/<span class="number">2</span>));</span><br><span class="line">        v.s = b;</span><br><span class="line">        m = <span class="built_in">atan2</span>(a.y-b.y,a.x-b.x) , n = <span class="built_in">atan2</span>(c.y-b.y,c.x-b.x);</span><br><span class="line">        v.e = v.s + Point(<span class="built_in">cos</span>((n+m)/<span class="number">2</span>),<span class="built_in">sin</span>((n+m)/<span class="number">2</span>));</span><br><span class="line">        p = u.crosspoint(v);</span><br><span class="line">        r = Line(a,b).dispointtoseg(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">        p.input();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf-%.2lf-%.2lf\n&quot;</span>,p.x,p.y,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (circle v)&#123;</span><br><span class="line">        <span class="keyword">return</span> (p==v.p) &amp;&amp; sgn(r-v.r)==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (circle v)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((p&lt;v.p)||((p==v.p)&amp;&amp;sgn(r-v.r)&lt;<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//面积</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pi*r*r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//周长</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">circumference</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*pi*r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点和圆的关系</span></span><br><span class="line">    <span class="comment">//0 圆外</span></span><br><span class="line">    <span class="comment">//1 圆上</span></span><br><span class="line">    <span class="comment">//2 圆内</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relation</span><span class="params">(Point b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> dst = b.distance(p);</span><br><span class="line">        <span class="keyword">if</span>(sgn(dst-r) &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sgn(dst-r)==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//线段和圆的关系</span></span><br><span class="line">    <span class="comment">//比较的是圆心到线段的距离和半径的关系</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relationseg</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> dst = v.dispointtoseg(p);</span><br><span class="line">        <span class="keyword">if</span>(sgn(dst-r) &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sgn(dst-r) == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//直线和圆的关系</span></span><br><span class="line">    <span class="comment">//比较的是圆心到直线的距离和半径的关系</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relationline</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> dst = v.dispointtoline(p);</span><br><span class="line">        <span class="keyword">if</span>(sgn(dst-r) &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sgn(dst-r) == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两圆的关系</span></span><br><span class="line">    <span class="comment">//5 相离</span></span><br><span class="line">    <span class="comment">//4 外切</span></span><br><span class="line">    <span class="comment">//3 相交</span></span><br><span class="line">    <span class="comment">//2 内切</span></span><br><span class="line">    <span class="comment">//1 内含</span></span><br><span class="line">    <span class="comment">//需要 Point 的 distance</span></span><br><span class="line">    <span class="comment">//测试：UVA12304</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relationcircle</span><span class="params">(circle v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> d = p.distance(v.p);</span><br><span class="line">        <span class="keyword">if</span>(sgn(d-r-v.r) &gt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span>(sgn(d-r-v.r) == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">double</span> l = <span class="built_in">fabs</span>(r-v.r);</span><br><span class="line">        <span class="keyword">if</span>(sgn(d-r-v.r)&lt;<span class="number">0</span> &amp;&amp; sgn(d-l)&gt;<span class="number">0</span>)<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span>(sgn(d-l)==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(sgn(d-l)&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求两个圆的交点，返回 0 表示没有交点，返回 1 是一个交点，2 是两个交点</span></span><br><span class="line">    <span class="comment">//需要 relationcircle</span></span><br><span class="line">    <span class="comment">//测试：UVA12304</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pointcrosscircle</span><span class="params">(circle v,Point &amp;p1,Point &amp;p2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rel = relationcircle(v);</span><br><span class="line">        <span class="keyword">if</span>(rel == <span class="number">1</span> || rel == <span class="number">5</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> d = p.distance(v.p);</span><br><span class="line">        <span class="keyword">double</span> l = (d*d+r*r-v.r*v.r)/(<span class="number">2</span>*d);</span><br><span class="line">        <span class="keyword">double</span> h = <span class="built_in">sqrt</span>(r*r-l*l);</span><br><span class="line">        Point tmp = p + (v.p-p).trunc(l);</span><br><span class="line">        p1 = tmp + ((v.p-p).rotleft().trunc(h));</span><br><span class="line">        p2 = tmp + ((v.p-p).rotright().trunc(h));</span><br><span class="line">        <span class="keyword">if</span>(rel == <span class="number">2</span> || rel == <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求直线和圆的交点，返回交点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pointcrossline</span><span class="params">(Line v,Point &amp;p1,Point &amp;p2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(*<span class="keyword">this</span>).relationline(v))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Point a = v.lineprog(p);</span><br><span class="line">        <span class="keyword">double</span> d = v.dispointtoline(p);</span><br><span class="line">        d = <span class="built_in">sqrt</span>(r*r-d*d);</span><br><span class="line">        <span class="keyword">if</span>(sgn(d) == <span class="number">0</span>)&#123;</span><br><span class="line">            p1 = a;</span><br><span class="line">            p2 = a;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p1 = a + (v.e-v.s).trunc(d);</span><br><span class="line">        p2 = a-(v.e-v.s).trunc(d);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到过 a,b 两点，半径为 r1 的两个圆</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gercircle</span><span class="params">(Point a,Point b,<span class="keyword">double</span> r1,circle &amp;c1,circle &amp;c2)</span></span>&#123;</span><br><span class="line">        circle x(a,r1),y(b,r1);</span><br><span class="line">        <span class="keyword">int</span> t = x.pointcrosscircle(y,c1.p,c2.p);</span><br><span class="line">        <span class="keyword">if</span>(!t)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        c1.r = c2.r = r;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到与直线 u 相切，过点 q, 半径为 r1 的圆</span></span><br><span class="line">    <span class="comment">//测试：UVA12304</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getcircle</span><span class="params">(Line u,Point q,<span class="keyword">double</span> r1,circle &amp;c1,circle &amp;c2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> dis = u.dispointtoline(q);</span><br><span class="line">        <span class="keyword">if</span>(sgn(dis-r1*<span class="number">2</span>)&gt;<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(sgn(dis) == <span class="number">0</span>)&#123;</span><br><span class="line">            c1.p = q + ((u.e-u.s).rotleft().trunc(r1));</span><br><span class="line">            c2.p = q + ((u.e-u.s).rotright().trunc(r1));</span><br><span class="line">            c1.r = c2.r = r1;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        Line u1 = Line((u.s + (u.e-u.s).rotleft().trunc(r1)),(u.e +</span><br><span class="line">        (u.e-u.s).rotleft().trunc(r1)));</span><br><span class="line">        Line u2 = Line((u.s + (u.e-u.s).rotright().trunc(r1)),(u.e</span><br><span class="line">        + (u.e-u.s).rotright().trunc(r1)));</span><br><span class="line">        circle cc = circle(q,r1);</span><br><span class="line">        Point p1,p2;</span><br><span class="line">        <span class="keyword">if</span>(!cc.pointcrossline(u1,p1,p2))cc.pointcrossline(u2,p1,p2)</span><br><span class="line">        ;</span><br><span class="line">        c1 = circle(p1,r1);</span><br><span class="line">        <span class="keyword">if</span>(p1 == p2)&#123;</span><br><span class="line">            c2 = c1;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c2 = circle(p2,r1);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//同时与直线 u,v 相切，半径为 r1 的圆</span></span><br><span class="line">    <span class="comment">//测试：UVA12304</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getcircle</span><span class="params">(Line u,Line v,<span class="keyword">double</span> r1,circle &amp;c1,circle &amp;c2,</span></span></span><br><span class="line"><span class="function"><span class="params">    circle &amp;c3,circle &amp;c4)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(u.parallel(v))<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//两直线平行</span></span><br><span class="line">        Line u1 = Line(u.s + (u.e-u.s).rotleft().trunc(r1),u.e + (u</span><br><span class="line">        .e-u.s).rotleft().trunc(r1));</span><br><span class="line">        Line u2 = Line(u.s + (u.e-u.s).rotright().trunc(r1),u.e + (</span><br><span class="line">        u.e-u.s).rotright().trunc(r1));</span><br><span class="line">        Line v1 = Line(v.s + (v.e-v.s).rotleft().trunc(r1),v.e + (v</span><br><span class="line">        .e-v.s).rotleft().trunc(r1));</span><br><span class="line">        Line v2 = Line(v.s + (v.e-v.s).rotright().trunc(r1),v.e + (</span><br><span class="line">        v.e-v.s).rotright().trunc(r1));</span><br><span class="line">        c1.r = c2.r = c3.r = c4.r = r1;</span><br><span class="line">        c1.p = u1.crosspoint(v1);</span><br><span class="line">        c2.p = u1.crosspoint(v2);</span><br><span class="line">        c3.p = u2.crosspoint(v1);</span><br><span class="line">        c4.p = u2.crosspoint(v2);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//同时与不相交圆 cx,cy 相切，半径为 r1 的圆</span></span><br><span class="line">    <span class="comment">//测试：UVA12304</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getcircle</span><span class="params">(circle cx,circle cy,<span class="keyword">double</span> r1,circle &amp;c1,circle &amp;</span></span></span><br><span class="line"><span class="function"><span class="params">    c2)</span></span>&#123;</span><br><span class="line">        circle x(cx.p,r1+cx.r),y(cy.p,r1+cy.r);</span><br><span class="line">        <span class="keyword">int</span> t = x.pointcrosscircle(y,c1.p,c2.p);</span><br><span class="line">        <span class="keyword">if</span>(!t)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        c1.r = c2.r = r1;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//过一点作圆的切线 (先判断点和圆的关系)</span></span><br><span class="line">    <span class="comment">//测试：UVA12304</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">tangentline</span><span class="params">(Point q,Line &amp;u,Line &amp;v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = relation(q);</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">2</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">1</span>)&#123;</span><br><span class="line">            u = Line(q,q + (q-p).rotleft());</span><br><span class="line">            v = u;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> d = p.distance(q);</span><br><span class="line">        <span class="keyword">double</span> l = r*r/d;</span><br><span class="line">        <span class="keyword">double</span> h = <span class="built_in">sqrt</span>(r*r-l*l);</span><br><span class="line">        u = Line(q,p + ((q-p).trunc(l) + (q-p).rotleft().trunc(h)))</span><br><span class="line">        ;</span><br><span class="line">        v = Line(q,p + ((q-p).trunc(l) + (q-p).rotright().trunc(h))</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求两圆相交的面积</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">areacircle</span><span class="params">(circle v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rel = relationcircle(v);</span><br><span class="line">        <span class="keyword">if</span>(rel &gt;= <span class="number">4</span>)<span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(rel &lt;= <span class="number">2</span>)<span class="keyword">return</span> min(area(),v.area());</span><br><span class="line">        <span class="keyword">double</span> d = p.distance(v.p);</span><br><span class="line">        <span class="keyword">double</span> hf = (r+v.r+d)/<span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">double</span> ss = <span class="number">2</span>*<span class="built_in">sqrt</span>(hf*(hf-r)*(hf-v.r)*(hf-d));</span><br><span class="line">        <span class="keyword">double</span> a1 = <span class="built_in">acos</span>((r*r+d*d-v.r*v.r)/(<span class="number">2.0</span>*r*d));</span><br><span class="line">        a1 = a1*r*r;</span><br><span class="line">        <span class="keyword">double</span> a2 = <span class="built_in">acos</span>((v.r*v.r+d*d-r*r)/(<span class="number">2.0</span>*v.r*d));</span><br><span class="line">        a2 = a2*v.r*v.r;</span><br><span class="line">        <span class="keyword">return</span> a1+a2-ss;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求圆和三角形 pab 的相交面积</span></span><br><span class="line">    <span class="comment">//测试：POJ3675 HDU3982 HDU2892</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">areatriangle</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sgn((p-a)^(p-b)) == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        Point q[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        q[len++] = a;</span><br><span class="line">        <span class="function">Line <span class="title">l</span><span class="params">(a,b)</span></span>;</span><br><span class="line">        Point p1,p2;</span><br><span class="line">        <span class="keyword">if</span>(pointcrossline(l,q[<span class="number">1</span>],q[<span class="number">2</span>])==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sgn((a-q[<span class="number">1</span>])*(b-q[<span class="number">1</span>]))&lt;<span class="number">0</span>)q[len++] = q[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(sgn((a-q[<span class="number">2</span>])*(b-q[<span class="number">2</span>]))&lt;<span class="number">0</span>)q[len++] = q[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        q[len++] = b;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">4</span> &amp;&amp; sgn((q[<span class="number">0</span>]-q[<span class="number">1</span>])*(q[<span class="number">2</span>]-q[<span class="number">1</span>]))&gt;<span class="number">0</span>)swap(q[<span class="number">1</span>],q</span><br><span class="line">        [<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(relation(q[i])==<span class="number">0</span>||relation(q[i+<span class="number">1</span>])==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">double</span> arg = p.rad(q[i],q[i+<span class="number">1</span>]);</span><br><span class="line">                res += r*r*arg/<span class="number">2.0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                res += <span class="built_in">fabs</span>((q[i]-p)^(q[i+<span class="number">1</span>]-p))/<span class="number">2.0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">polygon</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    Point p[maxp];</span><br><span class="line">    Line l[maxp];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(<span class="keyword">int</span> _n)</span></span>&#123;</span><br><span class="line">        n = _n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        p[i].input();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Point q)</span></span>&#123;</span><br><span class="line">        p[n++] = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getline</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            l[i] = Line(p[i],p[(i+<span class="number">1</span>)%n]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></span><br><span class="line">        Point p;</span><br><span class="line">    cmp(<span class="keyword">const</span> Point &amp;p0)&#123;p = p0;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> Point &amp;aa,<span class="keyword">const</span> Point &amp;bb)</span></span>&#123;</span><br><span class="line">            Point a = aa, b = bb;</span><br><span class="line">            <span class="keyword">int</span> d = sgn((a-p)^(b-p));</span><br><span class="line">            <span class="keyword">if</span>(d == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> sgn(a.distance(p)-b.distance(p)) &lt; <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> d &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//进行极角排序</span></span><br><span class="line">    <span class="comment">//首先需要找到最左下角的点</span></span><br><span class="line">    <span class="comment">//需要重载号好 Point 的 &lt; 操作符 (min 函数要用)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">norm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Point mi = p[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)mi = min(mi,p[i]);</span><br><span class="line">        sort(p,p+n,cmp(mi));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到凸包</span></span><br><span class="line">    <span class="comment">//得到的凸包里面的点编号是 0～n-1 的</span></span><br><span class="line">    <span class="comment">//两种凸包的方法</span></span><br><span class="line">    <span class="comment">//注意如果有影响，要特判下所有点共点，或者共线的特殊情况</span></span><br><span class="line">    <span class="comment">//测试 LightOJ1203 LightOJ1239</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getconvex</span><span class="params">(polygon &amp;convex)</span></span>&#123;</span><br><span class="line">        sort(p,p+n);</span><br><span class="line">        convex.n = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; min(n,<span class="number">2</span>);i++)&#123;</span><br><span class="line">            convex.p[i] = p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(convex.n == <span class="number">2</span> &amp;&amp; (convex.p[<span class="number">0</span>] == convex.p[<span class="number">1</span>]))convex.n</span><br><span class="line">        --;<span class="comment">//特判</span></span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> &amp;top = convex.n;</span><br><span class="line">        top = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(top &amp;&amp; sgn((convex.p[top]-p[i])^(convex.p[top<span class="number">-1</span>]-</span><br><span class="line">            p[i])) &lt;= <span class="number">0</span>)</span><br><span class="line">            top--;</span><br><span class="line">            convex.p[++top] = p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = top;</span><br><span class="line">        convex.p[++top] = p[n<span class="number">-2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-3</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">while</span>(top != temp &amp;&amp; sgn((convex.p[top]-p[i])^(convex.p</span><br><span class="line">            [top<span class="number">-1</span>]-p[i])) &lt;= <span class="number">0</span>)</span><br><span class="line">            top--;</span><br><span class="line">            convex.p[++top] = p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(convex.n == <span class="number">2</span> &amp;&amp; (convex.p[<span class="number">0</span>] == convex.p[<span class="number">1</span>]))convex.n</span><br><span class="line">        --;<span class="comment">//特判</span></span><br><span class="line">        convex.norm();<span class="comment">//原来得到的是顺时针的点，排序后逆时针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到凸包的另外一种方法</span></span><br><span class="line">    <span class="comment">//测试 LightOJ1203 LightOJ1239</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Graham</span><span class="params">(polygon &amp;convex)</span></span>&#123;</span><br><span class="line">        norm();</span><br><span class="line">        <span class="keyword">int</span> &amp;top = convex.n;</span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            top = <span class="number">1</span>;</span><br><span class="line">            convex.p[<span class="number">0</span>] = p[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>)&#123;</span><br><span class="line">            top = <span class="number">2</span>;</span><br><span class="line">            convex.p[<span class="number">0</span>] = p[<span class="number">0</span>];</span><br><span class="line">            convex.p[<span class="number">1</span>] = p[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(convex.p[<span class="number">0</span>] == convex.p[<span class="number">1</span>])top--;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        convex.p[<span class="number">0</span>] = p[<span class="number">0</span>];</span><br><span class="line">        convex.p[<span class="number">1</span>] = p[<span class="number">1</span>];</span><br><span class="line">        top = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>( top &gt; <span class="number">1</span> &amp;&amp; sgn((convex.p[top<span class="number">-1</span>]-convex.p[top<span class="number">-2</span>])</span><br><span class="line">            ^(p[i]-convex.p[top<span class="number">-2</span>])) &lt;= <span class="number">0</span> )</span><br><span class="line">            top--;</span><br><span class="line">            convex.p[top++] = p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(convex.n == <span class="number">2</span> &amp;&amp; (convex.p[<span class="number">0</span>] == convex.p[<span class="number">1</span>]))convex.n</span><br><span class="line">        --;<span class="comment">//特 判</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是不是凸的</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isconvex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> s[<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">memset</span>(s,<span class="literal">false</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = (i+<span class="number">1</span>)%n;</span><br><span class="line">            <span class="keyword">int</span> k = (j+<span class="number">1</span>)%n;</span><br><span class="line">            s[sgn((p[j]-p[i])^(p[k]-p[i]))+<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>] &amp;&amp; s[<span class="number">2</span>])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断点和任意多边形的关系</span></span><br><span class="line">    <span class="comment">// 3 点上</span></span><br><span class="line">    <span class="comment">// 2 边上</span></span><br><span class="line">    <span class="comment">// 1 内部</span></span><br><span class="line">    <span class="comment">// 0 外部</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relationpoint</span><span class="params">(Point q)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i] == q)<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        getline();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l[i].pointonseg(q))<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = (i+<span class="number">1</span>)%n;</span><br><span class="line">            <span class="keyword">int</span> k = sgn((q-p[j])^(p[i]-p[j]));</span><br><span class="line">            <span class="keyword">int</span> u = sgn(p[i].y-q.y);</span><br><span class="line">            <span class="keyword">int</span> v = sgn(p[j].y-q.y);</span><br><span class="line">            <span class="keyword">if</span>(k &gt; <span class="number">0</span> &amp;&amp; u &lt; <span class="number">0</span> &amp;&amp; v &gt;= <span class="number">0</span>)cnt++;</span><br><span class="line">            <span class="keyword">if</span>(k &lt; <span class="number">0</span> &amp;&amp; v &lt; <span class="number">0</span> &amp;&amp; u &gt;= <span class="number">0</span>)cnt--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//直线 u 切割凸多边形左侧</span></span><br><span class="line">    <span class="comment">//注意直线方向</span></span><br><span class="line">    <span class="comment">//测试：HDU3982</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">convexcut</span><span class="params">(Line u,polygon &amp;po)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;top = po.n;<span class="comment">//注意引用</span></span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> d1 = sgn((u.e-u.s)^(p[i]-u.s));</span><br><span class="line">            <span class="keyword">int</span> d2 = sgn((u.e-u.s)^(p[(i+<span class="number">1</span>)%n]-u.s));</span><br><span class="line">            <span class="keyword">if</span>(d1 &gt;= <span class="number">0</span>)po.p[top++] = p[i];</span><br><span class="line">            <span class="keyword">if</span>(d1*d2 &lt; <span class="number">0</span>)po.p[top++] = u.crosspoint(Line(p[i],p[(i</span><br><span class="line">            +<span class="number">1</span>)%n]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到周长</span></span><br><span class="line">    <span class="comment">//测试 LightOJ1239</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getcircumference</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            sum += p[i].distance(p[(i+<span class="number">1</span>)%n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到面积</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getarea</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            sum += (p[i]^p[(i+<span class="number">1</span>)%n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>(sum)/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到方向</span></span><br><span class="line">    <span class="comment">// 1 表示逆时针，0 表示顺时针</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">getdir</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        sum += (p[i]^p[(i+<span class="number">1</span>)%n]);</span><br><span class="line">        <span class="keyword">if</span>(sgn(sum) &gt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到重心</span></span><br><span class="line">    <span class="function">Point <span class="title">getbarycentre</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="function">Point <span class="title">ret</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">double</span> area = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">double</span> tmp = (p[i]-p[<span class="number">0</span>])^(p[i+<span class="number">1</span>]-p[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span>(sgn(tmp) == <span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            area += tmp;</span><br><span class="line">            ret.x += (p[<span class="number">0</span>].x+p[i].x+p[i+<span class="number">1</span>].x)/<span class="number">3</span>*tmp;</span><br><span class="line">            ret.y += (p[<span class="number">0</span>].y+p[i].y+p[i+<span class="number">1</span>].y)/<span class="number">3</span>*tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sgn(area)) ret = ret/area;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//多边形和圆交的面积</span></span><br><span class="line">    <span class="comment">//测试：POJ3675 HDU3982 HDU2892</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">areacircle</span><span class="params">(circle c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = (i+<span class="number">1</span>)%n;</span><br><span class="line">            <span class="keyword">if</span>(sgn( (p[j]-c.p)^(p[i]-c.p) ) &gt;= <span class="number">0</span>)</span><br><span class="line">            ans += c.areatriangle(p[i],p[j]);</span><br><span class="line">            <span class="keyword">else</span> ans-= c.areatriangle(p[i],p[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>(ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//多边形和圆关系</span></span><br><span class="line">    <span class="comment">// 2 圆完全在多边形内</span></span><br><span class="line">    <span class="comment">// 1 圆在多边形里面，碰到了多边形边界</span></span><br><span class="line">    <span class="comment">// 0 其它</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relationcircle</span><span class="params">(circle c)</span></span>&#123;</span><br><span class="line">        getline();</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(relationpoint(c.p) != <span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//圆心不在内部</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c.relationseg(l[i])==<span class="number">2</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(c.relationseg(l[i])==<span class="number">1</span>)x = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//AB X AC</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(Point A,Point B,Point C)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (B-A)^(C-A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//AB*AC</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dot</span><span class="params">(Point A,Point B,Point C)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (B-A)*(C-A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最小矩形面积覆盖</span></span><br><span class="line"><span class="comment">// A 必须是凸包 (而且是逆时针顺序)</span></span><br><span class="line"><span class="comment">// 测试 UVA 10173</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">minRectangleCover</span><span class="params">(polygon A)</span></span>&#123;</span><br><span class="line">    <span class="comment">//要特判 A.n &lt; 3 的情况</span></span><br><span class="line">    <span class="keyword">if</span>(A.n &lt; <span class="number">3</span>)<span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    A.p[A.n] = A.p[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">double</span> ans =<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">1</span>, p = <span class="number">1</span>, q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; A.n;i++)&#123;</span><br><span class="line">        <span class="comment">//卡出离边 A.p[i] - A.p[i+1] 最远的点</span></span><br><span class="line">        <span class="keyword">while</span>( sgn( cross(A.p[i],A.p[i+<span class="number">1</span>],A.p[r+<span class="number">1</span>])-cross(A.p[i],</span><br><span class="line">        A.p[i+<span class="number">1</span>],A.p[r]) ) &gt;= <span class="number">0</span> )</span><br><span class="line">        r = (r+<span class="number">1</span>)%A.n;</span><br><span class="line">        <span class="comment">//卡出 A.p[i] - A.p[i+1] 方向上正向 n 最远的点</span></span><br><span class="line">        <span class="keyword">while</span>(sgn( dot(A.p[i],A.p[i+<span class="number">1</span>],A.p[p+<span class="number">1</span>])-dot(A.p[i],A.p[i</span><br><span class="line">        +<span class="number">1</span>],A.p[p]) ) &gt;= <span class="number">0</span> )</span><br><span class="line">        p = (p+<span class="number">1</span>)%A.n;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)q = p;</span><br><span class="line">        <span class="comment">//卡出 A.p[i] - A.p[i+1] 方向上负向最远的点</span></span><br><span class="line">        <span class="keyword">while</span>(sgn(dot(A.p[i],A.p[i+<span class="number">1</span>],A.p[q+<span class="number">1</span>])-dot(A.p[i],A.p[i</span><br><span class="line">        +<span class="number">1</span>],A.p[q])) &lt;= <span class="number">0</span>)</span><br><span class="line">        q = (q+<span class="number">1</span>)%A.n;</span><br><span class="line">        <span class="keyword">double</span> d = (A.p[i]-A.p[i+<span class="number">1</span>]).len2();</span><br><span class="line">        <span class="keyword">double</span> tmp = cross(A.p[i],A.p[i+<span class="number">1</span>],A.p[r]) *</span><br><span class="line">        (dot(A.p[i],A.p[i+<span class="number">1</span>],A.p[p])-dot(A.p[i],A.p[i+<span class="number">1</span>],A.p[</span><br><span class="line">        q]))/d;</span><br><span class="line">        <span class="keyword">if</span>(ans &lt; <span class="number">0</span> || ans &gt; tmp)ans = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//直线切凸多边形</span></span><br><span class="line"><span class="comment">//多边形是逆时针的，在 q1q2 的左侧</span></span><br><span class="line"><span class="comment">//测试:HDU3982</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;Point&gt; <span class="title">convexCut</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;Point&gt; &amp;ps,Point q1,Point q2)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt;qs;</span><br><span class="line">    <span class="keyword">int</span> n = ps.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">        Point p1 = ps[i], p2 = ps[(i+<span class="number">1</span>)%n];</span><br><span class="line">        <span class="keyword">int</span> d1 = sgn((q2-q1)^(p1-q1)), d2 = sgn((q2-q1)^(p2-q1));</span><br><span class="line">        <span class="keyword">if</span>(d1 &gt;= <span class="number">0</span>)</span><br><span class="line">        qs.push_back(p1);</span><br><span class="line">        <span class="keyword">if</span>(d1 * d2 &lt; <span class="number">0</span>)</span><br><span class="line">        qs.push_back(Line(p1,p2).crosspoint(Line(q1,q2)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> qs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//半平面交</span></span><br><span class="line"><span class="comment">//测试 POJ3335 POJ1474 POJ1279</span></span><br><span class="line"><span class="comment">//***************************</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">halfplane</span>:</span><span class="keyword">public</span> Line&#123;</span><br><span class="line">    <span class="keyword">double</span> angle;</span><br><span class="line">halfplane()&#123;&#125;</span><br><span class="line">    <span class="comment">//表示向量 s-&gt;e 逆时针 (左侧) 的半平面</span></span><br><span class="line">    halfplane(Point _s,Point _e)&#123;</span><br><span class="line">        s = _s;</span><br><span class="line">        e = _e;</span><br><span class="line">    &#125;</span><br><span class="line">    halfplane(Line v)&#123;</span><br><span class="line">        s = v.s;</span><br><span class="line">        e = v.e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calcangle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        angle = <span class="built_in">atan2</span>(e.y-s.y,e.x-s.x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> halfplane &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> angle &lt; b.angle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">halfplanes</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    halfplane hp[maxp];</span><br><span class="line">    Point p[maxp];</span><br><span class="line">    <span class="keyword">int</span> que[maxp];</span><br><span class="line">    <span class="keyword">int</span> st,ed;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(halfplane tmp)</span></span>&#123;</span><br><span class="line">        hp[n++] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//去重</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unique</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sgn(hp[i].angle-hp[i<span class="number">-1</span>].angle) != <span class="number">0</span>)</span><br><span class="line">            hp[m++] = hp[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sgn( (hp[m<span class="number">-1</span>].e-hp[m<span class="number">-1</span>].s)^(hp[i].s-hp[m<span class="number">-1</span>].s)</span><br><span class="line">            ) &gt; <span class="number">0</span>)</span><br><span class="line">            hp[m<span class="number">-1</span>] = hp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        n = m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">halfplaneinsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)hp[i].calcangle();</span><br><span class="line">        sort(hp,hp+n);</span><br><span class="line">        unique();</span><br><span class="line">        que[st=<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        que[ed=<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        p[<span class="number">1</span>] = hp[<span class="number">0</span>].crosspoint(hp[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(st&lt;ed &amp;&amp; sgn((hp[i].e-hp[i].s)^(p[ed]-hp[i].s))</span><br><span class="line">            &lt;<span class="number">0</span>)ed--;</span><br><span class="line">            <span class="keyword">while</span>(st&lt;ed &amp;&amp; sgn((hp[i].e-hp[i].s)^(p[st+<span class="number">1</span>]-hp[i].s))</span><br><span class="line">            &lt;<span class="number">0</span>)st++;</span><br><span class="line">            que[++ed] = i;</span><br><span class="line">            <span class="keyword">if</span>(hp[i].parallel(hp[que[ed<span class="number">-1</span>]]))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p[ed]=hp[i].crosspoint(hp[que[ed<span class="number">-1</span>]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(st&lt;ed &amp;&amp; sgn((hp[que[st]].e-hp[que[st]].s)^(p[ed]-hp[</span><br><span class="line">        que[st]].s))&lt;<span class="number">0</span>)ed--;</span><br><span class="line">        <span class="keyword">while</span>(st&lt;ed &amp;&amp; sgn((hp[que[ed]].e-hp[que[ed]].s)^(p[st+<span class="number">1</span>]-</span><br><span class="line">        hp[que[ed]].s))&lt;<span class="number">0</span>)st++;</span><br><span class="line">        <span class="keyword">if</span>(st+<span class="number">1</span>&gt;=ed)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到最后半平面交得到的凸多边形</span></span><br><span class="line">    <span class="comment">//需要先调用 halfplaneinsert() 且返回 true</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getconvex</span><span class="params">(polygon &amp;con)</span></span>&#123;</span><br><span class="line">        p[st] = hp[que[st]].crosspoint(hp[que[ed]]);</span><br><span class="line">        con.n = ed-st+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = st,i = <span class="number">0</span>;j &lt;= ed;i++,j++)</span><br><span class="line">        con.p[i] = p[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//***************************</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">circles</span>&#123;</span></span><br><span class="line">    circle c[maxn];</span><br><span class="line">    <span class="keyword">double</span> ans[maxn];<span class="comment">//ans[i] 表示被覆盖了 i 次的面积</span></span><br><span class="line">    <span class="keyword">double</span> pre[maxn];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    circles()&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(circle cc)</span></span>&#123;</span><br><span class="line">        c[n++] = cc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//x 包含在 y 中</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">inner</span><span class="params">(circle x,circle y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.relationcircle(y) != <span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> sgn(x.r-y.r)&lt;=<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//圆的面积并去掉内含的圆</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init_or</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> mark[maxn] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; n;j++)</span><br><span class="line">            <span class="keyword">if</span>(i != j &amp;&amp; !mark[j])&#123;</span><br><span class="line">                <span class="keyword">if</span>( (c[i]==c[j])||inner(c[i],c[j]) )<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j &lt; n)mark[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!mark[i])</span><br><span class="line">        c[k++] = c[i];</span><br><span class="line">        n = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//圆的面积交去掉内含的圆</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init_add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">bool</span> mark[maxn] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; n;j++)</span><br><span class="line">            <span class="keyword">if</span>(i != j &amp;&amp; !mark[j])&#123;</span><br><span class="line">                <span class="keyword">if</span>( (c[i]==c[j])||inner(c[j],c[i]) )<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j &lt; n)mark[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!mark[i])</span><br><span class="line">        c[k++] = c[i];</span><br><span class="line">        n = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//半径为 r 的圆，弧度为 th 对应的弓形的面积</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">areaarc</span><span class="params">(<span class="keyword">double</span> th,<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span>*r*r*(th-<span class="built_in">sin</span>(th));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试 SPOJVCIRCLES SPOJCIRUT</span></span><br><span class="line">    <span class="comment">//SPOJVCIRCLES 求 n 个圆并的面积，需要加上 init_or() 去掉重复圆（否则WA）</span></span><br><span class="line">    <span class="comment">//SPOJCIRUT 是求被覆盖 k 次的面积，不能加 init_or()</span></span><br><span class="line">    <span class="comment">//对于求覆盖多少次面积的问题，不能解决相同圆，而且不能 init_or()</span></span><br><span class="line">    <span class="comment">//求多圆面积并，需要 init_or, 其中一个目的就是去掉相同圆</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getarea</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">double</span>,<span class="keyword">int</span>&gt; &gt;v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            v.clear();</span><br><span class="line">            v.push_back(<span class="built_in">make_pair</span>(-pi,<span class="number">1</span>));</span><br><span class="line">            v.push_back(<span class="built_in">make_pair</span>(pi,<span class="number">-1</span>));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n;j++)</span><br><span class="line">            <span class="keyword">if</span>(i != j)&#123;</span><br><span class="line">                Point q = (c[j].p-c[i].p);</span><br><span class="line">                <span class="keyword">double</span> ab = q.len(),ac = c[i].r, bc = c[j].r;</span><br><span class="line">                <span class="keyword">if</span>(sgn(ab+ac-bc)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    v.push_back(<span class="built_in">make_pair</span>(-pi,<span class="number">1</span>));</span><br><span class="line">                    v.push_back(<span class="built_in">make_pair</span>(pi,<span class="number">-1</span>));</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(sgn(ab+bc-ac)&lt;=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(sgn(ab-ac-bc)&gt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">double</span> th = <span class="built_in">atan2</span>(q.y,q.x), fai = <span class="built_in">acos</span>((ac*ac+</span><br><span class="line">                ab*ab-bc*bc)/(<span class="number">2.0</span>*ac*ab));</span><br><span class="line">                <span class="keyword">double</span> a0 = th-fai;</span><br><span class="line">                <span class="keyword">if</span>(sgn(a0+pi)&lt;<span class="number">0</span>)a0+=<span class="number">2</span>*pi;</span><br><span class="line">                <span class="keyword">double</span> a1 = th+fai;</span><br><span class="line">                <span class="keyword">if</span>(sgn(a1-pi)&gt;<span class="number">0</span>)a1-=<span class="number">2</span>*pi;</span><br><span class="line">                <span class="keyword">if</span>(sgn(a0-a1)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    v.push_back(<span class="built_in">make_pair</span>(a0,<span class="number">1</span>));</span><br><span class="line">                    v.push_back(<span class="built_in">make_pair</span>(pi,<span class="number">-1</span>));</span><br><span class="line">                    v.push_back(<span class="built_in">make_pair</span>(-pi,<span class="number">1</span>));</span><br><span class="line">                    v.push_back(<span class="built_in">make_pair</span>(a1,<span class="number">-1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    v.push_back(<span class="built_in">make_pair</span>(a0,<span class="number">1</span>));</span><br><span class="line">                    v.push_back(<span class="built_in">make_pair</span>(a1,<span class="number">-1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sort(v.begin(),v.end());</span><br><span class="line">            <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; v.size();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cur &amp;&amp; sgn(v[j].first-pre[cur]))&#123;</span><br><span class="line">                    ans[cur] += areaarc(v[j].first-pre[cur],c[i].r)</span><br><span class="line">                    ;</span><br><span class="line">                    ans[cur] += <span class="number">0.5</span>*(Point(c[i].p.x+c[i].r*<span class="built_in">cos</span>(pre[</span><br><span class="line">                    cur]),c[i].p.y+c[i].r*<span class="built_in">sin</span>(pre[cur]))^Point(c</span><br><span class="line">                    [i].p.x+c[i].r*<span class="built_in">cos</span>(v[j].first),c[i].p.y+c[i</span><br><span class="line">                    ].r*<span class="built_in">sin</span>(v[j].first)));</span><br><span class="line">                &#125;</span><br><span class="line">                cur += v[j].second;</span><br><span class="line">                pre[cur] = v[j].first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">        ans[i]-= ans[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//.3平面最近点对</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> INF = <span class="number">1e20</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y));</span><br><span class="line">&#125;</span><br><span class="line">Point p[MAXN];</span><br><span class="line">Point tmpt[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpx</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x &lt; b.x || (a.x == b.x &amp;&amp; a.y &lt; b.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpy</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.y &lt; b.y || (a.y == b.y &amp;&amp; a.x &lt; b.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Closest_Pair</span><span class="params">(<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> d = INF;</span><br><span class="line">    <span class="keyword">if</span>(left == right)<span class="keyword">return</span> d;</span><br><span class="line">    <span class="keyword">if</span>(left+<span class="number">1</span> == right)<span class="keyword">return</span> dist(p[left],p[right]);</span><br><span class="line">    <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">double</span> d1 = Closest_Pair(left,mid);</span><br><span class="line">    <span class="keyword">double</span> d2 = Closest_Pair(mid+<span class="number">1</span>,right);</span><br><span class="line">    d = min(d1,d2);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = left;i &lt;= right;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(p[mid].x-p[i].x) &lt;= d)</span><br><span class="line">        tmpt[cnt++] = p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(tmpt,tmpt+cnt,cmpy);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; cnt;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j &lt; cnt &amp;&amp; tmpt[j].y-tmpt[i].y &lt; d;j++)</span><br><span class="line">        d = min(d,dist(tmpt[i],tmpt[j]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n) == <span class="number">1</span> &amp;&amp; n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)p[i].input();</span><br><span class="line">        sort(p,p+n,cmpx);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,Closest_Pair(<span class="number">0</span>,n<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三维平面"><a href="#三维平面" class="headerlink" title="三维平面"></a>三维平面</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三维几何</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)<span class="keyword">return</span><span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point3</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y,z;</span><br><span class="line">    Point3(<span class="keyword">double</span> _x = <span class="number">0</span>,<span class="keyword">double</span> _y = <span class="number">0</span>,<span class="keyword">double</span> _z = <span class="number">0</span>)&#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">        z = _z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%.2lf-%.2lf-%.2lf\n&quot;</span>,x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> ==(<span class="keyword">const</span> Point3 &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn(x-b.x) == <span class="number">0</span> &amp;&amp; sgn(y-b.y) == <span class="number">0</span> &amp;&amp; sgn(z-b.z) ==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Point3 &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn(x-b.x)==<span class="number">0</span>?(sgn(y-b.y)==<span class="number">0</span>?sgn(z-b.z)&lt;<span class="number">0</span>:y&lt;b.y):x&lt;b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">len</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(x*x+y*y+z*z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">len2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*x+y*y+z*z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">distance</span><span class="params">(<span class="keyword">const</span> Point3 &amp;b)</span><span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>((x-b.x)*(x-b.x)+(y-b.y)*(y-b.y)+(z-b.z)*(z-b.z)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    Point3 <span class="keyword">operator</span>-(<span class="keyword">const</span> Point3 &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point3(x-b.x,y-b.y,z-b.z);</span><br><span class="line">    &#125;</span><br><span class="line">    Point3 <span class="keyword">operator</span> +(<span class="keyword">const</span> Point3 &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point3(x+b.x,y+b.y,z+b.z);</span><br><span class="line">    &#125;</span><br><span class="line">    Point3 <span class="keyword">operator</span> *(<span class="keyword">const</span> <span class="keyword">double</span> &amp;k)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point3(x*k,y*k,z*k);</span><br><span class="line">    &#125;</span><br><span class="line">    Point3 <span class="keyword">operator</span> /(<span class="keyword">const</span> <span class="keyword">double</span> &amp;k)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point3(x/k,y/k,z/k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点乘</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> *(<span class="keyword">const</span> Point3 &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.x+y*b.y+z*b.z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//叉乘</span></span><br><span class="line">    Point3 <span class="keyword">operator</span> ^(<span class="keyword">const</span> Point3 &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point3(y*b.z-z*b.y,z*b.x-x*b.z,x*b.y-y*b.x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">rad</span><span class="params">(Point3 a,Point3 b)</span></span>&#123;</span><br><span class="line">        Point3 p = (*<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">acos</span>( ( (a-p)*(b-p) )/ (a.distance(p)*b.distance(p))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//变换长度</span></span><br><span class="line">    <span class="function">Point3 <span class="title">trunc</span><span class="params">(<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> l = len();</span><br><span class="line">        <span class="keyword">if</span>(!sgn(l))<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        r /= l;</span><br><span class="line">        <span class="keyword">return</span> Point3(x*r,y*r,z*r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Point3 s,e;</span><br><span class="line">Line3()&#123;&#125;</span><br><span class="line">    Line3(Point3 _s,Point3 _e)</span><br><span class="line">    &#123;</span><br><span class="line">        s = _s;</span><br><span class="line">        e = _e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> ==(<span class="keyword">const</span> Line3 v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (s==v.s)&amp;&amp;(e==v.e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        s.input();</span><br><span class="line">        e.input();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.distance(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点到直线距离</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dispointtoline</span><span class="params">(Point3 p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((e-s)^(p-s)).len()/s.distance(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点到线段距离</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dispointtoseg</span><span class="params">(Point3 p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sgn((p-s)*(e-s)) &lt; <span class="number">0</span> || sgn((p-e)*(s-e)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> min(p.distance(s),e.distance(p));</span><br><span class="line">        <span class="keyword">return</span> dispointtoline(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回点 p 在直线上的投影</span></span><br><span class="line">    <span class="function">Point3 <span class="title">lineprog</span><span class="params">(Point3 p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s + ( ((e-s)*((e-s)*(p-s)))/((e-s).len2()) );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//p 绕此向量逆时针 arg 角度</span></span><br><span class="line">    <span class="function">Point3 <span class="title">rotate</span><span class="params">(Point3 p,<span class="keyword">double</span> ang)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sgn(((s-p)^(e-p)).len()) == <span class="number">0</span>)<span class="keyword">return</span> p;</span><br><span class="line">        Point3 f1 = (e-s)^(p-s);</span><br><span class="line">        Point3 f2 = (e-s)^(f1);</span><br><span class="line">        <span class="keyword">double</span> len = ((s-p)^(e-p)).len()/s.distance(e);</span><br><span class="line">        f1 = f1.trunc(len); f2 = f2.trunc(len);</span><br><span class="line">        Point3 h = p+f2;</span><br><span class="line">        Point3 pp = h+f1;</span><br><span class="line">        <span class="keyword">return</span> h + ((p-h)*<span class="built_in">cos</span>(ang)) + ((pp-h)*<span class="built_in">sin</span>(ang));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点在直线上</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">pointonseg</span><span class="params">(Point3 p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn( ((s-p)^(e-p)).len() ) == <span class="number">0</span> &amp;&amp; sgn((s-p)*(e-p))</span><br><span class="line">        == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Plane</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Point3 a,b,c,o;<span class="comment">//平面上的三个点，以及法向量</span></span><br><span class="line">Plane()&#123;&#125;</span><br><span class="line">    Plane(Point3 _a,Point3 _b,Point3 _c)</span><br><span class="line">    &#123;</span><br><span class="line">        a = _a;</span><br><span class="line">        b = _b;</span><br><span class="line">        c = _c;</span><br><span class="line">        o = pvec();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Point3 <span class="title">pvec</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (b-a)^(c-a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ax+by+cz+d = 0</span></span><br><span class="line">    Plane(<span class="keyword">double</span> _a,<span class="keyword">double</span> _b,<span class="keyword">double</span> _c,<span class="keyword">double</span> _d)</span><br><span class="line">    &#123;</span><br><span class="line">        o = Point3(_a,_b,_c);</span><br><span class="line">        <span class="keyword">if</span>(sgn(_a) != <span class="number">0</span>)</span><br><span class="line">        a = Point3((-_d-_c-_b)/_a,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sgn(_b) != <span class="number">0</span>)</span><br><span class="line">        a = Point3(<span class="number">1</span>,(-_d-_c-_a)/_b,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sgn(_c) != <span class="number">0</span>)</span><br><span class="line">        a = Point3(<span class="number">1</span>,<span class="number">1</span>,(-_d-_a-_b)/_c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点在平面上的判断</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">pointonplane</span><span class="params">(Point3 p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn((p-a)*o) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两平面夹角</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">angleplane</span><span class="params">(Plane f)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">acos</span>(o*f.o)/(o.len()*f.o.len());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//平面和直线的交点，返回值是交点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">crossline</span><span class="params">(Line3 u,Point3 &amp;p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x = o*(u.e-a);</span><br><span class="line">        <span class="keyword">double</span> y = o*(u.s-a);</span><br><span class="line">        <span class="keyword">double</span> d = x-y;</span><br><span class="line">        <span class="keyword">if</span>(sgn(d) == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p = ((u.s*x)-(u.e*y))/d;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点到平面最近点 (也就是投影)</span></span><br><span class="line">    <span class="function">Point3 <span class="title">pointtoplane</span><span class="params">(Point3 p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Line3 u = Line3(p,p+o);</span><br><span class="line">        crossline(u,p);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//平面和平面的交线</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">crossplane</span><span class="params">(Plane f,Line3 &amp;u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Point3 oo = o^f.o;</span><br><span class="line">        Point3 v = o^oo;</span><br><span class="line">        <span class="keyword">double</span> d = <span class="built_in">fabs</span>(f.o*v);</span><br><span class="line">        <span class="keyword">if</span>(sgn(d) == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Point3 q = a + (v*(f.o*(f.a-a))/d);</span><br><span class="line">        u = Line3(q,q+oo);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-模版-计算几何 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
            <tag> 模版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CGL_3_A: Area</title>
      <link href="//Computing-geometry-jls/CGL-3-A-Area/"/>
      <url>//Computing-geometry-jls/CGL-3-A-Area/</url>
      
        <content type="html"><![CDATA[<h1 id="Area"><a href="#Area" class="headerlink" title="Area"></a>Area</h1><p>For a given polygon <em>g</em>, computes the area of the polygon.</p><p><em>g</em> is represented by a sequence of points $p_1$, $p_2$,…, $p_n$ where line segments connecting <em>p</em>i and <em>pi</em>+1 (1 ≤ <em>i</em>≤ <em>n</em>−1) are sides of <em>g</em>. The line segment connecting <em>pn</em> and <em>p</em>1 is also a side of the polygon.</p><p>Note that the polygon is not necessarily convex.</p><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The input consists of coordinates of the points <em>p</em>1,…, <em>pn</em> in the following format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n</span><br><span class="line">x1 y1 </span><br><span class="line">x2 y2</span><br><span class="line">:</span><br><span class="line">xn yn</span><br></pre></td></tr></table></figure><p>The first integer <em>n</em> is the number of points. The coordinate of a point <em>pi</em> is given by two integers <em>xi</em> and <em>yi</em>. The coordinates of points are given in the order of counter-clockwise visit of them.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Print the area of the polygon in a line. The area should be printed with one digit to the right of the decimal point.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>3 ≤ <em>n</em> ≤ 100</li><li>-10000 ≤ $x_i,y_i$  ≤ 10000</li><li>No point will occur more than once.</li><li>Two sides can intersect only at a common endpoint.</li></ul><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">0 0</span><br><span class="line">2 2</span><br><span class="line">-1 1</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.0</span><br></pre></td></tr></table></figure><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">0 0</span><br><span class="line">1 1</span><br><span class="line">1 2</span><br><span class="line">0 2</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.5</span><br></pre></td></tr></table></figure><hr><p>Source: <a href="https://onlinejudge.u-aizu.ac.jp/problems/CGL_3_A" rel="external nofollow noreferrer">https://onlinejudge.u-aizu.ac.jp/problems/CGL_3_A</a></p><blockquote><p>求多边形的面积</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> x,<span class="keyword">double</span> y):x(x),y(y)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line">Vector <span class="keyword">operator</span> + (Vector A,Vector B)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x+B.x,A.y+B.y);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> - (Vector A,Vector B)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x-B.x,A.y-B.y);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> * (Vector A,<span class="keyword">double</span> p)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x*p,A.y*p);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> / (Vector A,<span class="keyword">double</span> p)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x/p,A.y/p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x||(a.x==b.x&amp;&amp;a.y&lt;b.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">else</span> <span class="keyword">return</span> (x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> dcmp(a.x-b.x)==<span class="number">0</span> &amp;&amp; dcmp(a.y-b.y)==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Dot</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.x*B.x+A.y*B.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Length</span><span class="params">(Vector A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(Dot(A,A));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Angle</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>(Dot(A,B)/Length(A)/Length(B));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//叉积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cross</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (A.x*B.y-A.y*B.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//三角形面积的二倍的叉乘公式</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Area2</span><span class="params">(Point A,Point B,Point C)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Cross(B-A,C-A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向量旋转,rad是弧度</span></span><br><span class="line"><span class="function">Vector <span class="title">Rotate</span><span class="params">(Vector A,<span class="keyword">double</span> rad)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x*<span class="built_in">cos</span>(rad)-A.y*<span class="built_in">sin</span>(rad),A.x*<span class="built_in">sin</span>(rad)+A.y*<span class="built_in">cos</span>(rad));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算向量的单位法线,先逆时针旋转90度，然后把长度归一化</span></span><br><span class="line"><span class="function">Vector <span class="title">Normal</span><span class="params">(Vector A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> Len=Length(A);</span><br><span class="line">    <span class="keyword">return</span> Vector(-A.y/Len,A.x/Len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求两直线交点</span></span><br><span class="line"><span class="comment">//调用前请确保P+tv和Q+tw有唯一交点，当且仅当Cross(v,w)非0</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineIntersection</span><span class="params">(Point P,Vector v,Point Q,Vector w)</span></span>&#123;</span><br><span class="line">    Vector u=P-Q;</span><br><span class="line">    <span class="keyword">double</span> t=Cross(w,u)/Cross(v,w);</span><br><span class="line">    <span class="keyword">return</span> P+v*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点到直线的距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToLine</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    Vector v1=B-A,v2=P-A;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(Cross(v1,v2))/Length(v1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点到线段的距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToSegment</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A==B) <span class="keyword">return</span> Length(P-A);</span><br><span class="line">    Vector v1=B-A,v2=P-A,v3=P-B;</span><br><span class="line">    <span class="keyword">if</span>(dcmp(Dot(v1,v2))&lt;<span class="number">0</span>) <span class="keyword">return</span> Length(v2);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dcmp(Dot(v1,v3))&gt;<span class="number">0</span>) <span class="keyword">return</span> Length(v3);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">fabs</span>(Cross(v1,v2))/Length(v1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点在直线上的投影</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineProjection</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    Vector v=B-A;</span><br><span class="line">    <span class="keyword">return</span> A+v*(Dot(v,P-A)/Dot(v,v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PolygonArea</span><span class="params">(Point* p,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> area=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        area+=Cross(p[i]-p[<span class="number">0</span>],p[i+<span class="number">1</span>]-p[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> area/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    Point Pg[maxn];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;Pg[i].x&gt;&gt;Pg[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">1</span>)&lt;&lt;PolygonArea(Pg,n)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-计算几何 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CGL_2_D: Distance</title>
      <link href="//Computing-geometry-jls/CGL-2-D-Distance/"/>
      <url>//Computing-geometry-jls/CGL-2-D-Distance/</url>
      
        <content type="html"><![CDATA[<h1 id="Distance"><a href="#Distance" class="headerlink" title="Distance"></a>Distance</h1><p>For given two segments <em>s</em>1 and <em>s</em>2, print the distance between them.</p><p><em>s</em>1 is formed by end points <em>p</em>0 and <em>p</em>1, and <em>s</em>2 is formed by end points <em>p</em>2 and <em>p</em>3.</p><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The entire input looks like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">q (the number of queries)</span><br><span class="line">1st query</span><br><span class="line">2nd query</span><br><span class="line">...</span><br><span class="line">qth query</span><br></pre></td></tr></table></figure><p>Each query consists of integer coordinates of end points of <em>s</em>1 and <em>s</em>2 in the following format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xp0 yp0 xp1 yp1 xp2 yp2 xp3 yp3</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each query, print the distance. The output values should be in a decimal fraction with an error less than 0.00000001.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 ≤ <em>q</em> ≤ 1000</li><li>-10000 ≤ xpi, ypi ≤ 10000</li><li><em>p</em>0≠<em>p</em>1 and <em>p</em>2≠<em>p</em>3.</li></ul><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">0 0 1 0 0 1 1 1</span><br><span class="line">0 0 1 0 2 1 1 2</span><br><span class="line">-1 0 1 0 0 1 0 -1</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.0000000000</span><br><span class="line">1.4142135624</span><br><span class="line">0.0000000000</span><br></pre></td></tr></table></figure><hr><p>Source: <a href="https://onlinejudge.u-aizu.ac.jp/problems/CGL_2_D" rel="external nofollow noreferrer">https://onlinejudge.u-aizu.ac.jp/problems/CGL_2_D</a></p><blockquote><p>求两个线段的距离</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">// 计算几何模板</span></span><br><span class="line"><span class="comment">//二维平面</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf = <span class="number">1e20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxp = <span class="number">1010</span>;</span><br><span class="line"><span class="comment">//Compares a double to zero</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)<span class="keyword">return</span><span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//square of a double</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">sqr</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;<span class="keyword">return</span> x*x;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> _x,<span class="keyword">double</span> _y)&#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2f-%.2f\n&quot;</span>,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (Point b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn(x-b.x) == <span class="number">0</span> &amp;&amp; sgn(y-b.y) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Point b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn(x-b.x)== <span class="number">0</span>-sgn(y-b.y)?<span class="number">0</span>:x&lt;b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x-b.x,y-b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//叉积</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> ^(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.y-y*b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点积</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> *(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.x + y*b.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回长度</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">len</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hypot(x,y);<span class="comment">//库函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回长度的平方</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">len2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*x + y*y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回两点的距离</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">distance</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hypot(x-p.x,y-p.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> +(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x+b.x,y+b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> *(<span class="keyword">const</span> <span class="keyword">double</span> &amp;k)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x*k,y*k);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> /(<span class="keyword">const</span> <span class="keyword">double</span> &amp;k)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x/k,y/k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算 pa 和 pb 的夹角</span></span><br><span class="line">    <span class="comment">//就是求这个点看 a,b 所成的夹角</span></span><br><span class="line">    <span class="comment">//测试 LightOJ1203</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">rad</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line">        Point p = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="built_in">atan2</span>( <span class="built_in">fabs</span>((a-p)^(b-p)),(a-p)*(b-p) ));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//化为长度为 r 的向量</span></span><br><span class="line">    <span class="function">Point <span class="title">trunc</span><span class="params">(<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> l = len();</span><br><span class="line">        <span class="keyword">if</span>(!sgn(l))<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        r /= l;</span><br><span class="line">        <span class="keyword">return</span> Point(x*r,y*r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//逆时针旋转 90 度</span></span><br><span class="line">    <span class="function">Point <span class="title">rotleft</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(-y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//顺时针旋转 90 度</span></span><br><span class="line">    <span class="function">Point <span class="title">rotright</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(y,-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//绕着 p 点逆时针旋转 angle</span></span><br><span class="line">    <span class="function">Point <span class="title">rotate</span><span class="params">(Point p,<span class="keyword">double</span> angle)</span></span>&#123;</span><br><span class="line">        Point v = (*<span class="keyword">this</span>)-p;</span><br><span class="line">        <span class="keyword">double</span> c = <span class="built_in">cos</span>(angle), s = <span class="built_in">sin</span>(angle);</span><br><span class="line">        <span class="keyword">return</span> Point(p.x + v.x*c-v.y*s,p.y + v.x*s + v.y*c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">    Point s,e;</span><br><span class="line">    Line()&#123;&#125;</span><br><span class="line">    Line(Point _s,Point _e)&#123;</span><br><span class="line">        s = _s;</span><br><span class="line">        e = _e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> ==(Line v)&#123;</span><br><span class="line">        <span class="keyword">return</span> (s == v.s)&amp;&amp;(e == v.e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据一个点和倾斜角 angle 确定直线,0&lt;=angle&lt;pi</span></span><br><span class="line">    Line(Point p,<span class="keyword">double</span> angle)&#123;</span><br><span class="line">        s = p;</span><br><span class="line">        <span class="keyword">if</span>(sgn(angle-pi/<span class="number">2</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">            e = (s + Point(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            e = (s + Point(<span class="number">1</span>,<span class="built_in">tan</span>(angle)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ax+by+c=0</span></span><br><span class="line">    Line(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sgn(a) == <span class="number">0</span>)&#123;</span><br><span class="line">            s = Point(<span class="number">0</span>,-c/b);</span><br><span class="line">            e = Point(<span class="number">1</span>,-c/b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sgn(b) == <span class="number">0</span>)&#123;</span><br><span class="line">            s = Point(-c/a,<span class="number">0</span>);</span><br><span class="line">            e = Point(-c/a,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            s = Point(<span class="number">0</span>,-c/b);</span><br><span class="line">            e = Point(<span class="number">1</span>,(-c-a)/b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">        s.input();</span><br><span class="line">        e.input();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">adjust</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(e &lt; s)&#123;</span><br><span class="line">            swap(s,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求线段长度</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.distance(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回直线倾斜角 0&lt;=angle&lt;pi</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">angle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> k = <span class="built_in">atan2</span>(e.y-s.y,e.x-s.x);</span><br><span class="line">        <span class="keyword">if</span>(sgn(k) &lt; <span class="number">0</span>)k += pi;</span><br><span class="line">        <span class="keyword">if</span>(sgn(k-pi) == <span class="number">0</span>)k-= pi;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点和直线关系</span></span><br><span class="line">    <span class="comment">//1 在左侧</span></span><br><span class="line">    <span class="comment">//2 在右侧</span></span><br><span class="line">    <span class="comment">//3 在直线上</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relation</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = sgn((p-s)^(e-s));</span><br><span class="line">        <span class="keyword">if</span>(c &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c &gt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 点在线段上的判断</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">pointonseg</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn((p-s)^(e-s)) == <span class="number">0</span> &amp;&amp; sgn((p-s)*(p-e)) &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两向量平行 (对应直线平行或重合)</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">parallel</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn((e-s)^(v.e-v.s)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两线段相交判断</span></span><br><span class="line">    <span class="comment">//2 规范相交</span></span><br><span class="line">    <span class="comment">//1 非规范相交</span></span><br><span class="line">    <span class="comment">//0 不相交</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">segcrossseg</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d1 = sgn((e-s)^(v.s-s));</span><br><span class="line">        <span class="keyword">int</span> d2 = sgn((e-s)^(v.e-s));</span><br><span class="line">        <span class="keyword">int</span> d3 = sgn((v.e-v.s)^(s-v.s));</span><br><span class="line">        <span class="keyword">int</span> d4 = sgn((v.e-v.s)^(e-v.s));</span><br><span class="line">        <span class="keyword">if</span>( (d1^d2)==<span class="number">-2</span> &amp;&amp; (d3^d4)==<span class="number">-2</span> )<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (d1==<span class="number">0</span> &amp;&amp; sgn((v.s-s)*(v.s-e))&lt;=<span class="number">0</span>) ||</span><br><span class="line">               (d2==<span class="number">0</span> &amp;&amp; sgn((v.e-s)*(v.e-e))&lt;=<span class="number">0</span>) ||</span><br><span class="line">               (d3==<span class="number">0</span> &amp;&amp; sgn((s-v.s)*(s-v.e))&lt;=<span class="number">0</span>) ||</span><br><span class="line">               (d4==<span class="number">0</span> &amp;&amp; sgn((e-v.s)*(e-v.e))&lt;=<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//直线和线段相交判断</span></span><br><span class="line">    <span class="comment">//-*this line -v seg</span></span><br><span class="line">    <span class="comment">//2 规范相交</span></span><br><span class="line">    <span class="comment">//1 非规范相交</span></span><br><span class="line">    <span class="comment">//0 不相交</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">linecrossseg</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d1 = sgn((e-s)^(v.s-s));</span><br><span class="line">        <span class="keyword">int</span> d2 = sgn((e-s)^(v.e-s));</span><br><span class="line">        <span class="keyword">if</span>((d1^d2)==<span class="number">-2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (d1==<span class="number">0</span>||d2==<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两直线关系</span></span><br><span class="line">    <span class="comment">//0 平行</span></span><br><span class="line">    <span class="comment">//1 重合</span></span><br><span class="line">    <span class="comment">//2 相交</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">linecrossline</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((*<span class="keyword">this</span>).parallel(v))</span><br><span class="line">            <span class="keyword">return</span> v.relation(s)==<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求两直线的交点</span></span><br><span class="line">    <span class="comment">//要保证两直线不平行或重合</span></span><br><span class="line">    <span class="function">Point <span class="title">crosspoint</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> a1 = (v.e-v.s)^(s-v.s);</span><br><span class="line">        <span class="keyword">double</span> a2 = (v.e-v.s)^(e-v.s);</span><br><span class="line">        <span class="keyword">return</span> Point((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点到直线的距离</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dispointtoline</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>((p-s)^(e-s))/length();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点到线段的距离</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dispointtoseg</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sgn((p-s)*(e-s))&lt;<span class="number">0</span> || sgn((p-e)*(s-e))&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> min(p.distance(s),p.distance(e));</span><br><span class="line">        <span class="keyword">return</span> dispointtoline(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回线段到线段的距离</span></span><br><span class="line">    <span class="comment">//前提是两线段不相交，相交距离就是 0 了</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dissegtoseg</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min(min(dispointtoseg(v.s),dispointtoseg(v.e)),min(v.dispointtoseg(s),v.dispointtoseg(e)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回点 p 在直线上的投影</span></span><br><span class="line">    <span class="function">Point <span class="title">lineprog</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s + ( ((e-s)*((e-s)*(p-s)))/((e-s).len2()) );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回点 p 关于直线的对称点</span></span><br><span class="line">    <span class="function">Point <span class="title">symmetrypoint</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        Point q = lineprog(p);</span><br><span class="line">        <span class="keyword">return</span> Point(<span class="number">2</span>*q.x-p.x,<span class="number">2</span>*q.y-p.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        Line a,b;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a.s.x&gt;&gt;a.s.y&gt;&gt;a.e.x&gt;&gt;a.e.y&gt;&gt;b.s.x&gt;&gt;b.s.y&gt;&gt;b.e.x&gt;&gt;b.e.y;</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(a.segcrossseg(b)==<span class="number">0</span>) ans=a.dissegtoseg(b);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">10</span>)&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-计算几何 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CGL_2_C: Cross Point</title>
      <link href="//Computing-geometry-jls/CGL-2-C-Cross-Point/"/>
      <url>//Computing-geometry-jls/CGL-2-C-Cross-Point/</url>
      
        <content type="html"><![CDATA[<h1 id="Cross-Point"><a href="#Cross-Point" class="headerlink" title="Cross Point"></a>Cross Point</h1><p>For given two segments <em>s</em>1 and <em>s</em>2, print the coordinate of the cross point of them.</p><p><em>s</em>1 is formed by end points <em>p</em>0 and <em>p</em>1, and <em>s</em>2 is formed by end points <em>p</em>2 and <em>p</em>3.</p><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The entire input looks like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">q (the number of queries)</span><br><span class="line">1st query</span><br><span class="line">2nd query</span><br><span class="line">...</span><br><span class="line">qth query</span><br></pre></td></tr></table></figure><p>Each query consists of integer coordinates of end points of <em>s</em>1 and <em>s</em>2 in the following format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xp0 yp0 xp1 yp1 xp2 yp2 xp3 yp3</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each query, print the coordinate of the cross point. The output values should be in a decimal fraction with an error less than 0.00000001.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 ≤ <em>q</em> ≤ 1000</li><li>-10000 ≤ xpi, ypi ≤ 10000</li><li><em>p</em>0≠<em>p</em>1 and <em>p</em>2≠<em>p</em>3.</li><li>The given segments have a cross point and are not in parallel.</li></ul><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">0 0 2 0 1 1 1 -1</span><br><span class="line">0 0 1 1 0 1 1 0</span><br><span class="line">0 0 1 1 1 0 0 1</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.0000000000 0.0000000000</span><br><span class="line">0.5000000000 0.5000000000</span><br><span class="line">0.5000000000 0.5000000000</span><br></pre></td></tr></table></figure><hr><p>Source: <a href="https://onlinejudge.u-aizu.ac.jp/problems/CGL_2_C" rel="external nofollow noreferrer">https://onlinejudge.u-aizu.ac.jp/problems/CGL_2_C</a></p><blockquote><p>就是求两个线段的交点，两种方法</p></blockquote><ul><li>1:</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> x,<span class="keyword">double</span> y):x(x),y(y)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line">Vector <span class="keyword">operator</span> + (Vector A,Vector B)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x+B.x,A.y+B.y);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> - (Vector A,Vector B)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x-B.x,A.y-B.y);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> * (Vector A,<span class="keyword">double</span> p)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x*p,A.y*p);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> / (Vector A,<span class="keyword">double</span> p)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x/p,A.y/p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x||(a.x==b.x&amp;&amp;a.y&lt;b.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">else</span> <span class="keyword">return</span> (x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> dcmp(a.x-b.x)==<span class="number">0</span> &amp;&amp; dcmp(a.y-b.y)==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Dot</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.x*B.x+A.y*B.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Length</span><span class="params">(Vector A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(Dot(A,A));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Angle</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>(Dot(A,B)/Length(A)/Length(B));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//叉积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cross</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (A.x*B.y-A.y*B.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//三角形面积的二倍的叉乘公式</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Area2</span><span class="params">(Point A,Point B,Point C)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Cross(B-A,C-A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向量旋转,rad是弧度</span></span><br><span class="line"><span class="function">Vector <span class="title">Rotate</span><span class="params">(Vector A,<span class="keyword">double</span> rad)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x*<span class="built_in">cos</span>(rad)-A.y*<span class="built_in">sin</span>(rad),A.x*<span class="built_in">sin</span>(rad)+A.y*<span class="built_in">cos</span>(rad));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算向量的单位法线,先逆时针旋转90度，然后把长度归一化</span></span><br><span class="line"><span class="function">Vector <span class="title">Normal</span><span class="params">(Vector A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> Len=Length(A);</span><br><span class="line">    <span class="keyword">return</span> Vector(-A.y/Len,A.x/Len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求两直线交点</span></span><br><span class="line"><span class="comment">//调用前请确保P+tv和Q+tw有唯一交点，当且仅当Cross(v,w)非0</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineIntersection</span><span class="params">(Point P,Vector v,Point Q,Vector w)</span></span>&#123;</span><br><span class="line">    Vector u=P-Q;</span><br><span class="line">    <span class="keyword">double</span> t=Cross(w,u)/Cross(v,w);</span><br><span class="line">    <span class="keyword">return</span> P+v*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点到直线的距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToLine</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    Vector v1=B-A,v2=P-A;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(Cross(v1,v2))/Length(v1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点到线段的距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToSegment</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A==B) <span class="keyword">return</span> Length(P-A);</span><br><span class="line">    Vector v1=B-A,v2=P-A,v3=P-B;</span><br><span class="line">    <span class="keyword">if</span>(dcmp(Dot(v1,v2))&lt;<span class="number">0</span>) <span class="keyword">return</span> Length(v2);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dcmp(Dot(v1,v3))&gt;<span class="number">0</span>) <span class="keyword">return</span> Length(v3);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">fabs</span>(Cross(v1,v2))/Length(v1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点在直线上的投影</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineProjection</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    Vector v=B-A;</span><br><span class="line">    <span class="keyword">return</span> A+v*(Dot(v,P-A)/Dot(v,v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断两线段严格相交</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SegmentProperIntersection</span><span class="params">(Point a1,Point a2,Point b1,Point b2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> c1=Cross(a2-a1,b1-a1), c2=Cross(a2-a1,b2-a1),</span><br><span class="line">            c3=Cross(b2-b1,a1-b1), c4=Cross(b2-b1,a2-b1);</span><br><span class="line">    <span class="keyword">return</span> dcmp(c1)*dcmp(c2)&lt;<span class="number">0</span> &amp;&amp; dcmp(c3)*dcmp(c4)&lt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断点是否在线段上</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">OnSegment</span><span class="params">(Point P,Point a1,Point a2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dcmp(Cross(a1-P,a2-P))==<span class="number">0</span> &amp;&amp; dcmp(Dot(a1-P,a2-P))&lt;=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多边形的面积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PolygonArea</span><span class="params">(Point* p,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> area=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        area+=Cross(p[i]-p[<span class="number">0</span>],p[i+<span class="number">1</span>]-p[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> area/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        Point A,B,C,D;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;A.x&gt;&gt;A.y&gt;&gt;B.x&gt;&gt;B.y&gt;&gt;C.x&gt;&gt;C.y&gt;&gt;D.x&gt;&gt;D.y;</span><br><span class="line">        <span class="keyword">bool</span> check1=SegmentProperIntersection(A,B,C,D);</span><br><span class="line">        <span class="keyword">bool</span> check2=OnSegment(A,C,D)||OnSegment(B,C,D)||OnSegment(C,A,B)||OnSegment(D,A,B);</span><br><span class="line">        <span class="keyword">if</span>(check1||check2)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">10</span>)&lt;&lt;GetLineIntersection(A,B-A,C,D-C).x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;GetLineIntersection(A,B-A,C,D-C).y&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">// 计算几何模板</span></span><br><span class="line"><span class="comment">//二维平面</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf = <span class="number">1e20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxp = <span class="number">1010</span>;</span><br><span class="line"><span class="comment">//Compares a double to zero</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)<span class="keyword">return</span><span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//square of a double</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">sqr</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;<span class="keyword">return</span> x*x;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> _x,<span class="keyword">double</span> _y)&#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2f-%.2f\n&quot;</span>,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (Point b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn(x-b.x) == <span class="number">0</span> &amp;&amp; sgn(y-b.y) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Point b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn(x-b.x)== <span class="number">0</span>-sgn(y-b.y)?<span class="number">0</span>:x&lt;b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x-b.x,y-b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//叉积</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> ^(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.y-y*b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点积</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> *(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.x + y*b.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回长度</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">len</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hypot(x,y);<span class="comment">//库函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回长度的平方</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">len2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*x + y*y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回两点的距离</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">distance</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hypot(x-p.x,y-p.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> +(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x+b.x,y+b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> *(<span class="keyword">const</span> <span class="keyword">double</span> &amp;k)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x*k,y*k);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> /(<span class="keyword">const</span> <span class="keyword">double</span> &amp;k)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x/k,y/k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算 pa 和 pb 的夹角</span></span><br><span class="line">    <span class="comment">//就是求这个点看 a,b 所成的夹角</span></span><br><span class="line">    <span class="comment">//测试 LightOJ1203</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">rad</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line">        Point p = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="built_in">atan2</span>( <span class="built_in">fabs</span>((a-p)^(b-p)),(a-p)*(b-p) ));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//化为长度为 r 的向量</span></span><br><span class="line">    <span class="function">Point <span class="title">trunc</span><span class="params">(<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> l = len();</span><br><span class="line">        <span class="keyword">if</span>(!sgn(l))<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        r /= l;</span><br><span class="line">        <span class="keyword">return</span> Point(x*r,y*r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//逆时针旋转 90 度</span></span><br><span class="line">    <span class="function">Point <span class="title">rotleft</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(-y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//顺时针旋转 90 度</span></span><br><span class="line">    <span class="function">Point <span class="title">rotright</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(y,-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//绕着 p 点逆时针旋转 angle</span></span><br><span class="line">    <span class="function">Point <span class="title">rotate</span><span class="params">(Point p,<span class="keyword">double</span> angle)</span></span>&#123;</span><br><span class="line">        Point v = (*<span class="keyword">this</span>)-p;</span><br><span class="line">        <span class="keyword">double</span> c = <span class="built_in">cos</span>(angle), s = <span class="built_in">sin</span>(angle);</span><br><span class="line">        <span class="keyword">return</span> Point(p.x + v.x*c-v.y*s,p.y + v.x*s + v.y*c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">    Point s,e;</span><br><span class="line">    Line()&#123;&#125;</span><br><span class="line">    Line(Point _s,Point _e)&#123;</span><br><span class="line">        s = _s;</span><br><span class="line">        e = _e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> ==(Line v)&#123;</span><br><span class="line">        <span class="keyword">return</span> (s == v.s)&amp;&amp;(e == v.e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据一个点和倾斜角 angle 确定直线,0&lt;=angle&lt;pi</span></span><br><span class="line">    Line(Point p,<span class="keyword">double</span> angle)&#123;</span><br><span class="line">        s = p;</span><br><span class="line">        <span class="keyword">if</span>(sgn(angle-pi/<span class="number">2</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">            e = (s + Point(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            e = (s + Point(<span class="number">1</span>,<span class="built_in">tan</span>(angle)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ax+by+c=0</span></span><br><span class="line">    Line(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sgn(a) == <span class="number">0</span>)&#123;</span><br><span class="line">            s = Point(<span class="number">0</span>,-c/b);</span><br><span class="line">            e = Point(<span class="number">1</span>,-c/b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sgn(b) == <span class="number">0</span>)&#123;</span><br><span class="line">            s = Point(-c/a,<span class="number">0</span>);</span><br><span class="line">            e = Point(-c/a,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            s = Point(<span class="number">0</span>,-c/b);</span><br><span class="line">            e = Point(<span class="number">1</span>,(-c-a)/b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">        s.input();</span><br><span class="line">        e.input();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">adjust</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(e &lt; s)&#123;</span><br><span class="line">            swap(s,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求线段长度</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.distance(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回直线倾斜角 0&lt;=angle&lt;pi</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">angle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> k = <span class="built_in">atan2</span>(e.y-s.y,e.x-s.x);</span><br><span class="line">        <span class="keyword">if</span>(sgn(k) &lt; <span class="number">0</span>)k += pi;</span><br><span class="line">        <span class="keyword">if</span>(sgn(k-pi) == <span class="number">0</span>)k-= pi;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点和直线关系</span></span><br><span class="line">    <span class="comment">//1 在左侧</span></span><br><span class="line">    <span class="comment">//2 在右侧</span></span><br><span class="line">    <span class="comment">//3 在直线上</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relation</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = sgn((p-s)^(e-s));</span><br><span class="line">        <span class="keyword">if</span>(c &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c &gt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 点在线段上的判断</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">pointonseg</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn((p-s)^(e-s)) == <span class="number">0</span> &amp;&amp; sgn((p-s)*(p-e)) &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两向量平行 (对应直线平行或重合)</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">parallel</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn((e-s)^(v.e-v.s)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两线段相交判断</span></span><br><span class="line">    <span class="comment">//2 规范相交</span></span><br><span class="line">    <span class="comment">//1 非规范相交</span></span><br><span class="line">    <span class="comment">//0 不相交</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">segcrossseg</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d1 = sgn((e-s)^(v.s-s));</span><br><span class="line">        <span class="keyword">int</span> d2 = sgn((e-s)^(v.e-s));</span><br><span class="line">        <span class="keyword">int</span> d3 = sgn((v.e-v.s)^(s-v.s));</span><br><span class="line">        <span class="keyword">int</span> d4 = sgn((v.e-v.s)^(e-v.s));</span><br><span class="line">        <span class="keyword">if</span>( (d1^d2)==<span class="number">-2</span> &amp;&amp; (d3^d4)==<span class="number">-2</span> )<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (d1==<span class="number">0</span> &amp;&amp; sgn((v.s-s)*(v.s-e))&lt;=<span class="number">0</span>) ||</span><br><span class="line">               (d2==<span class="number">0</span> &amp;&amp; sgn((v.e-s)*(v.e-e))&lt;=<span class="number">0</span>) ||</span><br><span class="line">               (d3==<span class="number">0</span> &amp;&amp; sgn((s-v.s)*(s-v.e))&lt;=<span class="number">0</span>) ||</span><br><span class="line">               (d4==<span class="number">0</span> &amp;&amp; sgn((e-v.s)*(e-v.e))&lt;=<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//直线和线段相交判断</span></span><br><span class="line">    <span class="comment">//-*this line -v seg</span></span><br><span class="line">    <span class="comment">//2 规范相交</span></span><br><span class="line">    <span class="comment">//1 非规范相交</span></span><br><span class="line">    <span class="comment">//0 不相交</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">linecrossseg</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d1 = sgn((e-s)^(v.s-s));</span><br><span class="line">        <span class="keyword">int</span> d2 = sgn((e-s)^(v.e-s));</span><br><span class="line">        <span class="keyword">if</span>((d1^d2)==<span class="number">-2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (d1==<span class="number">0</span>||d2==<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两直线关系</span></span><br><span class="line">    <span class="comment">//0 平行</span></span><br><span class="line">    <span class="comment">//1 重合</span></span><br><span class="line">    <span class="comment">//2 相交</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">linecrossline</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((*<span class="keyword">this</span>).parallel(v))</span><br><span class="line">            <span class="keyword">return</span> v.relation(s)==<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求两直线的交点</span></span><br><span class="line">    <span class="comment">//要保证两直线不平行或重合</span></span><br><span class="line">    <span class="function">Point <span class="title">crosspoint</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> a1 = (v.e-v.s)^(s-v.s);</span><br><span class="line">        <span class="keyword">double</span> a2 = (v.e-v.s)^(e-v.s);</span><br><span class="line">        <span class="keyword">return</span> Point((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点到直线的距离</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dispointtoline</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>((p-s)^(e-s))/length();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点到线段的距离</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dispointtoseg</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sgn((p-s)*(e-s))&lt;<span class="number">0</span> || sgn((p-e)*(s-e))&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> min(p.distance(s),p.distance(e));</span><br><span class="line">        <span class="keyword">return</span> dispointtoline(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回线段到线段的距离</span></span><br><span class="line">    <span class="comment">//前提是两线段不相交，相交距离就是 0 了</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dissegtoseg</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min(min(dispointtoseg(v.s),dispointtoseg(v.e)),min(v</span><br><span class="line">                                                                          .dispointtoseg(s),v.dispointtoseg(e)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回点 p 在直线上的投影</span></span><br><span class="line">    <span class="function">Point <span class="title">lineprog</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s + ( ((e-s)*((e-s)*(p-s)))/((e-s).len2()) );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回点 p 关于直线的对称点</span></span><br><span class="line">    <span class="function">Point <span class="title">symmetrypoint</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        Point q = lineprog(p);</span><br><span class="line">        <span class="keyword">return</span> Point(<span class="number">2</span>*q.x-p.x,<span class="number">2</span>*q.y-p.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        Line a,b;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a.s.x&gt;&gt;a.s.y&gt;&gt;a.e.x&gt;&gt;a.e.y&gt;&gt;b.s.x&gt;&gt;b.s.y&gt;&gt;b.e.x&gt;&gt;b.e.y;</span><br><span class="line">        Point ans=a.crosspoint(b);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">10</span>)&lt;&lt;ans.x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans.y&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-计算几何 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CGL_2_B: Intersection</title>
      <link href="//Computing-geometry-jls/CGL-2-B-Intersection/"/>
      <url>//Computing-geometry-jls/CGL-2-B-Intersection/</url>
      
        <content type="html"><![CDATA[<h1 id="Intersection"><a href="#Intersection" class="headerlink" title="Intersection"></a>Intersection</h1><p>For given two segments <em>s</em>1 and <em>s</em>2, print “1” if they are intersect, “0” otherwise.</p><p><em>s</em>1 is formed by end points <em>p</em>0 and <em>p</em>1, and <em>s</em>2 is formed by end points <em>p</em>2 and <em>p</em>3.</p><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The entire input looks like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">q (the number of queries)</span><br><span class="line">1st query</span><br><span class="line">2nd query</span><br><span class="line">...</span><br><span class="line">qth query</span><br></pre></td></tr></table></figure><p>Each query consists of integer coordinates of end points of <em>s</em>1 and <em>s</em>2 in the following format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xp0 yp0 xp1 yp1 xp2 yp2 xp3 yp3</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each query, print “1” or “0”.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 ≤ <em>q</em> ≤ 1000</li><li>-10000 ≤ $x_{p_i},y_{p_i}$  ≤ 10000</li><li><em>p</em>0≠<em>p</em>1 and <em>p</em>2≠<em>p</em>3.</li></ul><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">0 0 3 0 1 1 2 -1</span><br><span class="line">0 0 3 0 3 1 3 -1</span><br><span class="line">0 0 3 0 3 -2 5 0</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><hr><p>Source: <a href="https://onlinejudge.u-aizu.ac.jp/problems/CGL_2_B" rel="external nofollow noreferrer">https://onlinejudge.u-aizu.ac.jp/problems/CGL_2_B</a></p><blockquote><p>判断两直线是否相交（包括不规范相交）</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> x,<span class="keyword">double</span> y):x(x),y(y)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line">Vector <span class="keyword">operator</span> + (Vector A,Vector B)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x+B.x,A.y+B.y);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> - (Vector A,Vector B)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x-B.x,A.y-B.y);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> * (Vector A,<span class="keyword">double</span> p)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x*p,A.y*p);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> / (Vector A,<span class="keyword">double</span> p)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x/p,A.y/p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x||(a.x==b.x&amp;&amp;a.y&lt;b.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">else</span> <span class="keyword">return</span> (x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> dcmp(a.x-b.x)==<span class="number">0</span> &amp;&amp; dcmp(a.y-b.y)==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Dot</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.x*B.x+A.y*B.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Length</span><span class="params">(Vector A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(Dot(A,A));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Angle</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>(Dot(A,B)/Length(A)/Length(B));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//叉积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cross</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (A.x*B.y-A.y*B.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//三角形面积的二倍的叉乘公式</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Area2</span><span class="params">(Point A,Point B,Point C)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Cross(B-A,C-A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向量旋转,rad是弧度</span></span><br><span class="line"><span class="function">Vector <span class="title">Rotate</span><span class="params">(Vector A,<span class="keyword">double</span> rad)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x*<span class="built_in">cos</span>(rad)-A.y*<span class="built_in">sin</span>(rad),A.x*<span class="built_in">sin</span>(rad)+A.y*<span class="built_in">cos</span>(rad));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算向量的单位法线,先逆时针旋转90度，然后把长度归一化</span></span><br><span class="line"><span class="function">Vector <span class="title">Normal</span><span class="params">(Vector A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> Len=Length(A);</span><br><span class="line">    <span class="keyword">return</span> Vector(-A.y/Len,A.x/Len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求两直线交点</span></span><br><span class="line"><span class="comment">//调用前请确保P+tv和Q+tw有唯一交点，当且仅当Cross(v,w)非0</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineIntersection</span><span class="params">(Point P,Vector v,Point Q,Vector w)</span></span>&#123;</span><br><span class="line">    Vector u=P-Q;</span><br><span class="line">    <span class="keyword">double</span> t=Cross(w,u)/Cross(v,w);</span><br><span class="line">    <span class="keyword">return</span> P+v*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点到直线的距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToLine</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    Vector v1=B-A,v2=P-A;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(Cross(v1,v2))/Length(v1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点到线段的距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToSegment</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A==B) <span class="keyword">return</span> Length(P-A);</span><br><span class="line">    Vector v1=B-A,v2=P-A,v3=P-B;</span><br><span class="line">    <span class="keyword">if</span>(dcmp(Dot(v1,v2))&lt;<span class="number">0</span>) <span class="keyword">return</span> Length(v2);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dcmp(Dot(v1,v3))&gt;<span class="number">0</span>) <span class="keyword">return</span> Length(v3);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">fabs</span>(Cross(v1,v2))/Length(v1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点在直线上的投影</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineProjection</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    Vector v=B-A;</span><br><span class="line">    <span class="keyword">return</span> A+v*(Dot(v,P-A)/Dot(v,v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反射</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineReflection</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GetLineProjection(P,A,B)*<span class="number">2</span>-P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断两线段严格相交</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SegmentProperIntersection</span><span class="params">(Point a1,Point a2,Point b1,Point b2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> c1=Cross(a2-a1,b1-a1), c2=Cross(a2-a1,b2-a1),</span><br><span class="line">           c3=Cross(b2-b1,a1-b1), c4=Cross(b2-b1,a2-b1);</span><br><span class="line">    <span class="keyword">return</span> dcmp(c1)*dcmp(c2)&lt;<span class="number">0</span> &amp;&amp; dcmp(c3)*dcmp(c4)&lt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断点是否在线段上</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">OnSegment</span><span class="params">(Point P,Point a1,Point a2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dcmp(Cross(a1-P,a2-P))==<span class="number">0</span> &amp;&amp; dcmp(Dot(a1-P,a2-P))&lt;=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        Point A,B,C,D;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;A.x&gt;&gt;A.y&gt;&gt;B.x&gt;&gt;B.y&gt;&gt;C.x&gt;&gt;C.y&gt;&gt;D.x&gt;&gt;D.y;</span><br><span class="line">        <span class="keyword">bool</span> ans1=SegmentProperIntersection(A,B,C,D);</span><br><span class="line">        <span class="keyword">bool</span> ans2=OnSegment(A,C,D)||OnSegment(B,C,D)||OnSegment(C,A,B)||OnSegment(D,A,B);</span><br><span class="line">        <span class="keyword">if</span>(ans1||ans2) <span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-计算几何 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CGL_2_A: Parallel/Orthogonal</title>
      <link href="//Computing-geometry-jls/CGL-2-A-Parallel-Orthogonal/"/>
      <url>//Computing-geometry-jls/CGL-2-A-Parallel-Orthogonal/</url>
      
        <content type="html"><![CDATA[<h1 id="Parallel-Orthogonal"><a href="#Parallel-Orthogonal" class="headerlink" title="Parallel/Orthogonal"></a>Parallel/Orthogonal</h1><p>For given two lines <em>s</em>1 and <em>s</em>2, print “2” if they are parallel, “1” if they are orthogonal, or “0” otherwise.</p><p><em>s</em>1 crosses points <em>p</em>0 and <em>p</em>1, and <em>s</em>2 crosses points <em>p</em>2 and <em>p</em>3.</p><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The entire input looks like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">q (the number of queries)</span><br><span class="line">1st query</span><br><span class="line">2nd query</span><br><span class="line">...</span><br><span class="line">qth query</span><br></pre></td></tr></table></figure><p>Each query consists of integer coordinates of the points <em>p</em>0, <em>p</em>1, <em>p</em>2, <em>p</em>3 in the following format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xp0 yp0 xp1 yp1 xp2 yp2 xp3 yp3</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each query, print “2”, “1” or “0”.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 ≤ <em>q</em> ≤ 1000</li><li>-10000 ≤ $x_{p_i},y_{p_i}$ ≤ 10000</li><li><em>p</em>0≠<em>p</em>1 and <em>p</em>2≠<em>p</em>3.</li></ul><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">0 0 3 0 0 2 3 2</span><br><span class="line">0 0 3 0 1 1 1 4</span><br><span class="line">0 0 3 0 1 1 2 2</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><hr><p>Source: <a href="https://onlinejudge.u-aizu.ac.jp/problems/CGL_2_A" rel="external nofollow noreferrer">https://onlinejudge.u-aizu.ac.jp/problems/CGL_2_A</a></p><blockquote><p>判断两个直线，判断平行，垂直还是相交</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> x,<span class="keyword">double</span> y):x(x),y(y)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line">Vector <span class="keyword">operator</span> + (Vector A,Vector B)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x+B.x,A.y+B.y);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> - (Vector A,Vector B)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x-B.x,A.y-B.y);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> * (Vector A,<span class="keyword">double</span> p)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x*p,A.y*p);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> / (Vector A,<span class="keyword">double</span> p)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x/p,A.y/p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x||(a.x==b.x&amp;&amp;a.y&lt;b.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">else</span> <span class="keyword">return</span> (x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> dcmp(a.x-b.x)==<span class="number">0</span> &amp;&amp; dcmp(a.y-b.y)==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Dot</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.x*B.x+A.y*B.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Length</span><span class="params">(Vector A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(Dot(A,A));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Angle</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>(Dot(A,B)/Length(A)/Length(B));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//叉积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cross</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (A.x*B.y-A.y*B.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//三角形面积的二倍的叉乘公式</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Area2</span><span class="params">(Point A,Point B,Point C)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Cross(B-A,C-A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向量旋转,rad是弧度</span></span><br><span class="line"><span class="function">Vector <span class="title">Rotate</span><span class="params">(Vector A,<span class="keyword">double</span> rad)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x*<span class="built_in">cos</span>(rad)-A.y*<span class="built_in">sin</span>(rad),A.x*<span class="built_in">sin</span>(rad)+A.y*<span class="built_in">cos</span>(rad));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算向量的单位法线,先逆时针旋转90度，然后把长度归一化</span></span><br><span class="line"><span class="function">Vector <span class="title">Normal</span><span class="params">(Vector A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> Len=Length(A);</span><br><span class="line">    <span class="keyword">return</span> Vector(-A.y/Len,A.x/Len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求两直线交点</span></span><br><span class="line"><span class="comment">//调用前请确保P+tv和Q+tw有唯一交点，当且仅当Cross(v,w)非0</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineIntersection</span><span class="params">(Point P,Vector v,Point Q,Vector w)</span></span>&#123;</span><br><span class="line">    Vector u=P-Q;</span><br><span class="line">    <span class="keyword">double</span> t=Cross(w,u)/Cross(v,w);</span><br><span class="line">    <span class="keyword">return</span> P+v*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点到直线的距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToLine</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    Vector v1=B-A,v2=P-A;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(Cross(v1,v2))/Length(v1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点到线段的距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToSegment</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A==B) <span class="keyword">return</span> Length(P-A);</span><br><span class="line">    Vector v1=B-A,v2=P-A,v3=P-B;</span><br><span class="line">    <span class="keyword">if</span>(dcmp(Dot(v1,v2))&lt;<span class="number">0</span>) <span class="keyword">return</span> Length(v2);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dcmp(Dot(v1,v3))&gt;<span class="number">0</span>) <span class="keyword">return</span> Length(v3);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">fabs</span>(Cross(v1,v2))/Length(v1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点在直线上的投影</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineProjection</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    Vector v=B-A;</span><br><span class="line">    <span class="keyword">return</span> A+v*(Dot(v,P-A)/Dot(v,v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point <span class="title">GetLineReflection</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GetLineProjection(P,A,B)*<span class="number">2</span>-P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        Point A,B,C,D;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;A.x&gt;&gt;A.y&gt;&gt;B.x&gt;&gt;B.y&gt;&gt;C.x&gt;&gt;C.y&gt;&gt;D.x&gt;&gt;D.y;</span><br><span class="line">        <span class="keyword">double</span> cross=Cross(B-A,D-C);</span><br><span class="line">        <span class="keyword">double</span> dot=Dot(B-A,D-C);</span><br><span class="line">        <span class="keyword">if</span>(dcmp(dot)==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dcmp(cross)==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-计算几何 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CGL_1_C: Counter-Clockwise</title>
      <link href="//Computing-geometry-jls/CGL-1-C-Counter-Clockwise/"/>
      <url>//Computing-geometry-jls/CGL-1-C-Counter-Clockwise/</url>
      
        <content type="html"><![CDATA[<h1 id="Counter-Clockwise"><a href="#Counter-Clockwise" class="headerlink" title="Counter-Clockwise"></a>Counter-Clockwise</h1><img data-src="/images/acm/2019/CGL_1_C.png" /><a id="more"></a><p>For given three points <em>p</em>0,<em>p</em>1,<em>p</em>2, print</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COUNTER_CLOCKWISE</span><br></pre></td></tr></table></figure><p>if <em>p</em>0,<em>p</em>1,<em>p</em>2 make a counterclockwise turn (1),</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLOCKWISE</span><br></pre></td></tr></table></figure><p>if <em>p</em>0,<em>p</em>1,<em>p</em>2 make a clockwise turn (2),</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ONLINE_BACK</span><br></pre></td></tr></table></figure><p>if <em>p</em>2 is on a line <em>p</em>2,<em>p</em>0,<em>p</em>1 in this order (3),</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ONLINE_FRONT</span><br></pre></td></tr></table></figure><p>if <em>p</em>2 is on a line <em>p</em>0,<em>p</em>1,<em>p</em>2 in this order (4),</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ON_SEGMENT</span><br></pre></td></tr></table></figure><p>if <em>p</em>2 is on a segment <em>p</em>0<em>p</em>1 (5).</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xp0 yp0 xp1 yp1</span><br><span class="line">q</span><br><span class="line">xp20 yp20</span><br><span class="line">xp21 yp21</span><br><span class="line">...</span><br><span class="line">xp2q−1 yp2q−1</span><br></pre></td></tr></table></figure><p>In the first line, integer coordinates of <em>p</em>0 and <em>p</em>1 are given. Then, <em>q</em> queries are given for integer coordinates of <em>p</em>2.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each query, print the above mentioned status.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1≤<em>q</em>≤1000</li><li>−10000≤<em>xi</em>,<em>yi</em>≤10000</li><li><em>p</em>0 and <em>p</em>1 are not identical.</li></ul><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 0 2 0</span><br><span class="line">2</span><br><span class="line">-1 1</span><br><span class="line">-1 -1</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COUNTER_CLOCKWISE</span><br><span class="line">CLOCKWISE</span><br></pre></td></tr></table></figure><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 0 2 0</span><br><span class="line">3</span><br><span class="line">-1 0</span><br><span class="line">0 0</span><br><span class="line">3 0</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ONLINE_BACK</span><br><span class="line">ON_SEGMENT</span><br><span class="line">ONLINE_FRONT</span><br></pre></td></tr></table></figure><hr><p>Source: <a href="https://onlinejudge.u-aizu.ac.jp/problems/CGL_1_C" rel="external nofollow noreferrer">https://onlinejudge.u-aizu.ac.jp/problems/CGL_1_C</a></p><blockquote><p>就是判断三个点的位置关系，用叉积和点积就够了。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> x,<span class="keyword">double</span> y):x(x),y(y)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line">Vector <span class="keyword">operator</span> + (Vector A,Vector B)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x+B.x,A.y+B.y);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> - (Vector A,Vector B)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x-B.x,A.y-B.y);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> * (Vector A,<span class="keyword">double</span> p)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x*p,A.y*p);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> / (Vector A,<span class="keyword">double</span> p)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x/p,A.y/p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x||(a.x==b.x&amp;&amp;a.y&lt;b.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">else</span> <span class="keyword">return</span> (x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> dcmp(a.x-b.x)==<span class="number">0</span> &amp;&amp; dcmp(a.y-b.y)==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Dot</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.x*B.x+A.y*B.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Length</span><span class="params">(Vector A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(Dot(A,A));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Angle</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>(Dot(A,B)/Length(A)/Length(B));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//叉积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cross</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (A.x*B.y-A.y*B.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//三角形面积的二倍的叉乘公式</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Area2</span><span class="params">(Point A,Point B,Point C)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Cross(B-A,C-A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向量旋转,rad是弧度</span></span><br><span class="line"><span class="function">Vector <span class="title">Rotate</span><span class="params">(Vector A,<span class="keyword">double</span> rad)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x*<span class="built_in">cos</span>(rad)-A.y*<span class="built_in">sin</span>(rad),A.x*<span class="built_in">sin</span>(rad)+A.y*<span class="built_in">cos</span>(rad));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算向量的单位法线,先逆时针旋转90度，然后把长度归一化</span></span><br><span class="line"><span class="function">Vector <span class="title">Normal</span><span class="params">(Vector A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> Len=Length(A);</span><br><span class="line">    <span class="keyword">return</span> Vector(-A.y/Len,A.x/Len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求两直线交点</span></span><br><span class="line"><span class="comment">//调用前请确保P+tv和Q+tw有唯一交点，当且仅当Cross(v,w)非0</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineIntersection</span><span class="params">(Point P,Vector v,Point Q,Vector w)</span></span>&#123;</span><br><span class="line">    Vector u=P-Q;</span><br><span class="line">    <span class="keyword">double</span> t=Cross(w,u)/Cross(v,w);</span><br><span class="line">    <span class="keyword">return</span> P+v*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点到直线的距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToLine</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    Vector v1=B-A,v2=P-A;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(Cross(v1,v2))/Length(v1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点到线段的距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToSegment</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A==B) <span class="keyword">return</span> Length(P-A);</span><br><span class="line">    Vector v1=B-A,v2=P-A,v3=P-B;</span><br><span class="line">    <span class="keyword">if</span>(dcmp(Dot(v1,v2))&lt;<span class="number">0</span>) <span class="keyword">return</span> Length(v2);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dcmp(Dot(v1,v3))&gt;<span class="number">0</span>) <span class="keyword">return</span> Length(v3);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">fabs</span>(Cross(v1,v2))/Length(v1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点在直线上的投影</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineProjection</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    Vector v=B-A;</span><br><span class="line">    <span class="keyword">return</span> A+v*(Dot(v,P-A)/Dot(v,v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point <span class="title">GetLineReflection</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GetLineProjection(P,A,B)*<span class="number">2</span>-P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Point A,B;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;A.x&gt;&gt;A.y&gt;&gt;B.x&gt;&gt;B.y;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        Point P;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;P.x&gt;&gt;P.y;</span><br><span class="line">        <span class="keyword">double</span> cro=Cross(B-A,P-A);</span><br><span class="line">        <span class="keyword">double</span> dot=Dot(B-A,P-A);</span><br><span class="line">        <span class="keyword">double</span> dot2=Dot(A-B,P-B);</span><br><span class="line">        <span class="keyword">if</span>(dcmp(cro)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;CLOCKWISE&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dcmp(cro)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;COUNTER_CLOCKWISE&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(dcmp(dot)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;ONLINE_BACK&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(dcmp(dot2)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;ONLINE_FRONT&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;ON_SEGMENT&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-计算几何 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CGL_1_B: Reflection</title>
      <link href="//Computing-geometry-jls/CGL-1-B-Reflection/"/>
      <url>//Computing-geometry-jls/CGL-1-B-Reflection/</url>
      
        <content type="html"><![CDATA[<h1 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h1><p>For given three points <em>p</em>1,<em>p</em>2,<em>p</em>, find the reflection point <em>x</em> of <em>p</em> onto <em>p</em>1<em>p</em>2.</p><img data-src="/images/acm/2019/CGL_1_B.png" /><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xp1 yp1 xp2 yp2</span><br><span class="line">q</span><br><span class="line">xp0 yp0</span><br><span class="line">xp1 yp1</span><br><span class="line">...</span><br><span class="line">xpq−1 ypq−1</span><br></pre></td></tr></table></figure><p>In the first line, integer coordinates of <em>p</em>1 and <em>p</em>2 are given. Then, <em>q</em> queries are given for integer coordinates of <em>p</em>.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each query, print the coordinate of the reflection point <em>x</em>. The output values should be in a decimal fraction with an error less than 0.00000001.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1≤<em>q</em>≤1000</li><li>−10000≤<em>xi</em>,<em>yi</em>≤10000</li><li><em>p</em>1 and <em>p</em>2 are not identical.</li></ul><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 0 2 0</span><br><span class="line">3</span><br><span class="line">-1 1</span><br><span class="line">0 1</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-1.0000000000 -1.0000000000</span><br><span class="line">0.0000000000 -1.0000000000</span><br><span class="line">1.0000000000 -1.0000000000</span><br></pre></td></tr></table></figure><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 0 3 4</span><br><span class="line">3</span><br><span class="line">2 5</span><br><span class="line">1 4</span><br><span class="line">0 3</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4.2400000000 3.3200000000</span><br><span class="line">3.5600000000 2.0800000000</span><br><span class="line">2.8800000000 0.8400000000</span><br></pre></td></tr></table></figure><hr><p>Source: <a href="https://onlinejudge.u-aizu.ac.jp/problems/CGL_1_B" rel="external nofollow noreferrer">https://onlinejudge.u-aizu.ac.jp/problems/CGL_1_B</a></p><blockquote><p>计算几何模版题，求一个点关于直线的反射点。</p></blockquote><ul><li><p>就是先求出这个点在直线上的投影点$\vec {o}$</p></li><li><p>那么可得$c$点关于直线$AB$的反射(对称)点$\grave c$可以用下式求出。</p><ul><li>$\vec {\grave c}=2\vec o- \vec c$</li></ul></li><li><p>上式画平行四边形的图可以很显然的看出来。</p></li></ul><p><img data-src="/images/acm/2019/CGL-1-B-Reflection.jpg" alt="image-20190727145736384"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> x,<span class="keyword">double</span> y):x(x),y(y)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line">Vector <span class="keyword">operator</span> + (Vector A,Vector B)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x+B.x,A.y+B.y);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> - (Vector A,Vector B)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x-B.x,A.y-B.y);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> * (Vector A,<span class="keyword">double</span> p)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x*p,A.y*p);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> / (Vector A,<span class="keyword">double</span> p)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x/p,A.y/p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x||(a.x==b.x&amp;&amp;a.y&lt;b.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">else</span> <span class="keyword">return</span> (x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> dcmp(a.x-b.x)==<span class="number">0</span> &amp;&amp; dcmp(a.y-b.y)==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Dot</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.x*B.x+A.y*B.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Length</span><span class="params">(Vector A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(Dot(A,A));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Angle</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>(Dot(A,B)/Length(A)/Length(B));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//叉积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cross</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (A.x*B.y-A.y*B.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//三角形面积的二倍的叉乘公式</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Area2</span><span class="params">(Point A,Point B,Point C)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Cross(B-A,C-A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向量旋转,rad是弧度</span></span><br><span class="line"><span class="function">Vector <span class="title">Rotate</span><span class="params">(Vector A,<span class="keyword">double</span> rad)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x*<span class="built_in">cos</span>(rad)-A.y*<span class="built_in">sin</span>(rad),A.x*<span class="built_in">sin</span>(rad)+A.y*<span class="built_in">cos</span>(rad));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算向量的单位法线,先逆时针旋转90度，然后把长度归一化</span></span><br><span class="line"><span class="function">Vector <span class="title">Normal</span><span class="params">(Vector A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> Len=Length(A);</span><br><span class="line">    <span class="keyword">return</span> Vector(-A.y/Len,A.x/Len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求两直线交点</span></span><br><span class="line"><span class="comment">//调用前请确保P+tv和Q+tw有唯一交点，当且仅当Cross(v,w)非0</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineIntersection</span><span class="params">(Point P,Vector v,Point Q,Vector w)</span></span>&#123;</span><br><span class="line">    Vector u=P-Q;</span><br><span class="line">    <span class="keyword">double</span> t=Cross(w,u)/Cross(v,w);</span><br><span class="line">    <span class="keyword">return</span> P+v*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点到直线的距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToLine</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    Vector v1=B-A,v2=P-A;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(Cross(v1,v2))/Length(v1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点到线段的距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToSegment</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A==B) <span class="keyword">return</span> Length(P-A);</span><br><span class="line">    Vector v1=B-A,v2=P-A,v3=P-B;</span><br><span class="line">    <span class="keyword">if</span>(dcmp(Dot(v1,v2))&lt;<span class="number">0</span>) <span class="keyword">return</span> Length(v2);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dcmp(Dot(v1,v3))&gt;<span class="number">0</span>) <span class="keyword">return</span> Length(v3);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">fabs</span>(Cross(v1,v2))/Length(v1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点在直线上的投影</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineProjection</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    Vector v=B-A;</span><br><span class="line">    <span class="keyword">return</span> A+v*(Dot(v,P-A)/Dot(v,v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point <span class="title">GetLineReflection</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GetLineProjection(P,A,B)*<span class="number">2</span>-P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Point A,B;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;A.x&gt;&gt;A.y&gt;&gt;B.x&gt;&gt;B.y;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        Point P;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;P.x&gt;&gt;P.y;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">10</span>)&lt;&lt;GetLineReflection(P,A,B).x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;GetLineReflection(P,A,B).y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-计算几何 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CGL_1_A: Projection</title>
      <link href="//Computing-geometry-jls/CGL-1-A-Projection/"/>
      <url>//Computing-geometry-jls/CGL-1-A-Projection/</url>
      
        <content type="html"><![CDATA[<h1 id="Projection"><a href="#Projection" class="headerlink" title="Projection"></a>Projection</h1><p>For given three points <em>p</em>1,<em>p</em>2,<em>p</em>, find the projection point <em>x</em> of <em>p</em> onto <em>p</em>1<em>p</em>2.</p><img data-src="/images/acm/2019/CGL_1_A.png" /><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xp1 yp1 xp2 yp2</span><br><span class="line">q</span><br><span class="line">xp0 yp0</span><br><span class="line">xp1 yp1</span><br><span class="line">...</span><br><span class="line">xpq−1 ypq−1</span><br></pre></td></tr></table></figure><p>In the first line, integer coordinates of <em>p</em>1 and <em>p</em>2 are given. Then, <em>q</em> queries are given for integer coordinates of <em>p</em>.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each query, print the coordinate of the projection point <em>x</em>. The output values should be in a decimal fraction with an error less than 0.00000001.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1≤<em>q</em>≤1000</li><li>−10000≤xi,yi≤10000</li><li><em>p</em>1 and <em>p</em>2 are not identical.</li></ul><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 0 2 0</span><br><span class="line">3</span><br><span class="line">-1 1</span><br><span class="line">0 1</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-1.0000000000 0.0000000000</span><br><span class="line">0.0000000000 0.0000000000</span><br><span class="line">1.0000000000 0.0000000000</span><br></pre></td></tr></table></figure><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 0 3 4</span><br><span class="line">1</span><br><span class="line">2 5</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.1200000000 4.1600000000</span><br></pre></td></tr></table></figure><hr><p>Source: <a href="https://onlinejudge.u-aizu.ac.jp/problems/CGL_1_A" rel="external nofollow noreferrer">https://onlinejudge.u-aizu.ac.jp/problems/CGL_1_A</a></p><blockquote><p>计算几何模版题，求一个点在一个直线上的投影。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> x,<span class="keyword">double</span> y):x(x),y(y)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line">Vector <span class="keyword">operator</span> + (Vector A,Vector B)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x+B.x,A.y+B.y);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> - (Vector A,Vector B)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x-B.x,A.y-B.y);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> * (Vector A,<span class="keyword">double</span> p)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x*p,A.y*p);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> / (Vector A,<span class="keyword">double</span> p)&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x/p,A.y/p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x||(a.x==b.x&amp;&amp;a.y&lt;b.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">else</span> <span class="keyword">return</span> (x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> dcmp(a.x-b.x)==<span class="number">0</span> &amp;&amp; dcmp(a.y-b.y)==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Dot</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.x*B.x+A.y*B.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Length</span><span class="params">(Vector A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(Dot(A,A));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Angle</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>(Dot(A,B)/Length(A)/Length(B));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//叉积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cross</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (A.x*B.y-A.y*B.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//三角形面积的二倍的叉乘公式</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Area2</span><span class="params">(Point A,Point B,Point C)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Cross(B-A,C-A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向量旋转,rad是弧度</span></span><br><span class="line"><span class="function">Vector <span class="title">Rotate</span><span class="params">(Vector A,<span class="keyword">double</span> rad)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x*<span class="built_in">cos</span>(rad)-A.y*<span class="built_in">sin</span>(rad),A.x*<span class="built_in">sin</span>(rad)+A.y*<span class="built_in">cos</span>(rad));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算向量的单位法线,先逆时针旋转90度，然后把长度归一化</span></span><br><span class="line"><span class="function">Vector <span class="title">Normal</span><span class="params">(Vector A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> Len=Length(A);</span><br><span class="line">    <span class="keyword">return</span> Vector(-A.y/Len,A.x/Len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求两直线交点</span></span><br><span class="line"><span class="comment">//调用前请确保P+tv和Q+tw有唯一交点，当且仅当Cross(v,w)非0</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineIntersection</span><span class="params">(Point P,Vector v,Point Q,Vector w)</span></span>&#123;</span><br><span class="line">    Vector u=P-Q;</span><br><span class="line">    <span class="keyword">double</span> t=Cross(w,u)/Cross(v,w);</span><br><span class="line">    <span class="keyword">return</span> P+v*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点到直线的距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToLine</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    Vector v1=B-A,v2=P-A;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(Cross(v1,v2))/Length(v1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点到线段的距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToSegment</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A==B) <span class="keyword">return</span> Length(P-A);</span><br><span class="line">    Vector v1=B-A,v2=P-A,v3=P-B;</span><br><span class="line">    <span class="keyword">if</span>(dcmp(Dot(v1,v2))&lt;<span class="number">0</span>) <span class="keyword">return</span> Length(v2);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dcmp(Dot(v1,v3))&gt;<span class="number">0</span>) <span class="keyword">return</span> Length(v3);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">fabs</span>(Cross(v1,v2))/Length(v1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点在直线上的投影</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineProjection</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">    Vector v=B-A;</span><br><span class="line">    <span class="keyword">return</span> A+v*(Dot(v,P-A)/Dot(v,v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Point A,B;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;A.x&gt;&gt;A.y&gt;&gt;B.x&gt;&gt;B.y;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        Point P;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;P.x&gt;&gt;P.y;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">10</span>)&lt;&lt;GetLineProjection(P,A,B).x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;GetLineProjection(P,A,B).y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-计算几何 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA-11729 Commando War </title>
      <link href="//BlueBook-liurujia/UVA-11729-Commando-War/"/>
      <url>//BlueBook-liurujia/UVA-11729-Commando-War/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">people</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> B,J;</span><br><span class="line">    people()&#123;&#125;</span><br><span class="line">    people(<span class="keyword">int</span> B,<span class="keyword">int</span> J):B(B),J(J)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> people&amp; x)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> J&gt;x.J;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,b,j,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n),n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;b,&amp;j);</span><br><span class="line">            p[i]=people(b,j);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(p,p+n);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>,cur=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            cur+=p[i].B;</span><br><span class="line">            ans=max(ans,p[i].J+cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case %d: %lld\n&quot;</span>,++cnt,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-基本算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 蓝书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA-11292 Dragon of Loowater</title>
      <link href="//BlueBook-liurujia/UVA-11292-Dragon-of-Loowater/"/>
      <url>//BlueBook-liurujia/UVA-11292-Dragon-of-Loowater/</url>
      
        <content type="html"><![CDATA[<p><img data-src="/images/acm/2019/UVA-11292.jpg"></p><p>就是贪心思想一怼。</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m)!=EOF&amp;&amp;n&amp;&amp;m)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b[i]);</span><br><span class="line">        sort(a,a+n);</span><br><span class="line">        sort(b,b+m);</span><br><span class="line">        <span class="keyword">int</span> idx_a=<span class="number">0</span>,idx_b=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(idx_a&lt;n&amp;&amp;idx_b&lt;m)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[idx_a]&lt;=b[idx_b])&#123;</span><br><span class="line">                ans+=b[idx_b];</span><br><span class="line">                idx_a++;</span><br><span class="line">                idx_b++;</span><br><span class="line">            &#125;<span class="keyword">else</span> idx_b++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(idx_a==n) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Loowater is doomed!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-基本算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 蓝书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU-2492 Ping pong</title>
      <link href="//AC-everyday/HDU-2492-Ping-pong/"/>
      <url>//AC-everyday/HDU-2492-Ping-pong/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-2492" rel="external nofollow noreferrer">题目链接</a></p><p><strong>思路</strong>：</p><p>​    本题的关键就是求第i个点的左边和右边有多少个小于i点的等级的点，分别用min_l[]和min_r[]来存储。<br>等级范围是$1\le a_i \le 10^5$，所以我们在对a[]数组正向遍历时直接用BIT[]数组存储某个等级的是否出现过，出现过的标记为1，否则为0，这样这个题就变成了一个区间求和的问题。<br>既然是区间求和问题，那么用二叉索引树(树状数组，BIT)和线段树都可以解决。</p><a id="more"></a><p><strong>树状数组解</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_a=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_N=<span class="number">2e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">int</span> a[max_N];</span><br><span class="line"><span class="keyword">int</span> BIT[max_a];</span><br><span class="line"><span class="keyword">int</span> min_l[max_N];</span><br><span class="line"><span class="keyword">int</span> min_r[max_N];</span><br><span class="line"><span class="function">LL <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=max_a)&#123;</span><br><span class="line">        BIT[x]+=d;</span><br><span class="line">        x+=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    LL ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        ret+=BIT[x];</span><br><span class="line">        x-=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T,N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(BIT,<span class="number">0</span>,<span class="keyword">sizeof</span> BIT);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">            min_l[i]=sum(a[i]<span class="number">-1</span>);</span><br><span class="line">            add(a[i],<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(BIT,<span class="number">0</span>,<span class="keyword">sizeof</span> BIT);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=N;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            min_r[i]=sum(a[i]<span class="number">-1</span>);</span><br><span class="line">            add(a[i],<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        LL ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++)&#123;</span><br><span class="line">            ans+=(min_l[i]*(N-i-min_r[i])+(i-min_l[i]<span class="number">-1</span>)*min_r[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>线段树解</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc (o&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc ((o&lt;&lt;1)|1)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> C[maxm&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> min_l[maxn];</span><br><span class="line"><span class="keyword">int</span> min_r[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    C[o]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L==R) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=L+((R-L)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    Build(lc,L,mid);</span><br><span class="line">    Build(rc,mid+<span class="number">1</span>,R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L==R)&#123;</span><br><span class="line">        C[o]++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=L+((R-L)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) Update(lc,L,mid,x);</span><br><span class="line">    <span class="keyword">else</span> Update(rc,mid+<span class="number">1</span>,R,x);</span><br><span class="line">    C[o]=C[lc]+C[rc];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=L &amp;&amp; qr&gt;=R) <span class="keyword">return</span> C[o];</span><br><span class="line">    <span class="keyword">int</span> mid=L+((R-L)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid) ret+=Query(lc,L,mid,ql,qr);<span class="comment">//ql&lt;=mid</span></span><br><span class="line">    <span class="keyword">if</span>(qr&gt;mid) ret+=Query(rc,mid+<span class="number">1</span>,R,ql,qr);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T,N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        Build(<span class="number">1</span>,<span class="number">1</span>,maxm);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line">            min_l[i]=Query(<span class="number">1</span>,<span class="number">1</span>,maxm,<span class="number">1</span>,a[i]);</span><br><span class="line">            Update(<span class="number">1</span>,<span class="number">1</span>,maxm,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Build(<span class="number">1</span>,<span class="number">1</span>,maxm);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=N;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            min_r[i]=Query(<span class="number">1</span>,<span class="number">1</span>,maxm,<span class="number">1</span>,a[i]);</span><br><span class="line">            Update(<span class="number">1</span>,<span class="number">1</span>,maxm,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        LL ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++)&#123;</span><br><span class="line">            ans+=(LL)(min_l[i]*(N-i-min_r[i])+(LL)(i-min_l[i]<span class="number">-1</span>)*min_r[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考了</p><p><a href="https://blog.csdn.net/zhouchenghao123/article/details/84344499" rel="external nofollow noreferrer">https://blog.csdn.net/zhouchenghao123/article/details/84344499</a></p><p><a href="https://blog.csdn.net/SCNU_Jiechao/article/details/8469470" rel="external nofollow noreferrer">https://blog.csdn.net/SCNU_Jiechao/article/details/8469470</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ACM-数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 Multi-University Training Contest 2</title>
      <link href="//AC-everyday/2019-Multi-University-Training-Contest-2/"/>
      <url>//AC-everyday/2019-Multi-University-Training-Contest-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>hdu-6600 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=6600" rel="external nofollow noreferrer">Just Skip The Problem</a></p></blockquote><p><strong>题意</strong>：</p><p>​    这题从比赛开始到比赛结束就没理解对。。。读错题了。 </p><p>就是给你一个数字x，但是你不知道数字x是多少，你需要去通过询问来获得关于x的信息，求最小询问次数的情况下，有<font color="red">多少种方案。</font></p><ul><li>你知道x的二进制形式有n位。</li><li>对于每次询问你可以给出一个0到x之间的整数y，并询问到<code>x&amp;y==y</code>吗。</li></ul><p><strong>题解</strong>：</p><p>​    因为询问次数最少，所以只需要判断二进制的每一位就行了，y可以取1&lt;&lt;0,1&lt;&lt;1,1&lt;&lt;2…..,1&lt;&lt;(n-1)。所以方案数为n!，因为答案对$10^6+3$取模，所以当$n \geq 10^6+3$时，方案数为0</p><a id="more"></a><p><font color="orange">So the question is really simple.</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e6</span>+<span class="number">3</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n))&#123;</span><br><span class="line">        LL ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;=mod) <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                ans*=i;</span><br><span class="line">                ans%=mod;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>hdu-6601<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6601" rel="external nofollow noreferrer">Keen On Everything But Triangle</a></p></blockquote><p><strong>题意加分析</strong>：</p><p>​    就是给你n根长度分别为$a_1,a_2,…,a_N(1 \leq a_i \leq 10^9,N \leq 10^5)$的棍子，然后每次询问一个区间$l_i$ 到 $r_i$$1\leq l_i,r_i \leq N$，询问$Q(Q\leq 10^5)$次，问你区间l到r中的棍子可以组成的三角形的最大周长。首先可以知道西面几点：</p><ul><li>求组成的三角形最大周长肯定从最大的三个数依次往小的找，知道找到可以组成三角形的三个棍子。</li><li>根据斐波那契数列，至多45根1e9范围内的数字就可以组成一个三角形(最坏情况下是1,1,2,3,5,,,,第45项就超过1e9了)，所以线段树区间维护46个最大值就可以了。</li></ul><blockquote><p>也可以直接用主席树来维护区间，主席树求区间第K大时间复杂度为$O(logn)$，不过主席树的常数比上面线段树维护40多个数要大，所以如果想更快就自己写个线段树。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 Multi-University Training Contest 1</title>
      <link href="//AC-everyday/2019-Multi-University-Training-Contest-1/"/>
      <url>//AC-everyday/2019-Multi-University-Training-Contest-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Problem-D-Vacation"><a href="#Problem-D-Vacation" class="headerlink" title="Problem D.Vacation"></a>Problem D.Vacation</h2><p> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=6581" rel="external nofollow noreferrer">地址</a></p><p><strong>题意</strong>：</p><p>​    n+1辆车，每辆车有个位置$s[i]$，长度$l[i]$和速度$v[i]$，求第一辆车到达终点的时间。<br>有几点比较重要：</p><ul><li>首先题面说了道路狭窄，一次只能通过一辆车，也就是不能超车，即使你速度快的飞起。</li><li>还有就是一辆车到了$stop-line$以后还是以同样的速度行驶。</li></ul><p><strong>题解</strong>：</p><p>​    <font color="red">因为前面车的速度不受后面车的影响，那么我们就分别求从1到n+1​车前面没车的时间，那么1车最终的时间肯定是这n+1个时间重最大的那个时间。</font></p><a id="more"></a><p><strong>代码如下</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> l[maxn],s[maxn],v[maxn],suml[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;l[i]),suml[i]=suml[i<span class="number">-1</span>]+l[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v[i]);</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++) ans=max(ans,(s[i]+suml[i]-l[<span class="number">1</span>])/v[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.10f\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Problem-E-Path"><a href="#Problem-E-Path" class="headerlink" title="Problem E. Path"></a>Problem E. Path</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6582" rel="external nofollow noreferrer">地址</a></p><p><strong>题意：</strong></p><p>​    就是有一个n个节点，m条边的图，让你删去一些边使得从1到n的最短路变长。</p><p><strong>题解：</strong></p><p>​    刚开始看这题时就是先求的最短路，然后枚举每个最短路，求这些最短路的最短边的和，显然，肯定是超时。</p><p>​    比完赛知道了原来有最小割(最大流)这个东西，最小割可以这样理解：比如在一堆水管网络(这些水管的尺寸不同，也就是capacity容量不同)中，从起点到终点最大可以通过的水量。前面这句话可能不严谨，但是道理就是这样的。</p><p>于是我先用$Dijkstra$求出了最短路，<font color="red">然后根据公式</font>$dist[u]+dis[u][v]==dis[v]$，<font color="red">也就是用最短路算法求出来的dist数组和各个边的长度来判断这个边是否在最短路径上。</font>如果在最短路径上就把这个边加到新图中，然后用刘汝佳书上的<code>dinik</code>模版算一下最大流。</p><p><strong>代码如下：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    LL from,to,cap,flow;</span><br><span class="line">    edge()&#123;&#125;</span><br><span class="line">    edge(LL from,LL to,LL cap,LL flow):from(from),to(to),cap(cap),flow(flow)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dinic</span>&#123;</span></span><br><span class="line">    LL n,m,s,t;</span><br><span class="line">    <span class="built_in">vector</span>&lt;edge&gt; edges;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; G[maxn];</span><br><span class="line">    <span class="keyword">bool</span> vis[maxn];</span><br><span class="line">    LL cur[maxn];</span><br><span class="line">    LL d[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(LL from,LL to,LL cap)</span></span>&#123;</span><br><span class="line">        edges.push_back(edge(from,to,cap,<span class="number">0</span>));</span><br><span class="line">        edges.push_back(edge(to,from,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        m=edges.size();</span><br><span class="line">        G[from].push_back(m<span class="number">-2</span>);</span><br><span class="line">        G[to].push_back(m<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        Q.push(s);</span><br><span class="line">        d[s]=<span class="number">0</span>;</span><br><span class="line">        vis[s]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line">            LL x=Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">for</span>(LL i=<span class="number">0</span>;i&lt;G[x].size();i++)&#123;</span><br><span class="line">                edge &amp;e=edges[G[x][i]];</span><br><span class="line">                <span class="keyword">if</span>(!vis[e.to]&amp;&amp;e.cap&gt;e.flow)&#123;</span><br><span class="line">                    vis[e.to]=<span class="number">1</span>;</span><br><span class="line">                    d[e.to]=d[x]+<span class="number">1</span>;</span><br><span class="line">                    Q.push(e.to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vis[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">dfs</span><span class="params">(LL x,LL a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==t||a==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">        LL flow=<span class="number">0</span>;</span><br><span class="line">        LL f;</span><br><span class="line">        <span class="keyword">for</span>(LL &amp;i=cur[x];i&lt;G[x].size();i++)&#123;</span><br><span class="line">            edge &amp;e=edges[G[x][i]];</span><br><span class="line">            <span class="keyword">if</span>((d[e.to]==d[x]+<span class="number">1</span>)&amp;&amp;(f=dfs(e.to,min(e.cap-e.flow,a)))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                e.flow+=f;</span><br><span class="line">                edges[G[x][i]^<span class="number">1</span>].flow-=f;</span><br><span class="line">                flow+=f;</span><br><span class="line">                a-=f;</span><br><span class="line">                <span class="keyword">if</span>(a==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LL <span class="title">maxflow</span><span class="params">(LL a,LL b)</span></span>&#123;</span><br><span class="line">        s=a;t=b;</span><br><span class="line">        LL flow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(bfs())&#123;</span><br><span class="line">            <span class="built_in">memset</span>(cur,<span class="number">0</span>,<span class="keyword">sizeof</span>(cur));</span><br><span class="line">            flow+=dfs(s,inf);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    LL v,c;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(LL v,LL c):v(v),c(c)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp; rhs)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c&gt;rhs.c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    LL v,cost;</span><br><span class="line">    Edge(<span class="keyword">int</span> v,<span class="keyword">int</span> cost):v(v),cost(cost)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dij</span>&#123;</span></span><br><span class="line">    LL dist[maxn];</span><br><span class="line">    <span class="keyword">int</span> vis[maxn];</span><br><span class="line">    <span class="built_in">vector</span>&lt;Edge&gt;E[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="built_in">memset</span>(dist,inf,<span class="keyword">sizeof</span> dist);</span><br><span class="line">        dist[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">priority_queue</span>&lt;node&gt;pq;</span><br><span class="line">        pq.push(node(s,<span class="number">0</span>));</span><br><span class="line">        node tmp;</span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">            tmp=pq.top();</span><br><span class="line">            pq.pop();</span><br><span class="line">            LL cur=tmp.v;</span><br><span class="line">            <span class="keyword">if</span>(vis[cur]) <span class="keyword">continue</span>;</span><br><span class="line">            vis[cur]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(LL i=<span class="number">0</span>;i&lt;E[cur].size();i++)&#123;</span><br><span class="line">                LL v=E[cur][i].v;</span><br><span class="line">                LL dis=E[cur][i].cost;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v]&amp;&amp;dist[v]&gt;dist[cur]+dis)&#123;</span><br><span class="line">                    dist[v]=dist[cur]+dis;</span><br><span class="line">                    pq.push(node(v,dist[v]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dinic D;</span><br><span class="line">        <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;E[i].size();j++)&#123;</span><br><span class="line">                LL v=E[i][j].v;</span><br><span class="line">                LL dis=E[i][j].cost;</span><br><span class="line">                <span class="keyword">if</span>(dist[i]+dis==dist[v])&#123;</span><br><span class="line">                    D.addedge(i,v,dis);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;D.maxflow(<span class="number">1</span>,n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        LL n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">        LL u,v,c;</span><br><span class="line">        Dij Di;</span><br><span class="line">        <span class="keyword">for</span>(LL i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;c);</span><br><span class="line">            Di.E[u].push_back(Edge(v,c));</span><br><span class="line">        &#125;</span><br><span class="line">        Di.Dijkstra(<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-图算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU-3790 最短路径问题 </title>
      <link href="//AC-everyday/HDU-3790/"/>
      <url>//AC-everyday/HDU-3790/</url>
      
        <content type="html"><![CDATA[<img data-src="/images/acm/2019/hdu-3790-status.png"/><ul><li>今天重新做了一下去年暑假被坑的题，当时真是年少无知，超时了以后就再也没尝试这道题，还是太菜了，不知道<code>cin和cout</code>可以让我的程序超时，今天就把输入输出改了一下就过了，还是去年的代码，而且还是一个没优化的$O(N^2)$的$Dijkstra$算法。</li></ul><a id="more"></a><p><strong>题目链接</strong> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=3790" rel="external nofollow noreferrer">http://acm.hdu.edu.cn/showproblem.php?pid=3790</a></p><p><strong>题目内容如下：</strong></p><p>​    给你n个点，m条无向边，每条边都有长度d和花费p，给你起点s终点t，要求输出起点到终点的最短距离及其花费，如果最短距离有多条路线，则输出花费最少的。</p><p><strong>题解：</strong></p><p>​    首先还是$Dijkstra$就可以解决，因为还是求最短路径，只不过每个路径不再只是距离了，加了一个条件让求最短距离，并且最短距离多条时还要计算最少花费，也就是可以这样理解：<font color="red">在最短距离的松弛操作时，如果当前松弛结果比不松弛时小，那么此时不管松弛对花费造成什么影响都对花费进行松弛，因为首要目的时求最短距离，在保证最短距离时再求最少花费。如果松弛后没变，就理解为此时出现了多个最短距离，那么如果松弛操作可以使花费更少就进行松弛操作。</font></p><p><strong>代码如下：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN 1010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> distD[LEN];</span><br><span class="line"><span class="keyword">int</span> distP[LEN];</span><br><span class="line"><span class="keyword">int</span> mapD[LEN][LEN];<span class="comment">//路程</span></span><br><span class="line"><span class="keyword">int</span> mapP[LEN][LEN];<span class="comment">//花费</span></span><br><span class="line"><span class="keyword">bool</span> visited[LEN];<span class="comment">//标记某点是否被访问</span></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;LEN; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;LEN; j++) &#123;</span><br><span class="line">            mapD[i][j]=MAX;</span><br><span class="line">            mapP[i][j]=MAX;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dijstra方法  n:多少个点 start:从某点开始</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijstra</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,min,k;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        visited[i]=<span class="literal">false</span>;</span><br><span class="line">        distD[i]=mapD[start][i];</span><br><span class="line">        distP[i]=mapP[start][i];</span><br><span class="line">    &#125;</span><br><span class="line">    visited[start]=<span class="literal">true</span>;</span><br><span class="line">    distD[start]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        min=MAX;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[j] &amp;&amp; distD[j]&lt;min) &#123;</span><br><span class="line">                min=distD[j];</span><br><span class="line">                k=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min==MAX) <span class="keyword">break</span>;</span><br><span class="line">        visited[k]=<span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//只需要考虑距离就可以了</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[j]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(distD[j]&gt;distD[k]+mapD[k][j]) &#123;</span><br><span class="line">                    distD[j]=distD[k]+mapD[k][j];</span><br><span class="line">                    distP[j]=distP[k]+mapP[k][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(distD[j]==distD[k]+mapD[k][j]) &#123; <span class="comment">//如果路径相同</span></span><br><span class="line">                    <span class="keyword">if</span>(distP[j]&gt;distP[k]+mapP[k][j]) &#123;</span><br><span class="line">                        distP[j]=distP[k]+mapP[k][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m)!=EOF) &#123; <span class="comment">//输入点和边</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> i,j,a,b,d,p,s,t;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;d,&amp;p);</span><br><span class="line">            <span class="comment">//cin&gt;&gt;a&gt;&gt;b&gt;&gt;d&gt;&gt;p;//输入各边的路径的花费</span></span><br><span class="line">            <span class="keyword">if</span>(mapD[a][b]&gt;d) &#123;</span><br><span class="line">                mapD[a][b]=mapD[b][a]=d;</span><br><span class="line">                mapP[a][b]=mapP[b][a]=p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;s,&amp;t);</span><br><span class="line">        <span class="comment">//cin&gt;&gt;s&gt;&gt;t;//输入起始点和目标点</span></span><br><span class="line">        dijstra(n,s);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,distD[t],distP[t]);</span><br><span class="line">        <span class="comment">//cout&lt;&lt;distD[t]&lt;&lt;&quot; &quot;&lt;&lt;distP[t]&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-图算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round #100 C. New Year Snowmen</title>
      <link href="//AC-everyday/Codeforces-Round-100-C-New-Year-Snowmen/"/>
      <url>//AC-everyday/Codeforces-Round-100-C-New-Year-Snowmen/</url>
      
        <content type="html"><![CDATA[<p>题目链接：<a href="http://codeforces.com/problemset/problem/140/C" rel="external nofollow noreferrer">http://codeforces.com/problemset/problem/140/C</a></p><ul><li>这个题是我们有次小比赛的题，当时脑子比较乱，写了一堆bug，今天想了起来就补了一下题。</li></ul><blockquote><p>这题就是在处理数据稍微麻烦了点，因为数据范围是1e8，用数组去记录每个值的个数显然是不可能了，于是我用了一个<code>unordered_map</code>来映射每个值出现的次数，然后放到一个按照值的个数排序的优先队列中，优先取出来个数比较多的。</p></blockquote><a id="more"></a><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val,cnt;</span><br><span class="line">    node(<span class="keyword">int</span> val,<span class="keyword">int</span> cnt):val(val),cnt(cnt)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp; x)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cnt&lt;x.cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ans</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;<span class="keyword">int</span> b;<span class="keyword">int</span> c;</span><br><span class="line">    ans(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c):a(a),b(b),c(c)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;node&gt;pq;</span><br><span class="line"><span class="built_in">queue</span>&lt;ans&gt;qu;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;umap;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(!pq.empty()) pq.pop();</span><br><span class="line">    <span class="keyword">while</span>(!qu.empty()) pq.pop();</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;r;</span><br><span class="line">        umap[r]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(it=umap.begin();it!=umap.end();it++)&#123;</span><br><span class="line">        pq.push(node(it-&gt;first,it-&gt;second));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pq.size()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">        node a=pq.top();pq.pop();a.cnt--;</span><br><span class="line">        node b=pq.top();pq.pop();b.cnt--;</span><br><span class="line">        node c=pq.top();pq.pop();c.cnt--;</span><br><span class="line">        <span class="keyword">int</span> cur[<span class="number">3</span>]=&#123;a.val,b.val,c.val&#125;;</span><br><span class="line">        sort(cur,cur+<span class="number">3</span>);</span><br><span class="line">        qu.push(ans(cur[<span class="number">2</span>],cur[<span class="number">1</span>],cur[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">if</span>(a.cnt&gt;<span class="number">0</span>) pq.push(a);</span><br><span class="line">        <span class="keyword">if</span>(b.cnt&gt;<span class="number">0</span>) pq.push(b);</span><br><span class="line">        <span class="keyword">if</span>(c.cnt&gt;<span class="number">0</span>) pq.push(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;qu.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">        ans tmp=qu.front();</span><br><span class="line">        qu.pop();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;tmp.a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;tmp.b&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;tmp.c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-基本算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++STL </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专题六 最小生成树</title>
      <link href="//kuangbin-topic/6/"/>
      <url>//kuangbin-topic/6/</url>
      
        <content type="html"><![CDATA[<h3 id="POJ-1251-Jungle-Roads"><a href="#POJ-1251-Jungle-Roads" class="headerlink" title="POJ 1251 Jungle Roads"></a><a href="https://vjudge.net/problem/POJ-1251" rel="external nofollow noreferrer"><strong>POJ 1251</strong></a> Jungle Roads</h3><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">27</span>+<span class="number">10</span>;<span class="comment">//最大点数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM=<span class="number">75</span>+<span class="number">10</span>;<span class="comment">//最大边数</span></span><br><span class="line"><span class="keyword">int</span> F[MAXN];<span class="comment">//并查集使用</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">&#125;edge[MAXM];</span><br><span class="line"><span class="keyword">int</span> tol;<span class="comment">//边数，加边前赋值为0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    edge[tol].u=u;</span><br><span class="line">    edge[tol].v=v;</span><br><span class="line">    edge[tol++].w=w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排序函数，将边按照权值从小到大排序</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a,Edge b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(F[x]==<span class="number">-1</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> F[x]=find(F[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传入点数，返回最小生成树的权值，如果不连通返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kruskal</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(F,<span class="number">-1</span>,<span class="keyword">sizeof</span> F);</span><br><span class="line">    sort(edge,edge+tol,cmp);</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;<span class="comment">//计算加入的边数</span></span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tol;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=edge[i].u;</span><br><span class="line">        <span class="keyword">int</span> v=edge[i].v;</span><br><span class="line">        <span class="keyword">int</span> w=edge[i].w;</span><br><span class="line">        <span class="keyword">int</span> t1=find(u);</span><br><span class="line">        <span class="keyword">int</span> t2=find(v);</span><br><span class="line">        <span class="keyword">if</span>(t1!=t2)&#123;</span><br><span class="line">            ans+=w;</span><br><span class="line">            F[t1]=t2;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt&lt;n<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//不连通</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n,k,w;</span><br><span class="line">    <span class="keyword">char</span> u,v;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</span><br><span class="line">        tol=<span class="number">0</span>;<span class="comment">//初始化边数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;k;</span><br><span class="line">            <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;v&gt;&gt;w;</span><br><span class="line">                addedge(u-<span class="string">&#x27;A&#x27;</span>,v-<span class="string">&#x27;A&#x27;</span>,w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;Kruskal(n)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-1287-Networking"><a href="#POJ-1287-Networking" class="headerlink" title="POJ 1287 Networking"></a><a href="https://vjudge.net/problem/POJ-1287" rel="external nofollow noreferrer"><strong>POJ 1287</strong></a> Networking</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">50</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM=MAXN*MAXN;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">&#125;edge[MAXM];</span><br><span class="line"><span class="keyword">int</span> tol=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> F[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    edge[tol].u=u;</span><br><span class="line">    edge[tol].v=v;</span><br><span class="line">    edge[tol++].w=w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a,Edge b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(F[x]==<span class="number">-1</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> F[x]=find(F[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kruskal</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(F,<span class="number">-1</span>,<span class="keyword">sizeof</span> F);</span><br><span class="line">    sort(edge,edge+tol,cmp);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tol;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=edge[i].u;</span><br><span class="line">        <span class="keyword">int</span> v=edge[i].v;</span><br><span class="line">        <span class="keyword">int</span> w=edge[i].w;</span><br><span class="line">        <span class="keyword">int</span> t1=find(u);</span><br><span class="line">        <span class="keyword">int</span> t2=find(v);</span><br><span class="line">        <span class="keyword">if</span>(t1!=t2)&#123;</span><br><span class="line">            ans+=w;</span><br><span class="line">            cnt++;</span><br><span class="line">            F[t1]=t2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt&lt;n<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ans; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,u,v,w;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        tol=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">            addedge(u,v,w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;Kruskal(n)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-2031-Building-a-Space-Station"><a href="#POJ-2031-Building-a-Space-Station" class="headerlink" title="POJ 2031 Building a Space Station"></a><a href="https://vjudge.net/problem/POJ-2031" rel="external nofollow noreferrer"><strong>POJ 2031</strong></a> Building a Space Station</h3><h3 id="POJ-2421-Constructing-Roads"><a href="#POJ-2421-Constructing-Roads" class="headerlink" title="POJ 2421 Constructing Roads"></a><a href="https://vjudge.net/problem/POJ-2421" rel="external nofollow noreferrer"><strong>POJ 2421</strong></a> Constructing Roads</h3><h3 id="ZOJ-1586-QS-Network"><a href="#ZOJ-1586-QS-Network" class="headerlink" title="ZOJ 1586 QS Network"></a><a href="https://vjudge.net/problem/ZOJ-1586" rel="external nofollow noreferrer"><strong>ZOJ 1586</strong></a> QS Network</h3><h3 id="POJ-1789-Truck-History"><a href="#POJ-1789-Truck-History" class="headerlink" title="POJ 1789 Truck History"></a><a href="https://vjudge.net/problem/POJ-1789" rel="external nofollow noreferrer"><strong>POJ 1789</strong></a> Truck History</h3><h3 id="POJ-2349-Arctic-Network"><a href="#POJ-2349-Arctic-Network" class="headerlink" title="POJ 2349 Arctic Network"></a><a href="https://vjudge.net/problem/POJ-2349" rel="external nofollow noreferrer"><strong>POJ 2349</strong></a> Arctic Network</h3><h3 id="POJ-1751-Highways"><a href="#POJ-1751-Highways" class="headerlink" title="POJ 1751 Highways"></a><a href="https://vjudge.net/problem/POJ-1751" rel="external nofollow noreferrer"><strong>POJ 1751</strong></a> Highways</h3><h3 id="POJ-1258-Agri-Net"><a href="#POJ-1258-Agri-Net" class="headerlink" title="POJ 1258 Agri-Net"></a><a href="https://vjudge.net/problem/POJ-1258" rel="external nofollow noreferrer"><strong>POJ 1258</strong></a> Agri-Net</h3><h3 id="POJ-3026-Borg-Maze"><a href="#POJ-3026-Borg-Maze" class="headerlink" title="POJ 3026 Borg Maze"></a><a href="https://vjudge.net/problem/POJ-3026" rel="external nofollow noreferrer"><strong>POJ 3026</strong></a> Borg Maze</h3><p><strong>分析</strong>： 就是在一个迷宫中从 $S$ 出发去抓所有外星人👽 $A$ ，问你最短路径，因为可以在 $S$ 和 $A$ 处分裂，所以相当于计算路径覆盖的边的最少个数。</p><p>显然这就转换成了最小生成树问题。先从 $N+1$ 个点分别作为起点进行 $BFS$ ，记录到其它点的最短路径，这就生成了一个无向完全图，既然是个稠密图那就跑一个 $Prim$ 算法求最小生成树，然后这棵树的边长和就是答案。</p><p>时间复杂度 $O(TN^2)$</p><div class="note danger"><p>注意：测试数据特别坑，输入的迷宫尺寸后面会有很多空格，好像也有一些空行，参考我的输入即可。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxside = <span class="number">50</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> maze[maxside][maxside], id[maxside][maxside];</span><br><span class="line"><span class="keyword">int</span> T, N, C, R; <span class="comment">// C-&gt;column R-&gt;row </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, step;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> _step)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = _x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = _y;</span><br><span class="line">        <span class="keyword">this</span>-&gt;step = _step;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isLegal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt; <span class="number">0</span> &amp;&amp; x &lt;= R &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; y &lt;= C &amp;&amp; maze[x][y] != <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>&#123;</span></span><br><span class="line">    Point node[maxside * maxside];</span><br><span class="line">    <span class="keyword">int</span> fr, re;<span class="comment">// front rear</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        fr = re = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (fr == re);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> Point &amp;x)</span></span>&#123;</span><br><span class="line">        node[re++] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Point <span class="title">front_pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node[fr++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;qu;</span><br><span class="line"><span class="keyword">bool</span> vis[maxside][maxside];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> dis[maxside * maxside][maxside * maxside];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> sx, <span class="keyword">int</span> sy)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    qu.clear();</span><br><span class="line">    <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">    qu.push(Point(sx, sy, step));</span><br><span class="line">    vis[sx][sy] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">        Point cur = qu.front_pop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)&#123;</span><br><span class="line">            <span class="function">Point <span class="title">nex</span><span class="params">(cur.x + dir[i][<span class="number">0</span>], cur.y + dir[i][<span class="number">1</span>], cur.step + <span class="number">1</span>)</span></span>;</span><br><span class="line">            <span class="keyword">if</span>(!nex.isLegal() || vis[nex.x][nex.y]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(maze[nex.x][nex.y] == <span class="string">&#x27;S&#x27;</span> || maze[nex.x][nex.y] == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">                dis[id[sx][sy]][id[nex.x][nex.y]] = nex.step;</span><br><span class="line">            &#125;</span><br><span class="line">            qu.push(nex);</span><br><span class="line">            vis[nex.x][nex.y] = <span class="number">1</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">bool</span> inMST[maxside * maxside];</span><br><span class="line"><span class="keyword">int</span> lowc[maxside * maxside];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Prim</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(inMST, <span class="literal">false</span>, <span class="keyword">sizeof</span> inMST);</span><br><span class="line">    inMST[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)&#123;</span><br><span class="line">        lowc[i] = dis[<span class="number">0</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> minc = INF;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!inMST[j] &amp;&amp; minc &gt; lowc[j])&#123;</span><br><span class="line">                minc = lowc[j];</span><br><span class="line">                p = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(minc == INF) <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//原图不联通</span></span><br><span class="line">        ans += minc;</span><br><span class="line">        inMST[p] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!inMST[j] &amp;&amp; lowc[j] &gt; dis[p][j])&#123;</span><br><span class="line">                lowc[j] = dis[p][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T); </span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;C, &amp;R);</span><br><span class="line">        <span class="comment">//Read for an extra time to skip the empty line. </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= R; ++i)&#123;</span><br><span class="line">            gets(maze[i]+<span class="number">1</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        N = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= R; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= C; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(maze[i][j] == <span class="string">&#x27;S&#x27;</span>) id[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(maze[i][j] == <span class="string">&#x27;A&#x27;</span>) id[i][j] = N++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= R; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= C; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(maze[i][j] == <span class="string">&#x27;S&#x27;</span> || maze[i][j] == <span class="string">&#x27;A&#x27;</span>) BFS(i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Prim());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-1679-The-Unique-MST"><a href="#POJ-1679-The-Unique-MST" class="headerlink" title="POJ 1679 The Unique MST"></a><a href="https://vjudge.net/problem/POJ-1679" rel="external nofollow noreferrer"><strong>POJ 1679</strong></a> The Unique MST</h3><h3 id="HDU-1233-还是畅通工程"><a href="#HDU-1233-还是畅通工程" class="headerlink" title="HDU 1233 还是畅通工程"></a><a href="https://vjudge.net/problem/HDU-1233" rel="external nofollow noreferrer"><strong>HDU 1233</strong></a> 还是畅通工程</h3><h3 id="HDU-1301-Jungle-Roads"><a href="#HDU-1301-Jungle-Roads" class="headerlink" title="HDU 1301 Jungle Roads"></a><a href="https://vjudge.net/problem/HDU-1301" rel="external nofollow noreferrer"><strong>HDU 1301</strong></a> Jungle Roads</h3><h3 id="HDU-1875-畅通工程再续"><a href="#HDU-1875-畅通工程再续" class="headerlink" title="HDU 1875 畅通工程再续"></a><a href="https://vjudge.net/problem/HDU-1875" rel="external nofollow noreferrer"><strong>HDU 1875</strong></a> 畅通工程再续</h3>]]></content>
      
      
      <categories>
          
          <category> ACM-邝斌专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bfs </tag>
            
            <tag> 邝斌专题 </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专题四 最短路练习</title>
      <link href="//kuangbin-topic/4/"/>
      <url>//kuangbin-topic/4/</url>
      
        <content type="html"><![CDATA[<h3 id="POJ-2387-Til-the-Cows-Come-Home"><a href="#POJ-2387-Til-the-Cows-Come-Home" class="headerlink" title="POJ 2387 Til the Cows Come Home"></a><a href="https://vjudge.net/problem/POJ-2387" rel="external nofollow noreferrer"><strong>POJ 2387</strong></a> Til the Cows Come Home</h3><p>题目就是求$T$条双向边，$N$个顶点的单源最短路径$min(1,N)$</p><p>这题用$scanf$会快很多，但我没用它。</p><p>没有优化的$Dijkstra$算法：$Time:157ms$，$O(N^2)$</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> e[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn],vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> T,N;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T&gt;&gt;N;</span><br><span class="line">    <span class="built_in">memset</span>(e,INF,<span class="keyword">sizeof</span> e);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,c;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="keyword">if</span>(c&lt;e[a][b]) e[a][b]=e[b][a]=c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        dis[i]=e[<span class="number">1</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> t=N<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> mi=INF,mi_idx;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i]&amp;&amp;dis[i]&lt;mi)&#123;</span><br><span class="line">                mi=dis[i];</span><br><span class="line">                mi_idx=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[mi_idx]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i]&amp;&amp;e[mi_idx][i]!=INF&amp;&amp;dis[i]&gt;dis[mi_idx]+e[mi_idx][i])&#123;</span><br><span class="line">                dis[i]=dis[mi_idx]+e[mi_idx][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dis[N];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>堆优化的$Dijkstra$算法：$Time:94ms$，$O(Elog_E)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,c;</span><br><span class="line">    node(<span class="keyword">int</span> _v=<span class="number">0</span>,<span class="keyword">int</span> _c=<span class="number">0</span>):v(_v),c(_c)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;x)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c&gt;x.c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,cost;</span><br><span class="line">    Edge(<span class="keyword">int</span> _v=<span class="number">0</span>,<span class="keyword">int</span> _cost=<span class="number">0</span>):v(_v),cost(_cost)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt;E[maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn],dis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    E[u].push_back(Edge(v,c));</span><br><span class="line">    E[v].push_back(Edge(u,c));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(dis,INF,<span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[start]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;node&gt;pq;</span><br><span class="line">    <span class="keyword">while</span>(!pq.empty()) pq.pop();</span><br><span class="line">    pq.push(node(start,<span class="number">0</span>));</span><br><span class="line">    node tmp;</span><br><span class="line">    <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">        tmp=pq.top();</span><br><span class="line">        pq.pop();</span><br><span class="line">        <span class="keyword">int</span> cur=tmp.v;</span><br><span class="line">        <span class="keyword">if</span>(vis[cur]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[cur]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;E[cur].size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=E[cur][i].v;</span><br><span class="line">            <span class="keyword">int</span> cost=E[cur][i].cost;</span><br><span class="line">            <span class="keyword">if</span>(!vis[v]&amp;&amp;dis[v]&gt;dis[cur]+cost)&#123;</span><br><span class="line">                dis[v]=dis[cur]+cost;</span><br><span class="line">                pq.push(node(v,dis[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  ios::sync_with_stdio(<span class="number">0</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> T,N;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T&gt;&gt;N;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v,c;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;c;</span><br><span class="line">        <span class="comment">//在这里用优先队列加vis数组标记，所以不用考虑重边</span></span><br><span class="line">        addedge(u,v,c);</span><br><span class="line">    &#125;</span><br><span class="line">    Dijkstra(N,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dis[N];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>用spfa会更快，有时间看一下。</p></blockquote><h3 id="POJ-2253-Frogger"><a href="#POJ-2253-Frogger" class="headerlink" title="POJ 2253 Frogger"></a><a href="https://vjudge.net/problem/POJ-2253" rel="external nofollow noreferrer"><strong>POJ 2253</strong></a> Frogger</h3><h3 id="POJ-1797-Heavy-Transportation"><a href="#POJ-1797-Heavy-Transportation" class="headerlink" title="POJ 1797 Heavy Transportation"></a><a href="https://vjudge.net/problem/POJ-1797" rel="external nofollow noreferrer"><strong>POJ 1797</strong></a> Heavy Transportation</h3><h3 id="POJ-3268-Silver-Cow-Party"><a href="#POJ-3268-Silver-Cow-Party" class="headerlink" title="POJ 3268 Silver Cow Party"></a><a href="https://vjudge.net/problem/POJ-3268" rel="external nofollow noreferrer"><strong>POJ 3268</strong></a> Silver Cow Party</h3><h3 id="POJ-1860-Currency-Exchange"><a href="#POJ-1860-Currency-Exchange" class="headerlink" title="POJ 1860 Currency Exchange"></a><a href="https://vjudge.net/problem/POJ-1860" rel="external nofollow noreferrer"><strong>POJ 1860</strong></a> Currency Exchange</h3><h3 id="POJ-3259-Wormholes"><a href="#POJ-3259-Wormholes" class="headerlink" title="POJ 3259 Wormholes"></a><a href="https://vjudge.net/problem/POJ-3259" rel="external nofollow noreferrer"><strong>POJ 3259</strong></a> Wormholes</h3><h3 id="POJ-1502-MPI-Maelstrom"><a href="#POJ-1502-MPI-Maelstrom" class="headerlink" title="POJ 1502 MPI Maelstrom"></a><a href="https://vjudge.net/problem/POJ-1502" rel="external nofollow noreferrer"><strong>POJ 1502</strong></a> MPI Maelstrom</h3><h3 id="POJ-3660-Cow-Contest"><a href="#POJ-3660-Cow-Contest" class="headerlink" title="POJ 3660 Cow Contest"></a><a href="https://vjudge.net/problem/POJ-3660" rel="external nofollow noreferrer"><strong>POJ 3660</strong></a> Cow Contest</h3><h3 id="POJ-2240-Arbitrage"><a href="#POJ-2240-Arbitrage" class="headerlink" title="POJ 2240 Arbitrage"></a><a href="https://vjudge.net/problem/POJ-2240" rel="external nofollow noreferrer"><strong>POJ 2240</strong></a> Arbitrage</h3><h3 id="POJ-1511-Invitation-Cards"><a href="#POJ-1511-Invitation-Cards" class="headerlink" title="POJ 1511 Invitation Cards"></a><a href="https://vjudge.net/problem/POJ-1511" rel="external nofollow noreferrer"><strong>POJ 1511</strong></a> Invitation Cards</h3><h3 id="POJ-3159-Candies"><a href="#POJ-3159-Candies" class="headerlink" title="POJ 3159 Candies"></a><a href="https://vjudge.net/problem/POJ-3159" rel="external nofollow noreferrer"><strong>POJ 3159</strong></a> Candies</h3><h3 id="POJ-2502-Subway"><a href="#POJ-2502-Subway" class="headerlink" title="POJ 2502 Subway"></a><a href="https://vjudge.net/problem/POJ-2502" rel="external nofollow noreferrer"><strong>POJ 2502</strong></a> Subway</h3><h3 id="POJ-1062-昂贵的聘礼"><a href="#POJ-1062-昂贵的聘礼" class="headerlink" title="POJ 1062 昂贵的聘礼"></a><a href="https://vjudge.net/problem/POJ-1062" rel="external nofollow noreferrer"><strong>POJ 1062</strong></a> 昂贵的聘礼</h3><h3 id="POJ-1847-Tram"><a href="#POJ-1847-Tram" class="headerlink" title="POJ 1847 Tram"></a><a href="https://vjudge.net/problem/POJ-1847" rel="external nofollow noreferrer"><strong>POJ 1847</strong></a> Tram</h3><h3 id="LightOJ-1074-Extended-Traffic"><a href="#LightOJ-1074-Extended-Traffic" class="headerlink" title="LightOJ 1074 Extended Traffic"></a><a href="https://vjudge.net/problem/LightOJ-1074" rel="external nofollow noreferrer"><strong>LightOJ 1074</strong></a> Extended Traffic</h3><h3 id="HDU-4725-The-Shortest-Path-in-Nya-Graph"><a href="#HDU-4725-The-Shortest-Path-in-Nya-Graph" class="headerlink" title="HDU 4725 The Shortest Path in Nya Graph"></a><a href="https://vjudge.net/problem/HDU-4725" rel="external nofollow noreferrer"><strong>HDU 4725</strong></a> The Shortest Path in Nya Graph</h3><h3 id="HDU-3416-Marriage-Match-IV"><a href="#HDU-3416-Marriage-Match-IV" class="headerlink" title="HDU 3416 Marriage Match IV"></a><a href="https://vjudge.net/problem/HDU-3416" rel="external nofollow noreferrer"><strong>HDU 3416</strong></a> Marriage Match IV</h3><h3 id="HDU-4370-0-or-1"><a href="#HDU-4370-0-or-1" class="headerlink" title="HDU 4370 0 or 1"></a><a href="https://vjudge.net/problem/HDU-4370" rel="external nofollow noreferrer"><strong>HDU 4370</strong></a> 0 or 1</h3><h3 id="POJ-3169-Layout"><a href="#POJ-3169-Layout" class="headerlink" title="POJ 3169 Layout"></a><a href="https://vjudge.net/problem/POJ-3169" rel="external nofollow noreferrer"><strong>POJ 3169</strong></a> Layout</h3>]]></content>
      
      
      <categories>
          
          <category> ACM-邝斌专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 邝斌专题 </tag>
            
            <tag> 最短路算法 </tag>
            
            <tag> Dijkstra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专题一 简单搜索</title>
      <link href="//kuangbin-topic/1/"/>
      <url>//kuangbin-topic/1/</url>
      
        <content type="html"><![CDATA[<h3 id="POJ-1321-棋盘问题"><a href="#POJ-1321-棋盘问题" class="headerlink" title="POJ 1321 棋盘问题"></a><a href="https://vjudge.net/problem/POJ-1321" rel="external nofollow noreferrer"><strong>POJ 1321</strong></a> 棋盘问题</h3><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> mp[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,vis[<span class="number">10</span>],n,k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt==k)&#123;</span><br><span class="line">        ans++;<span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mp[i][j]==<span class="string">&#x27;#&#x27;</span>&amp;&amp;!vis[j])&#123;</span><br><span class="line">                vis[j]=<span class="number">1</span>;</span><br><span class="line">                dfs(i+<span class="number">1</span>,cnt+<span class="number">1</span>);</span><br><span class="line">                vis[j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">-1</span>&amp;&amp;k==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;mp[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-2251-Dungeon-Master"><a href="#POJ-2251-Dungeon-Master" class="headerlink" title="POJ 2251 Dungeon Master"></a><a href="https://vjudge.net/problem/POJ-2251" rel="external nofollow noreferrer"><strong>POJ 2251</strong></a> Dungeon Master</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">30</span>;</span><br><span class="line"><span class="built_in">string</span> mp[maxn][maxn];<span class="comment">//mp[l][r];</span></span><br><span class="line"><span class="keyword">int</span> vis[maxn][maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">6</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> L,R,C,Sl,Sr,Sc,Tl,Tr,Tc;</span><br><span class="line"><span class="keyword">int</span> ans=INT_MAX;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,c,cnt;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_ok</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (l&gt;=<span class="number">0</span>&amp;&amp;l&lt;L&amp;&amp;r&gt;=<span class="number">0</span>&amp;&amp;r&lt;R&amp;&amp;c&gt;=<span class="number">0</span>&amp;&amp;c&lt;C&amp;&amp;(mp[l][r][c]==<span class="string">&#x27;E&#x27;</span>||mp[l][r][c]==<span class="string">&#x27;.&#x27;</span>)&amp;&amp;!vis[l][r][c]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> c,<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;Node&gt;qu;</span><br><span class="line">    qu.push(&#123;l,r,c,cnt&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">        Node node=qu.front();</span><br><span class="line">        qu.pop();</span><br><span class="line">        l= node.l;r=node.r;c=node.c;cnt=node.cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> next_l=l+dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> next_r=r+dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> next_c=c+dir[i][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span>(is_ok(next_l,next_r,next_c))&#123;</span><br><span class="line">                vis[next_l][next_r][next_c]=<span class="number">1</span>;</span><br><span class="line">                qu.push(&#123;next_l,next_r,next_c,cnt+<span class="number">1</span>&#125;);</span><br><span class="line">                <span class="keyword">if</span>(next_l==Tl&amp;&amp;next_r==Tr&amp;&amp;next_c==Tc)&#123;</span><br><span class="line">                    ans=cnt+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;L&gt;&gt;R&gt;&gt;C&amp;&amp;L&amp;&amp;R&amp;&amp;C)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        ans=INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;R;j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;mp[i][j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;C;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(mp[i][j][k]==<span class="string">&#x27;S&#x27;</span>)&#123;</span><br><span class="line">                        Sl=i;Sr=j;Sc=k;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mp[i][j][k]==<span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">                        Tl=i;Tr=j;Tc=k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[Sl][Sr][Sc]=<span class="number">1</span>;</span><br><span class="line">        bfs(Sl,Sr,Sc,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(ans==INT_MAX)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Trapped!\n&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Escaped in &quot;</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot; minute(s).\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-3278-Catch-That-Cow"><a href="#POJ-3278-Catch-That-Cow" class="headerlink" title="POJ 3278 Catch That Cow"></a><a href="https://vjudge.net/problem/POJ-3278" rel="external nofollow noreferrer"><strong>POJ 3278</strong></a> Catch That Cow</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100001</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,step;</span><br><span class="line">&#125;;</span><br><span class="line">Node q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    Node now,next;</span><br><span class="line">    <span class="keyword">int</span> head,tail;</span><br><span class="line">    head=tail=<span class="number">0</span>;</span><br><span class="line">    q[tail].x=n;</span><br><span class="line">    q[tail].step=<span class="number">0</span>;</span><br><span class="line">    tail++;</span><br><span class="line">    vis[n]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(head&lt;tail) &#123;</span><br><span class="line">        now=q[head];<span class="comment">//取队首</span></span><br><span class="line">        head++;<span class="comment">//弹出对首</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>) next.x=now.x<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">1</span>) next.x=now.x+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> next.x=<span class="number">2</span>*now.x;</span><br><span class="line">            <span class="keyword">if</span>(next.x&lt;<span class="number">0</span> || next.x&gt;=maxn) <span class="keyword">continue</span>;<span class="comment">//剪枝、排除越界</span></span><br><span class="line">            <span class="keyword">if</span>(!vis[next.x]) &#123;</span><br><span class="line">                vis[next.x]=<span class="literal">true</span>;</span><br><span class="line">                next.step=now.step+<span class="number">1</span>;</span><br><span class="line">                q[tail].x=next.x;</span><br><span class="line">                q[tail].step=next.step;</span><br><span class="line">                tail++;</span><br><span class="line">                <span class="keyword">if</span>(next.x==k) <span class="keyword">return</span> next.step;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">if</span>(n&gt;=k) <span class="built_in">cout</span>&lt;&lt;n-k&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;bfs()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-3279-Fliptile"><a href="#POJ-3279-Fliptile" class="headerlink" title="POJ 3279 Fliptile"></a><a href="https://vjudge.net/problem/POJ-3279" rel="external nofollow noreferrer"><strong>POJ 3279</strong></a> Fliptile</h3><blockquote><p>首先是一个状压DP，状压DP就是用用数字来保存一系列对象的状态，如本题中枚举第一行的所有状态的代码，枚举完第一行后就可以从第二行开始计算了，此时第一行的状态只能由第二行改变，所以要用<code>get_color(i-1,j)</code>来获得上面那个点的状态，而上面那个点的状态目前由<code>mp[i][j]^tmp[i][j]^tmp[i-1][j]^tmp[i][j-1]^tmp[i][j+1]</code>来决定，依次类推可以获得最后一行的状态，如果全是0，就返回这个结果，最终取最优解。时间复杂度$O(2^nmn)$</p></blockquote><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">15</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">15</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> mp[M][N],tmp[M][N],ans[M][N],m,n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_color</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (mp[i][j]^tmp[i][j]^tmp[i<span class="number">-1</span>][j]^tmp[i][j<span class="number">-1</span>]^tmp[i][j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> cur_cnt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=cur_cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            tmp[i][j]=get_color(i<span class="number">-1</span>,j);</span><br><span class="line">            cnt+=tmp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp[m+<span class="number">1</span>][i]) <span class="keyword">return</span> INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;mp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;n);i++)&#123;<span class="comment">//枚举第一行的所有可能</span></span><br><span class="line">        <span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span> tmp);</span><br><span class="line">        <span class="keyword">int</span> cur_cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;<span class="comment">//生成第一行的操作</span></span><br><span class="line">            cur_cnt+=tmp[<span class="number">1</span>][j]=(<span class="number">1</span>&amp;(i&gt;&gt;(n-j)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cur=solve(cur_cnt);</span><br><span class="line">        <span class="keyword">if</span>(cur&lt;sum)&#123;<span class="comment">//当前结果更优</span></span><br><span class="line">            <span class="built_in">memcpy</span>(ans,tmp,<span class="keyword">sizeof</span> tmp);<span class="comment">//将结果保存到ans数组</span></span><br><span class="line">            sum=cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum==INF) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;IMPOSSIBLE&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;&quot;sum:&quot;&lt;&lt;sum&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;ans[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-1426-Find-The-Multiple"><a href="#POJ-1426-Find-The-Multiple" class="headerlink" title="POJ 1426 Find The Multiple"></a><a href="https://vjudge.net/problem/POJ-1426" rel="external nofollow noreferrer"><strong>POJ 1426</strong></a> Find The Multiple</h3><blockquote><p>首先这题从高位向低位搜索。</p><p>根据手算除法可以知道，我们都是从高位开始除，<font color="red">如果高位对n没整除，那么就把余数乘10加到下一位</font>，再加上完全二叉树(根节点为1)的规律列出下面的状态转移方程。</p></blockquote><p>$$<br>dp[i\times2]=dp[i]\times10 \mod n \\<br>dp[i\times2+1]=(dp[i]+1)\times10\mod n<br>$$<br>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">LL n;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1</span>&lt;&lt;<span class="number">20</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ans;</span><br><span class="line"><span class="comment">//dp[i]存储从根节点到i形成的十进制数对n的余数</span></span><br><span class="line"><span class="comment">//for i in range(i:~)模拟对完全二叉树的层次遍历,i代表第几个节点，也就是在完全二叉树走过的路径对应的十进制数。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n) &#123;</span><br><span class="line">        dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> now;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!(dp[i*<span class="number">2</span>]=(dp[i]*<span class="number">10</span>)%n)) &#123;</span><br><span class="line">                now=i*<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!(dp[i*<span class="number">2</span>+<span class="number">1</span>]=(dp[i]*<span class="number">10</span>+<span class="number">1</span>)%n)) &#123;</span><br><span class="line">                now=i*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.clear();</span><br><span class="line">        <span class="keyword">while</span>(now) &#123;</span><br><span class="line">            ans.push_back(now%<span class="number">2</span>);</span><br><span class="line">            now/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=ans.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ans[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-3126-Prime-Path"><a href="#POJ-3126-Prime-Path" class="headerlink" title="POJ 3126 Prime Path"></a><a href="https://vjudge.net/problem/POJ-3126" rel="external nofollow noreferrer"><strong>POJ 3126</strong></a> Prime Path</h3><blockquote><p>就是先打素数表，然后从给的第一个数开始bfs，用vis数组标记一下已经bfs到的素数，直到bfs到给的第二个素数，结束bfs，输出bfs次数cnt</p></blockquote><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> prime[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(prime,<span class="number">0</span>,<span class="keyword">sizeof</span> prime);</span><br><span class="line">    prime[<span class="number">0</span>]=prime[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">2</span>;i&lt;maxn;i++) <span class="keyword">if</span>(!prime[i])&#123;</span><br><span class="line">        <span class="keyword">for</span>(LL j=i*i;j&lt;maxn;j+=i) prime[j]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">    Node(<span class="keyword">int</span> num,<span class="keyword">int</span> cnt=<span class="number">0</span>):num(num),cnt(cnt)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">    Node node=Node(s,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">queue</span>&lt;Node&gt;qu;</span><br><span class="line">    qu.push(node);</span><br><span class="line">    <span class="keyword">int</span> num,cnt;</span><br><span class="line">    <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">        node=qu.front();</span><br><span class="line">        qu.pop();</span><br><span class="line">        num=node.num;</span><br><span class="line">        vis[num]=<span class="number">1</span>;</span><br><span class="line">        cnt=node.cnt;</span><br><span class="line">        <span class="keyword">if</span>(num==t) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> ctl=<span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">while</span>(ctl)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp=num;</span><br><span class="line">                <span class="keyword">if</span>(ctl==<span class="number">1000</span>&amp;&amp;i==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                tmp=((<span class="number">10</span>*ctl)*(tmp/(<span class="number">10</span>*ctl))+tmp%ctl+i*ctl);</span><br><span class="line">                <span class="keyword">if</span>(!prime[tmp]&amp;&amp;!vis[tmp]) qu.push(Node(tmp,cnt+<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            ctl/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    get_prime();</span><br><span class="line">    <span class="keyword">int</span> t,a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;bfs(a,b)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJ-3087-Shuffle’m-Up"><a href="#POJ-3087-Shuffle’m-Up" class="headerlink" title="POJ 3087 Shuffle’m Up"></a><a href="https://vjudge.net/problem/POJ-3087" rel="external nofollow noreferrer"><strong>POJ 3087</strong></a> Shuffle’m Up</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s1, s2, s12, new_s12 = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> N, C;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(N--)&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">bool</span>&gt;mp;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>, num = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; C &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; s12;</span><br><span class="line">        <span class="keyword">while</span>(new_s12 != s12)&#123;</span><br><span class="line">            new_s12 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;C;i++)&#123;</span><br><span class="line">                new_s12 += s2[i]; new_s12 += s1[i];</span><br><span class="line">            &#125;</span><br><span class="line">            new_s12 += <span class="string">&quot;\0&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(mp[new_s12])&#123;</span><br><span class="line">                flag = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> mp[new_s12] = <span class="literal">true</span>;</span><br><span class="line">            num++;</span><br><span class="line">            s1 = new_s12.substr(<span class="number">0</span>,C); s2 = new_s12.substr(C,C);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cnt++ &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (flag?<span class="number">-1</span>:num) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="POJ-3414-Pots"><a href="#POJ-3414-Pots" class="headerlink" title="POJ 3414 Pots"></a><a href="https://vjudge.net/problem/POJ-3414" rel="external nofollow noreferrer"><strong>POJ 3414</strong></a> Pots</h3><h3 id="FZU-2150-Fire-Game"><a href="#FZU-2150-Fire-Game" class="headerlink" title="FZU 2150 Fire Game"></a><a href="https://vjudge.net/problem/FZU-2150" rel="external nofollow noreferrer"><strong>FZU 2150</strong></a> Fire Game</h3><h3 id="UVA-11624-Fire"><a href="#UVA-11624-Fire" class="headerlink" title="UVA 11624 Fire!"></a><a href="https://vjudge.net/problem/UVA-11624" rel="external nofollow noreferrer"><strong>UVA 11624</strong></a> Fire!</h3><h3 id="POJ-3984-迷宫问题"><a href="#POJ-3984-迷宫问题" class="headerlink" title="POJ 3984 迷宫问题"></a><a href="https://vjudge.net/problem/POJ-3984" rel="external nofollow noreferrer"><strong>POJ 3984</strong></a> 迷宫问题</h3><h3 id="HDU-1241-Oil-Deposits"><a href="#HDU-1241-Oil-Deposits" class="headerlink" title="HDU 1241 Oil Deposits"></a><a href="https://vjudge.net/problem/HDU-1241" rel="external nofollow noreferrer"><strong>HDU 1241</strong></a> Oil Deposits</h3><h3 id="HDU-1495-非常可乐"><a href="#HDU-1495-非常可乐" class="headerlink" title="HDU 1495 非常可乐"></a><a href="https://vjudge.net/problem/HDU-1495" rel="external nofollow noreferrer"><strong>HDU 1495</strong></a> 非常可乐</h3><h3 id="HDU-2612-Find-a-way"><a href="#HDU-2612-Find-a-way" class="headerlink" title="HDU 2612 Find a way"></a><a href="https://vjudge.net/problem/HDU-2612" rel="external nofollow noreferrer"><strong>HDU 2612</strong></a> Find a way</h3>]]></content>
      
      
      <categories>
          
          <category> ACM-邝斌专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bfs </tag>
            
            <tag> 邝斌专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用日常</title>
      <link href="//Git-everyday/"/>
      <url>//Git-everyday/</url>
      
        <content type="html"><![CDATA[<h3 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h3><blockquote><p>2019-06-19 今天不小心把我们的安卓大作业搞坏了，需要把这次push的撤销了，就是回滚到上一次的。</p></blockquote><p><code>git reset --hard HEAD^ git push origin master -f</code>就是这个代码。</p><img data-src="/images/git/jianshu.jpg"/><h3 id="本地clone后修改并提交"><a href="#本地clone后修改并提交" class="headerlink" title="本地clone后修改并提交"></a>本地clone后修改并提交</h3><blockquote><p>前提是本机连接你的GitHub了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1, git clone url &#x2F;&#x2F;将repo克隆的当前路径</span><br><span class="line">2, 进行一些修改</span><br><span class="line">3, git add .</span><br><span class="line">4, git commit -m update</span><br><span class="line">5, git push origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-查找</title>
      <link href="//Sophomore/data-structure-search/"/>
      <url>//Sophomore/data-structure-search/</url>
      
        <content type="html"><![CDATA[<ul><li>折半搜索与二叉搜索树的时间性能（ <font color="red">C</font> ）<ul><li>A. 相同     B. 完全不同    C.有时不相同    D.数量级都是$O(log_2n)$</li><li>二叉搜索树也叫二叉排序树，含有n个结点的二叉排序树的AVG(Average Search Length)和树的形态有关。当先后插入的关键字有序时，构成的二叉排序树蜕变为单支树。树的深度为n，其AVG为$\frac{n+1}{2}$（和顺序查找相同），这是最差的情况。显然，最好的情况是，二叉排序树的形态和折半查找的判定树相似，其平均查找长度和$log_2n$成正比。可以证明，就平均而言，二叉排序树的AVG仍然和$log_2n$是同数量级的。</li></ul></li><li>有一个表长为m的散列表，初始状态为空，现将n（n&lt;m）个不同的关键码插入到散列表中，解决冲突的方法是用线性探测法。如果这n个关键码的散列地址都相同，则探测的总次数是$ \frac{n(n-1)}{2}$。</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大二-数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验报告</title>
      <link href="//Sophomore/data-structure-experimental-report/"/>
      <url>//Sophomore/data-structure-experimental-report/</url>
      
        <content type="html"><![CDATA[<p>右边👉是实验报告文档&rarr;<a href="https://download.csdn.net/download/intmainhhh/11238539" rel="external nofollow noreferrer">📖</a></p><h2 id="实验一-顺序表的操作"><a href="#实验一-顺序表的操作" class="headerlink" title="实验一  顺序表的操作"></a>实验一  顺序表的操作</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElemType int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType* elem;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="function">Status <span class="title">ClearList</span><span class="params">(SqList &amp;L)</span></span>;<span class="comment">//清空</span></span><br><span class="line"><span class="function">Status <span class="title">ListEmpty</span><span class="params">(SqList L)</span></span>;<span class="comment">//判断是否为空</span></span><br><span class="line"><span class="function">Status <span class="title">GetElem</span><span class="params">(SqList L,<span class="keyword">int</span> i,ElemType&amp; e)</span></span>;<span class="comment">//获取表中第i位的元素</span></span><br><span class="line"><span class="function">Status <span class="title">ListLength</span><span class="params">(SqList L)</span></span>;<span class="comment">//求线性表的长度</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> i,ElemType e)</span></span>;<span class="comment">//在线性表指定位置插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>   <span class="title">ShowList</span><span class="params">(SqList L)</span></span>;<span class="comment">//显示线性表所有元素</span></span><br><span class="line"><span class="function">Status <span class="title">ListDelete</span><span class="params">(SqList&amp; L,<span class="keyword">int</span> i)</span></span>;<span class="comment">//删除线性表指定位置元素</span></span><br><span class="line"><span class="function">Status <span class="title">LocateElem</span><span class="params">(SqList L,<span class="keyword">int</span> e)</span></span>;<span class="comment">//定位第一个i出现的位置</span></span><br><span class="line"><span class="function">Status <span class="title">NextElem</span><span class="params">(SqList L,<span class="keyword">int</span> cur_e,<span class="keyword">int</span>&amp; next_e)</span></span>;<span class="comment">//求后继</span></span><br><span class="line"><span class="function">Status <span class="title">PriorElem</span><span class="params">(SqList L,<span class="keyword">int</span> cur_e,<span class="keyword">int</span>&amp; pre_e)</span></span>;<span class="comment">//求前驱</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> order;</span><br><span class="line">    SqList L;</span><br><span class="line">    <span class="keyword">if</span>(InitList(L))&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;初始化成功!\n&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;初始化失败!\n&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Menu***********************************\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1---(清空) 清空线性表\n&quot;</span>;             <span class="comment">//ClearList(&amp;L)</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2---(判空) 判断线性表是否为空\n&quot;</span>;      <span class="comment">//ListEmpty(L)</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3---(求长) 求线性表长度\n&quot;</span>;           <span class="comment">//ListLength(L)</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;4---(获取) 获取线性表指定位置元素\n&quot;</span>;   <span class="comment">//GetElem()</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;5---求前驱\n&quot;</span>;                 <span class="comment">//PriorElem(L,cur_e,&amp;pre_e)</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;6---求后继\n&quot;</span>;                 <span class="comment">//NextElem(L,cur_e,&amp;next_e)</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;7---(插入) 在线性表指定位置插入元素\n&quot;</span>;  <span class="comment">//ListInsert(&amp;L,i,e)</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;8---(删除) 删除线性表指定位置元素\n&quot;</span>;    <span class="comment">//ListDelete(&amp;L,i)</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;9---显示线性表\n&quot;</span>;              <span class="comment">//ShowList(L)</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;10--定位\n&quot;</span>;                   <span class="comment">//LocateElem(L,e)</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;11--求两个集合的交集,并集和差集\n&quot;</span>;<span class="comment">//</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;    退出，输入一个负数！\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Menu***********************************\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入操作代码：&quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; order;</span><br><span class="line">        <span class="keyword">if</span> (order &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        ElemType e,cur_e,pre_e,next_e;</span><br><span class="line">        <span class="keyword">switch</span> (order) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; (ClearList(L) ? <span class="string">&quot;清空成功!\n&quot;</span> : <span class="string">&quot;清空失败!\n&quot;</span>);</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;线性表长度为:&quot;</span> &lt;&lt; ListLength(L) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; (ListEmpty(L) ? <span class="string">&quot;线性表为空\n&quot;</span> : <span class="string">&quot;线性表不为空\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;线性表长度为:&quot;</span> &lt;&lt; ListLength(L) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要获取第几位元素:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">                <span class="keyword">if</span> (GetElem(L, i, e))</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;位元素是:&quot;</span> &lt;&lt; e &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;位元素不存在!\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入你要求谁的前驱:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;cur_e;</span><br><span class="line">                <span class="keyword">if</span>(PriorElem(L,cur_e,pre_e)) <span class="built_in">cout</span>&lt;&lt;cur_e&lt;&lt;<span class="string">&quot;的前驱是:&quot;</span>&lt;&lt;pre_e&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;该元素不存在或者没有前驱\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入你要求谁的后继:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;cur_e;</span><br><span class="line">                <span class="keyword">if</span>(NextElem(L,cur_e,next_e)) <span class="built_in">cout</span>&lt;&lt;cur_e&lt;&lt;<span class="string">&quot;的后继是:&quot;</span>&lt;&lt;next_e&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;该元素不存在或者没有后继\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入插入位置:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入插入数据:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; e;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; (ListInsert(L, i, e) ? <span class="string">&quot;插入成功!\n&quot;</span> : <span class="string">&quot;插入失败!\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入你要删除的位置:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; (ListDelete(L, i) ? <span class="string">&quot;删除成功!\n&quot;</span> : <span class="string">&quot;删除失败!\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                ShowList(L);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入你要定位的元素:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;e;</span><br><span class="line">                <span class="keyword">if</span>(LocateElem(L,e)) <span class="built_in">cout</span>&lt;&lt;e&lt;&lt;<span class="string">&quot;的位置是&quot;</span>&lt;&lt;LocateElem(L,e)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;不存在\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                SqList A,B;</span><br><span class="line">                InitList(A);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                    ListInsert(A,i+<span class="number">1</span>,i+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;已经生成了A,&quot;</span>;</span><br><span class="line">                ShowList(A);</span><br><span class="line">                InitList(B);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                    ListInsert(B,i+<span class="number">1</span>,i+<span class="number">6</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;已经生成了集合B,&quot;</span>;</span><br><span class="line">                ShowList(B);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;A和B的交集是:&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.length;i++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;B.length;j++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(A.elem[i]==B.elem[j])&#123;</span><br><span class="line">                            <span class="built_in">cout</span>&lt;&lt;A.elem[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\nA和B的并集是:&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.length;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(LocateElem(B,A.elem[i])) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;A.elem[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.length;i++)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;B.elem[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\nA和B的差集如下:\n&quot;</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;    A-B=&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.length;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(LocateElem(B,A.elem[i])) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;A.elem[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n    B-A=&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.length;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(LocateElem(A,B.elem[i])) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;B.elem[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入命令错误！&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;按回车键继续....&quot;</span>;</span><br><span class="line">        getchar();getchar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    L.elem=<span class="keyword">new</span> ElemType[MAXSIZE];</span><br><span class="line">    <span class="keyword">if</span>(!L.elem) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    L.length=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ClearList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    L.length=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ListEmpty</span><span class="params">(SqList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (!L.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">GetElem</span><span class="params">(SqList L,<span class="keyword">int</span> i,ElemType&amp; e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;=<span class="number">0</span>||i&gt;L.length) <span class="keyword">return</span> ERROR;</span><br><span class="line">    e=L.elem[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ListLength</span><span class="params">(SqList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> L.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> i,ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;=<span class="number">0</span>||i&gt;L.length+<span class="number">1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(L.length==MAXSIZE) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=L.length<span class="number">-1</span>;j&gt;=i<span class="number">-1</span>;j--)&#123;</span><br><span class="line">        L.elem[j+<span class="number">1</span>]=L.elem[j];</span><br><span class="line">    &#125;</span><br><span class="line">    L.elem[i<span class="number">-1</span>]=e;</span><br><span class="line">    L.length++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowList</span><span class="params">(SqList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ListEmpty(L)) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;线性表为空!\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;线性表元素为:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;L.elem[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ListDelete</span><span class="params">(SqList&amp; L,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;=<span class="number">0</span>||i&gt;L.length) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;L.length;j++)&#123;</span><br><span class="line">        L.elem[i<span class="number">-1</span>]=L.elem[i];</span><br><span class="line">    &#125;</span><br><span class="line">    L.length--;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">LocateElem</span><span class="params">(SqList L,<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(L.elem[i]==e) <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">PriorElem</span><span class="params">(SqList L,<span class="keyword">int</span> cur_e,<span class="keyword">int</span> &amp;pre_e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=LocateElem(L,cur_e);</span><br><span class="line">    <span class="keyword">if</span>(ret&amp;&amp;ret!=<span class="number">1</span>)&#123;</span><br><span class="line">        pre_e=L.elem[ret<span class="number">-2</span>];</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">NextElem</span><span class="params">(SqList L,<span class="keyword">int</span> cur_e,<span class="keyword">int</span> &amp;next_e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=LocateElem(L,cur_e);</span><br><span class="line">    <span class="keyword">if</span>(ret&amp;&amp;ret!=L.length)&#123;</span><br><span class="line">        next_e=L.elem[ret];</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验二-单链表的操作"><a href="#实验二-单链表的操作" class="headerlink" title="实验二 单链表的操作"></a>实验二 单链表的操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElemType int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    LNode* next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>;<span class="comment">//单链表的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList_H</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> n)</span></span>;<span class="comment">//前插法创建单链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList_R</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> n)</span></span>;<span class="comment">//后插法创建单链表</span></span><br><span class="line"><span class="function">LNode* <span class="title">LocateElem</span><span class="params">(LinkList L,ElemType e)</span></span>;<span class="comment">//定位单链表中的元素位置</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i,ElemType e)</span></span>;<span class="comment">//插入元素</span></span><br><span class="line"><span class="function">Status <span class="title">ListDelete</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i)</span></span>;<span class="comment">//删除元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowList</span><span class="params">(LinkList L)</span></span>;<span class="comment">//显示链表内容</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(LinkList A,LinkList B,LinkList &amp;C)</span></span>;<span class="comment">//合并两个单链表</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList L;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;pyai\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0----初始化创建空的单链表\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;1----前插法创建单链表插入n个元素\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;2----后插法创建单链表插入n个元素\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;3----查找单链表\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;4----插入单链表\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;5----删除单链表\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;6----两个有序单链表的归并运算\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;7----显示单链表所有元素\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;输入负数退出\n&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> order,i,e,n;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入你要执行的操作:&quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;order;</span><br><span class="line">        <span class="keyword">if</span>(order&lt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">switch</span>(order)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span>(InitList(L)) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;初始化成功!\n&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;初始化失败!\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入你要建的链表长度n和n个内容:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">                CreateList_H(L,n);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入你要建的链表长度n和n个内容:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">                CreateList_R(L,n);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入你需要查找的元素:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;e;</span><br><span class="line">                <span class="keyword">if</span>(LocateElem(L,e)) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;元素&quot;</span>&lt;&lt;e&lt;&lt;<span class="string">&quot;的位置在&quot;</span>&lt;&lt;LocateElem(L,e)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;该元素不在链表中!\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入你要插入的位置和插入的元素(空格隔开):&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;i&gt;&gt;e;</span><br><span class="line">                ListInsert(L,i,e);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入你要删除元素的位置:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;i;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;(ListDelete(L,i)?<span class="string">&quot;删除成功!\n&quot;</span>:<span class="string">&quot;删除失败!\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                LinkList A,B,C;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;首先建立两个有序的单链表A和B\n&quot;</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入A的长度n和n个内容:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">                CreateList_R(A,n);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入B的长度n和n个内容:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">                CreateList_R(B,n);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;已经建立好单链表A和B\n&quot;</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;建立好的表分别如下:\n&quot;</span>;</span><br><span class="line">                InitList(C);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;A&quot;</span>; ShowList(A);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;B&quot;</span>; ShowList(B);</span><br><span class="line">                Merge(A,B,C);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;合并以后的&quot;</span>;</span><br><span class="line">                ShowList(C);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                ShowList(L);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;输入指令错误!\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;按回车键继续...\n&quot;</span>;</span><br><span class="line">        getchar();</span><br><span class="line">        getchar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    L=<span class="keyword">new</span> LNode;</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList_H</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//逆序位输入n个元素的值,建立带表头结点的单链表</span></span><br><span class="line">    L=<span class="keyword">new</span> LNode;</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        LNode* p=<span class="keyword">new</span> LNode;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p-&gt;data;</span><br><span class="line">        p-&gt;next=L-&gt;next;</span><br><span class="line">        L-&gt;next=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList_R</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//正位序输入n个元素的值,建立带表头节点的单链表</span></span><br><span class="line">    L=<span class="keyword">new</span> LNode;</span><br><span class="line">    LNode* r=L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        LNode* p=<span class="keyword">new</span> LNode;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p-&gt;data;</span><br><span class="line">        p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        r-&gt;next=p;</span><br><span class="line">        r=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LNode *<span class="title">LocateElem</span><span class="params">(LinkList L,ElemType e)</span></span>&#123;</span><br><span class="line">    LNode* p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;p-&gt;data!=e)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i,ElemType e)</span></span>&#123;</span><br><span class="line">    LNode* p=L;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p||j&gt;i<span class="number">-1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">    LNode* s=<span class="keyword">new</span> LNode;</span><br><span class="line">    s-&gt;data=e;</span><br><span class="line">    s-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=s;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ListDelete</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    LNode* p=L;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!(p-&gt;next)||j&gt;i<span class="number">-1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">    LNode* q=p-&gt;next;</span><br><span class="line">    p-&gt;next=q-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span>(q);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowList</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    LNode* p=L;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;链表为空\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;链表内容为:&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(LinkList A,LinkList B,LinkList &amp;C)</span></span>&#123;</span><br><span class="line">    LNode* pa=A-&gt;next;</span><br><span class="line">    LNode* pb=B-&gt;next;</span><br><span class="line">    C=A;</span><br><span class="line">    LNode* pc=C;</span><br><span class="line">    <span class="keyword">while</span>(pa&amp;&amp;pb)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pa-&gt;data&lt;=pb-&gt;data)&#123;</span><br><span class="line">            pc-&gt;next=pa;</span><br><span class="line">            pc=pa;</span><br><span class="line">            pa=pa-&gt;next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pc-&gt;next=pb;</span><br><span class="line">            pc=pb;</span><br><span class="line">            pb=pb-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    pc-&gt;next=pa?pa:pb;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验三-栈和队列的操作"><a href="#实验三-栈和队列的操作" class="headerlink" title="实验三 栈和队列的操作"></a>实验三 栈和队列的操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SElemType int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QElemType int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">///--------------栈操作部分--------------///</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    SElemType *base;</span><br><span class="line">    SElemType *top;</span><br><span class="line">    <span class="keyword">int</span> stackSize;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span>&#123;</span></span><br><span class="line">    SElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;StackNode,*LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span>&#123;</span><br><span class="line">    S.base=<span class="keyword">new</span> SElemType[MAXSIZE];</span><br><span class="line">    <span class="keyword">if</span>(!S.base) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    S.top=S.base;</span><br><span class="line">    S.stackSize=MAXSIZE;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(LinkStack &amp;S)</span></span>&#123;</span><br><span class="line">    S=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">SElemType <span class="title">GetTop</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.base!=S.top)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;栈顶元素为:&quot;</span>&lt;&lt;*(S.top<span class="number">-1</span>)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;栈为空\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">SElemType <span class="title">GetTop</span><span class="params">(LinkStack S,SElemType &amp;e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        e=S-&gt;data;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqStack &amp;S,SElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top-S.base==S.stackSize) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;栈已满，入栈失败!\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    *S.top++=e;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;入栈成功!\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(LinkStack S,SElemType e)</span></span>&#123;</span><br><span class="line">    StackNode* p=<span class="keyword">new</span> StackNode;</span><br><span class="line">    p-&gt;data=e;</span><br><span class="line">    p-&gt;next=S;</span><br><span class="line">    S=p;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack &amp;S,SElemType &amp;e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==S.base)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;栈为空，出栈失败!\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    e=*--S.top;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;出栈元素为:&quot;</span>&lt;&lt;e&lt;&lt;<span class="string">&quot;.\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(LinkStack S,SElemType &amp;e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;栈为空，出栈失败!\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    e=S-&gt;data;</span><br><span class="line">    StackNode* p=<span class="keyword">new</span> StackNode;</span><br><span class="line">    p=S;</span><br><span class="line">    S=S-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;出栈元素为:&quot;</span>&lt;&lt;e&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///-----------队列部分--------------///</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    QElemType *base;</span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">&#125;SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span></span><br><span class="line">    QElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;QNode,*QueuePtr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    QueuePtr front;</span><br><span class="line">    QueuePtr rear;</span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    Q.base=<span class="keyword">new</span> QElemType[MAXSIZE];</span><br><span class="line">    <span class="keyword">if</span>(!Q.base) <span class="keyword">return</span> OVERFLOW;</span><br><span class="line">    Q.front=Q.rear=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    Q.front=Q.rear=<span class="keyword">new</span> QNode;</span><br><span class="line">    Q.front-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">GetHead</span><span class="params">(SqQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;队列为空\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;队头元素为:&quot;</span>&lt;&lt;Q.base[Q.front]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">QElemType <span class="title">GetHead</span><span class="params">(LinkQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;队列为空\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;队头元素为:&quot;</span>&lt;&lt;Q.front-&gt;next-&gt;data&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q,QElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%MAXSIZE==Q.front)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;队列已满\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    Q.base[Q.rear]=e;</span><br><span class="line">    Q.rear=(Q.rear+<span class="number">1</span>)%MAXSIZE;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;入队成功\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q,QElemType e)</span></span>&#123;</span><br><span class="line">    QueuePtr p=<span class="keyword">new</span> QNode;</span><br><span class="line">    p-&gt;data=e;</span><br><span class="line">    p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    Q.rear-&gt;next=p;</span><br><span class="line">    Q.rear=p;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;入队成功\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;队列为空\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    Q.front=(Q.front+<span class="number">1</span>)%MAXSIZE;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;出队成功\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;队列为空\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    QueuePtr p=Q.front-&gt;next;</span><br><span class="line">    Q.front-&gt;next=p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(Q.rear==p) Q.rear=Q.front;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;出队成功\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqStack S1;</span><br><span class="line">    LinkStack S2;</span><br><span class="line">    SElemType Se;</span><br><span class="line"></span><br><span class="line">    SqQueue Q1;</span><br><span class="line">    LinkQueue Q2;</span><br><span class="line">    QElemType Qe;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> order;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;1:建栈（顺序表）\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;2:取栈顶元素（顺序表）\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;3:入栈（顺序表）\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;4:出栈（顺序表）\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;5:建栈（链表）\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;6:取栈顶元素（链表）\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;7:入栈（链表）\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;8:出栈（链表）\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;9:建队列（顺序表）\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;10:取队头元素（顺序表）\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;11:入队（顺序表）\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;12:出队（顺序表）\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;13:建队列（链表）\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;14:取队头元素（链表）\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;15:入队（链表）\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;16:出队（链表）\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;输入负数---退出\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;order;</span><br><span class="line">        <span class="keyword">if</span>(order&lt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">switch</span> (order)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                InitStack(S1);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                GetTop(S1);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;输入你想入栈的元素:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;Se;</span><br><span class="line">                Push(S1,Se);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                Pop(S1,Se);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                InitStack(S2);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">if</span>(GetTop(S2,Se))&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;栈顶元素为:&quot;</span>&lt;&lt;Se&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;栈为空!\n&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;输入你想入栈的元素:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;Se;</span><br><span class="line">                Push(S2,Se);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                Pop(S2,Se);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                InitQueue(Q1);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                GetHead(Q1);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;输入你想入队的元素:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;Qe;</span><br><span class="line">                EnQueue(Q1,Qe);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                DeQueue(Q1);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">                InitQueue(Q2);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">                GetHead(Q2);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;输入你想入队的元素:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;Qe;</span><br><span class="line">                EnQueue(Q2,Qe);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                DeQueue(Q2);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;输入指令有误，请重新输入\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验四-二叉树和哈夫曼编码"><a href="#实验四-二叉树和哈夫曼编码" class="headerlink" title="实验四 二叉树和哈夫曼编码"></a>实验四 二叉树和哈夫曼编码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TElemType char</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    TElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatBiTree</span><span class="params">(BiTree &amp;T)</span></span>&#123;<span class="comment">//先序递归建树</span></span><br><span class="line">    <span class="keyword">char</span> ch;<span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">&#x27;#&#x27;</span>) T=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        T=<span class="keyword">new</span> BiTNode;</span><br><span class="line">        T-&gt;data=ch;</span><br><span class="line">        CreatBiTree(T-&gt;lchild);</span><br><span class="line">        CreatBiTree(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(BiTree T)</span></span>&#123;<span class="comment">//先序递归遍历</span></span><br><span class="line">    <span class="keyword">if</span>(T)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;T-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        PreOrderTraverse(T-&gt;lchild);</span><br><span class="line">        PreOrderTraverse(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T)</span></span>&#123;<span class="comment">//中序递归遍历</span></span><br><span class="line">    <span class="keyword">if</span>(T)&#123;</span><br><span class="line">        InOrderTraverse(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;T-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        InOrderTraverse(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(BiTree T)</span></span>&#123;<span class="comment">//后序递归遍历</span></span><br><span class="line">    <span class="keyword">if</span>(T)&#123;</span><br><span class="line">        PostOrderTraverse(T-&gt;lchild);</span><br><span class="line">        PostOrderTraverse(T-&gt;rchild);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;T-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrderTraverse</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;BiTNode*&gt;qu;</span><br><span class="line">    <span class="keyword">if</span>(T) qu.push(T);</span><br><span class="line">    <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">        BiTNode *cur=qu.front();</span><br><span class="line">        qu.pop();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;cur-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;lchild) qu.push(cur-&gt;lchild);</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;rchild) qu.push(cur-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> max(Depth(T-&gt;lchild)+<span class="number">1</span>,Depth(T-&gt;rchild)+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LeafNodeCount</span><span class="params">(BiTree T,<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;BiTNode*&gt;qu;<span class="comment">//这个最好自己实现一个队列，很简单，我下一个的队列是自己直接在函数里面实现了一个。</span></span><br><span class="line">    <span class="keyword">if</span>(T) qu.push(T);</span><br><span class="line">    <span class="keyword">else</span> cnt++;</span><br><span class="line">    <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">        BiTNode* cur=qu.front();</span><br><span class="line">        qu.pop();</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;lchild) qu.push(cur-&gt;lchild);</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;rchild) qu.push(cur-&gt;rchild);</span><br><span class="line">        <span class="keyword">if</span>(!(cur-&gt;lchild||cur-&gt;rchild)) cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Leaf</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;lchild==<span class="literal">NULL</span>&amp;&amp;T-&gt;rchild==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> Leaf(T-&gt;lchild)+Leaf(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse2</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTNode*&gt;st;<span class="comment">//最好自己实现。</span></span><br><span class="line">    BiTNode* p=T,q;</span><br><span class="line">    <span class="keyword">while</span>(p||!st.empty())&#123;</span><br><span class="line">        <span class="keyword">if</span>(p)&#123;</span><br><span class="line">            st.push(p);</span><br><span class="line">            p=p-&gt;lchild;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p=(st.top())-&gt;rchild;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;(st.top())-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            st.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-----------------下面是哈夫曼树部分-------------------</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> weight;                 <span class="comment">//结点的权值</span></span><br><span class="line">    <span class="keyword">int</span> parent,lchild,rchild;   <span class="comment">//结点的双亲，左孩子，右孩子的下标</span></span><br><span class="line">&#125;HTNode,*HuffmanTree;           <span class="comment">//动态分配数组存储哈夫曼树</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> **HuffmanCode;     <span class="comment">//动态分配数组存储哈夫曼编码表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Select</span><span class="params">(HuffmanTree HT,<span class="keyword">int</span> r,<span class="keyword">int</span> &amp;s1,<span class="keyword">int</span> &amp;s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min_weight=INT_MAX;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(HT[i].weight&lt;=min_weight&amp;&amp;HT[i].parent==<span class="number">0</span>)&#123;</span><br><span class="line">            s1=i;</span><br><span class="line">            min_weight=HT[i].weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    min_weight=INT_MAX;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==s1) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(HT[i].weight&lt;=min_weight&amp;&amp;HT[i].parent==<span class="number">0</span>)&#123;</span><br><span class="line">            s2=i;</span><br><span class="line">            min_weight=HT[i].weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHuffmanTree</span><span class="params">(HuffmanTree &amp;HT,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> m=<span class="number">2</span>*n<span class="number">-1</span>;</span><br><span class="line">    HT=<span class="keyword">new</span> HTNode[m+<span class="number">1</span>];<span class="comment">//0号不用</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        HT[i].parent=<span class="number">0</span>;HT[i].lchild=<span class="number">0</span>;HT[i].rchild=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;HT[i].weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> s1,s2;</span><br><span class="line">        Select(HT,i<span class="number">-1</span>,s1,s2);</span><br><span class="line">        HT[s1].parent=i;HT[s2].parent=i;</span><br><span class="line">        HT[i].lchild=s1;HT[i].rchild=s2;</span><br><span class="line">        HT[i].weight=HT[s1].weight+HT[s2].weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatHuffmanCode</span><span class="params">(HuffmanTree HT,HuffmanCode &amp;HC,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    HC=<span class="keyword">new</span> <span class="keyword">char</span>*[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">char</span> *cd=<span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line">    cd[n<span class="number">-1</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> start=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> c=i,f=HT[i].parent;<span class="comment">//c is cur</span></span><br><span class="line">        <span class="keyword">while</span>(f!=<span class="number">0</span>)&#123;</span><br><span class="line">            --start;</span><br><span class="line">            <span class="keyword">if</span>(HT[f].lchild==c) cd[start]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span> cd[start]=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            c=f;</span><br><span class="line">            f=HT[f].parent;</span><br><span class="line">        &#125;</span><br><span class="line">        HC[i]=<span class="keyword">new</span> <span class="keyword">char</span>[n-start];</span><br><span class="line">        <span class="built_in">strcpy</span>(HC[i],&amp;cd[start]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] cd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;pyai\n&quot;</span>;</span><br><span class="line">    BiTree T;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;前序遍历建树，请输入节点信息:&quot;</span>;</span><br><span class="line">    CreatBiTree(T);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">&quot;前序遍历:&quot;</span>;</span><br><span class="line">    PreOrderTraverse(T);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">&quot;中序递归遍历:&quot;</span>;</span><br><span class="line">    InOrderTraverse(T);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">&quot;中序非递归遍历:&quot;</span>;</span><br><span class="line">    InOrderTraverse2(T);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">&quot;后序遍历:&quot;</span>;</span><br><span class="line">    PostOrderTraverse(T);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">&quot;层序遍历:&quot;</span>;</span><br><span class="line">    LevelOrderTraverse(T);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">&quot;深度:&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;Depth(T);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">&quot;非递归求叶子个数:&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;Leaf(T);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">&quot;递归求叶子个数:&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;LeafNodeCount(T,<span class="number">0</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;下面是哈夫曼树部分--------------------------\n&quot;</span>;</span><br><span class="line">    HuffmanTree HT;</span><br><span class="line">    HuffmanCode HC;</span><br><span class="line">    <span class="keyword">char</span> Hfstring[<span class="number">30</span>];</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;*****************************************************\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;***   1,输入HuffmanTree的参数                     ***\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;***   2,初始化HuffmanTree参数.(含有26字母及空格)   ***\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;***   3,创建HuffmanTree和编码表.                ***\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;***   4,输出编码表                             ***\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;***   5,输入编码,并翻译为字符.                    ***\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;***   6,输入字符,并实现转码.                       ***\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;***   7,退出.                                     ***\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;*****************************************************\n&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> order,cur;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;order&amp;&amp;order!=<span class="number">7</span>)&#123;</span><br><span class="line">        <span class="keyword">switch</span> (order)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入参数:&quot;</span>;</span><br><span class="line">                <span class="comment">//64 13 22 32 103 21 15 47 57 1 5 32 20 57 63 15 1 48 51 80 23 8 18 1 16 1 168</span></span><br><span class="line">                CreateHuffmanTree(HT,<span class="number">27</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                CreateHuffmanTree(HT,<span class="number">27</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                CreatHuffmanCode(HT,HC,<span class="number">27</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;编码表如下:\n&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;(<span class="keyword">char</span>)(<span class="string">&#x27;a&#x27;</span>+i<span class="number">-1</span>)&lt;&lt;<span class="string">&quot; : &quot;</span>&lt;&lt;HC[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="string">&quot; : &quot;</span>&lt;&lt;HC[<span class="number">27</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入一段编码:&quot;</span>;</span><br><span class="line">                getchar();</span><br><span class="line">                getline(<span class="built_in">cin</span>,str);</span><br><span class="line">                cur=<span class="number">2</span>*<span class="number">27</span><span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(str[i]==<span class="string">&#x27;0&#x27;</span>) cur=HT[cur].lchild;</span><br><span class="line">                    <span class="keyword">else</span> cur=HT[cur].rchild;</span><br><span class="line">                    <span class="keyword">if</span>(HT[cur].lchild==<span class="number">0</span>&amp;&amp;HT[cur].rchild==<span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(cur==<span class="number">27</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;(<span class="keyword">char</span>)(<span class="string">&#x27;a&#x27;</span>+cur<span class="number">-1</span>);</span><br><span class="line">                        cur=<span class="number">2</span>*<span class="number">27</span><span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="comment">//i love you</span></span><br><span class="line">                <span class="comment">//01111111010010011100000010111100011100100001</span></span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入一段字符:&quot;</span>;</span><br><span class="line">                getchar();</span><br><span class="line">                getline(<span class="built_in">cin</span>,str);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;str.length()&lt;&lt;<span class="string">&quot;len\n&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">isalpha</span>(str[i])) <span class="built_in">cout</span>&lt;&lt;HC[(str[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>)];</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;HC[<span class="number">27</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;您输入的命令有误.\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验五-图的操作"><a href="#实验五-图的操作" class="headerlink" title="实验五 图的操作"></a>实验五 图的操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="comment">/********************下面是邻接矩阵********************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxInt 32767</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MVNum 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VerTexType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ArcType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    VerTexType vexs[MVNum];     <span class="comment">//顶点表</span></span><br><span class="line">    ArcType arcs[MVNum][MVNum]; <span class="comment">//邻接矩阵</span></span><br><span class="line">    <span class="keyword">int</span> vexnum,arcnum;          <span class="comment">//图的当前点数和边数</span></span><br><span class="line">&#125;AMGraph;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVex</span><span class="params">(AMGraph G,VerTexType v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> idx=<span class="number">-1</span>;<span class="comment">//返回-1就是没找到</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(G.vexs[i]==v) idx=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">CreatUDN</span><span class="params">(AMGraph &amp;G)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;G.vexnum&gt;&gt;G.arcnum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;G.vexs[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;G.vexnum;++j)&#123;</span><br><span class="line">            G.arcs[i][j]=MaxInt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    VerTexType v1,v2;</span><br><span class="line">    ArcType w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.arcnum;++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;v1&gt;&gt;v2&gt;&gt;w; </span><br><span class="line">        <span class="keyword">int</span> idx1=LocateVex(G,v1),idx2=LocateVex(G,v2);</span><br><span class="line">        <span class="keyword">if</span>(idx1==<span class="number">-1</span>||idx2==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;error!\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        G.arcs[idx1][idx2]=G.arcs[idx2][idx1]=w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> visited[MVNum];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initVis</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MVNum;++i)&#123;</span><br><span class="line">        visited[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(AMGraph G,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;G.vexs[v]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    visited[v]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(G.arcs[v][i]!=MaxInt&amp;&amp;!visited[i]) DFS(G,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QElemType int</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(AMGraph G,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">        QElemType *base;</span><br><span class="line">        <span class="keyword">int</span> front,rear;</span><br><span class="line">    &#125;SqQueue;</span><br><span class="line">    <span class="comment">//初始化SqQueue</span></span><br><span class="line">    SqQueue Q;</span><br><span class="line">    Q.base=<span class="keyword">new</span> QElemType[MVNum];</span><br><span class="line">    <span class="keyword">if</span>(!Q.base) <span class="keyword">return</span>;</span><br><span class="line">    Q.front=Q.rear=<span class="number">0</span>;<span class="comment">//头指针等于尾指针，队列为空</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%MVNum==Q.front)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;队列满了！&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Q.base[Q.rear]=v;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;G.vexs[Q.base[Q.rear]]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        visited[Q.base[Q.rear]]=<span class="literal">true</span>;</span><br><span class="line">        Q.rear=(Q.rear+<span class="number">1</span>)%MVNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(Q.rear!=Q.front)&#123;</span><br><span class="line">        <span class="keyword">int</span> e=Q.base[Q.front];</span><br><span class="line">        Q.front=(Q.front+<span class="number">1</span>)%MVNum;<span class="comment">//出队</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[i]&amp;&amp;G.arcs[e][i]!=MaxInt)&#123;<span class="comment">//入队</span></span><br><span class="line">                visited[i]=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%MVNum==Q.front)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;队列满了！&quot;</span>;</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;   </span><br><span class="line">                    Q.base[Q.rear]=i;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;G.vexs[Q.base[Q.rear]]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                    Q.rear=(Q.rear+<span class="number">1</span>)%MVNum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> S[MVNum];<span class="comment">//已求出最短路径的顶点集</span></span><br><span class="line"><span class="keyword">int</span> D[MVNum];</span><br><span class="line"><span class="keyword">int</span> Path[MVNum];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShortestPath_DIJ</span><span class="params">(AMGraph G,<span class="keyword">int</span> v0)</span></span>&#123;</span><br><span class="line">    <span class="comment">//用Dijkstra算法求有向网</span></span><br><span class="line">    <span class="keyword">int</span> n=G.vexnum;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">for</span>(v=<span class="number">0</span>;v&lt;n;++v)&#123;</span><br><span class="line">        S[v]=<span class="literal">false</span>;</span><br><span class="line">        D[v]=G.arcs[v0][v];</span><br><span class="line">        <span class="keyword">if</span>(D[v]&lt;MaxInt) Path[v]=v0;</span><br><span class="line">        <span class="keyword">else</span> Path[v]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    S[v0]=<span class="literal">true</span>;</span><br><span class="line">    D[v0]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> min=MaxInt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">0</span>;w&lt;n;++w)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!S[w]&amp;&amp;D[w]&lt;min)&#123;</span><br><span class="line">                v=w;</span><br><span class="line">                min=D[w];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        S[v]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">0</span>;w&lt;n;++w)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!S[w]&amp;&amp;(D[v]+G.arcs[v][w]&lt;D[w]))&#123;</span><br><span class="line">                D[w]=D[v]+G.arcs[v][w];</span><br><span class="line">                Path[w]=v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//****************下面是邻接表建图**********</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>&#123;</span><span class="comment">//边结点</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">nextarc</span>;</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span>&#123;</span><span class="comment">//顶点信息</span></span><br><span class="line">    VerTexType data;</span><br><span class="line">    ArcNode *firstarc;</span><br><span class="line">&#125;VNode,AdjList[MVNum];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    AdjList vertices;</span><br><span class="line">    <span class="keyword">int</span> vexnum,arcnum;</span><br><span class="line">&#125;ALGraph;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">CreatUDG</span><span class="params">(ALGraph &amp;G)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;G.vexnum&gt;&gt;G.arcnum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;G.vertices[i].data;</span><br><span class="line">        G.vertices[i].firstarc=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;G.arcnum;++k)&#123;</span><br><span class="line">        <span class="keyword">int</span> v1,v2;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;v1&gt;&gt;v2;</span><br><span class="line">        <span class="keyword">int</span> idx1,idx2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(G.vertices[i].data==v1)&#123;</span><br><span class="line">                idx1=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(G.vertices[i].data==v2)&#123;</span><br><span class="line">                idx2=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ArcNode* p1=<span class="keyword">new</span> ArcNode;</span><br><span class="line">        p1-&gt;adjvex=idx2;</span><br><span class="line">        p1-&gt;nextarc=G.vertices[idx1].firstarc;</span><br><span class="line">        G.vertices[idx1].firstarc=p1;</span><br><span class="line">        ArcNode* p2=<span class="keyword">new</span> ArcNode;</span><br><span class="line">        p2-&gt;adjvex=idx1;</span><br><span class="line">        p2-&gt;nextarc=G.vertices[idx2].firstarc;</span><br><span class="line">        G.vertices[idx2].firstarc=p2;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="comment">/*测试样例</span></span><br><span class="line"><span class="comment">    5 5</span></span><br><span class="line"><span class="comment">    a b c d e</span></span><br><span class="line"><span class="comment">    a b 1</span></span><br><span class="line"><span class="comment">    a c 2</span></span><br><span class="line"><span class="comment">    b d 3</span></span><br><span class="line"><span class="comment">    c d 4</span></span><br><span class="line"><span class="comment">    d e 5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AMGraph G;<span class="comment">//假设可能不联通</span></span><br><span class="line">    ALGraph GL;</span><br><span class="line">    CreatUDN(G);<span class="comment">//生成无向图</span></span><br><span class="line">    initVis();<span class="comment">//初始化visited数组</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;DFS: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i]) DFS(G,i);<span class="comment">//dfs</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    initVis();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;BFS: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i]) BFS(G,i);<span class="comment">//dfs</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    ShortestPath_DIJ(G,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;源点为0的最短路径如下\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;G.vexnum;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;G.vexs[<span class="number">0</span>]&lt;&lt;<span class="string">&quot; -&gt; &quot;</span>&lt;&lt;G.vexs[i]&lt;&lt;<span class="string">&quot; ,length = &quot;</span>&lt;&lt;D[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验六-查找和排序"><a href="#实验六-查找和排序" class="headerlink" title="实验六 查找和排序"></a>实验六 查找和排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    KeyType key;</span><br><span class="line">&#125;ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType *R;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SSTable;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initSSTable</span><span class="params">(SSTable &amp;ST)</span></span>&#123;</span><br><span class="line">    ST.R=(ElemType *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType)*MAXSIZE);</span><br><span class="line">    ST.length=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">        ST.R[i].key=i;</span><br><span class="line">        ST.length++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search_Bin</span><span class="params">(SSTable ST,KeyType key,<span class="keyword">int</span> &amp;cnt,<span class="keyword">int</span> &amp;idx)</span></span>&#123;<span class="comment">//Sequential Search Table</span></span><br><span class="line">    <span class="keyword">int</span> low=<span class="number">1</span>,high=ST.length;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(ST.R[mid].key==key)&#123;</span><br><span class="line">            idx=mid;</span><br><span class="line">            <span class="keyword">return</span> OK;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ST.R[mid].key&lt;key) low=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> high=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/////// 二叉排序树部分</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    KeyType key;</span><br><span class="line">&#125;treeElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span>&#123;</span></span><br><span class="line">    treeElemType data;</span><br><span class="line">    BSTNode *lchild,*rchild;</span><br><span class="line">&#125;BSTNode,*BSTree;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertBST</span><span class="params">(BSTree &amp;T,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;data.key&gt;=num) InsertBST(T-&gt;lchild,num);</span><br><span class="line">        <span class="keyword">else</span> InsertBST(T-&gt;rchild,num);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        BSTNode* S=<span class="keyword">new</span> BSTNode;</span><br><span class="line">        S-&gt;data.key=num;</span><br><span class="line">        S-&gt;lchild=S-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">        T=S;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BSTree <span class="title">SearchBST</span><span class="params">(BSTree T,KeyType key,<span class="keyword">int</span> &amp;cnt)</span></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="keyword">if</span>(!T||T-&gt;data.key==key) &#123;</span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;data.key&lt;key) <span class="keyword">return</span> SearchBST(T-&gt;rchild,key,cnt);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> SearchBST(T-&gt;lchild,key,cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BSTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T)&#123;</span><br><span class="line">        InOrderTraverse(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;T-&gt;data.key&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        InOrderTraverse(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// int flag=true,last=0;//last设为比最小值还小的值</span></span><br><span class="line"><span class="comment">// bool InOrderTraverse1(BSTree T)&#123;//中序递归遍历</span></span><br><span class="line"><span class="comment">//     if(T&amp;&amp;flag)&#123;</span></span><br><span class="line"><span class="comment">//         InOrderTraverse1(T-&gt;lchild);</span></span><br><span class="line"><span class="comment">//         if(T-&gt;data.key&lt;=last)&#123;</span></span><br><span class="line"><span class="comment">//             flag=false;//不是BST</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         last=T-&gt;data.key;//更新last</span></span><br><span class="line"><span class="comment">//         InOrderTraverse1(T-&gt;rchild);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     return flag;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////排序算法部分</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *elem;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    L.elem=<span class="keyword">new</span> <span class="keyword">int</span>[MAXSIZE];</span><br><span class="line">    <span class="keyword">if</span>(!L.elem) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    L.length=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;输入待排序数据个数:&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> n,num;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;输入每一个数:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">        L.elem[i+<span class="number">1</span>]=num;</span><br><span class="line">        L.length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TraverseList</span><span class="params">(SqList L)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;线性表数据为:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=L.length;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;L.elem[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    L.elem[<span class="number">0</span>]=L.elem[low];      <span class="comment">//将子表的第一个记录当作枢轴记录</span></span><br><span class="line">    <span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;L.elem[high]&gt;=L.elem[<span class="number">0</span>]) --high;</span><br><span class="line">        L.elem[low]=L.elem[high];</span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;L.elem[low]&lt;=L.elem[<span class="number">0</span>]) ++low;</span><br><span class="line">        L.elem[high]=L.elem[low];</span><br><span class="line">    &#125;</span><br><span class="line">    L.elem[low]=L.elem[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QSort</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">        <span class="keyword">int</span> pivotloc=Partition(L,low,high);</span><br><span class="line">        QSort(L,low,pivotloc<span class="number">-1</span>);</span><br><span class="line">        QSort(L,pivotloc+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    QSort(L,<span class="number">1</span>,L.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> R[],<span class="keyword">int</span> T[],<span class="keyword">int</span> low,<span class="keyword">int</span> mid,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=low,j=mid+<span class="number">1</span>,k=low;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=high)&#123;</span><br><span class="line">        <span class="keyword">if</span>(R[i]&lt;=R[j]) T[k++]=R[i++];</span><br><span class="line">        <span class="keyword">else</span> T[k++]=R[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid) T[k++]=R[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=high) T[k++]=R[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MSort</span><span class="params">(<span class="keyword">int</span> R[],<span class="keyword">int</span> T[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *S=<span class="keyword">new</span> <span class="keyword">int</span>[MAXSIZE];</span><br><span class="line">    <span class="keyword">if</span>(low==high) T[low]=R[low];</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">        MSort(R,S,low,mid);</span><br><span class="line">        MSort(R,S,mid+<span class="number">1</span>,high);</span><br><span class="line">        Merge(S,T,low,mid,high);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> []S;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    MSort(L.elem,L.elem,<span class="number">1</span>,L.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        SSTable ST;</span><br><span class="line">        BSTree T;</span><br><span class="line">        SqList L;</span><br><span class="line">        <span class="keyword">int</span> key,cnt=<span class="number">0</span>,idx=<span class="number">0</span>,order=<span class="number">0</span>,n,num;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;**    pyai    ********************\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;**    1.初始化顺序表,自动添加[1:100]一百个数据  **\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;**    2.显示数据表内容  **\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;**    3.输入你要查找的数并返回在线性表中的查找结果  **\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;**    4.初始化二叉排序树,并添加数据     **\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;**    5.显示二叉排序树的数据  **\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;**    6.输入你要查找的数并返回在二叉排序树中结点的指针  **\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;**    7.输入待排序数的个数和分别都是几    **\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;**    8.输出你输入的线性表   **\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;**    9,快速排序刚才的线性表  **\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;**    10,归并排序刚才的线性表  **\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;**    -1,退出  **\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;****\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;输入命令:&quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;order;</span><br><span class="line">        <span class="keyword">if</span>(order==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">switch</span>(order)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                initSSTable(ST);<span class="comment">//已经初始化进去100个数据[1,2,3,...,100],下标从1开始</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ST.length;i++)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;ST.R[i].key&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入你要查找哪个数:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;key;</span><br><span class="line">                <span class="keyword">if</span>(Search_Bin(ST,key,cnt,idx))&#123;<span class="comment">//如果没找到则返回ERROR并且idx=0</span></span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;查找成功,查找次数:&quot;</span>&lt;&lt;cnt&lt;&lt;<span class="string">&quot;,下标:&quot;</span>&lt;&lt;idx&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;查找失败\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;你要在二叉排序树插入几个数:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;输入你要插入的所有数据&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">                    InsertBST(T,num);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="comment">//中序遍历输出元素值</span></span><br><span class="line">                InOrderTraverse(T);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入你要查找哪个数:&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;key;</span><br><span class="line">                <span class="keyword">if</span>(SearchBST(T,key,cnt)!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;查找成功,查找次数:&quot;</span>&lt;&lt;cnt&lt;&lt;<span class="string">&quot;,指针为:&quot;</span>&lt;&lt;T&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;查找失败\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                InitList(L);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                TraverseList(L);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                QuickSort(L);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                MergeSort(L);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大二-数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 实验报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo上的写作技巧</title>
      <link href="//How-to-write-on-hexo/"/>
      <url>//How-to-write-on-hexo/</url>
      
        <content type="html"><![CDATA[<p><strong>因为MarkDown内嵌html，所以：</strong></p><ul><li><p>带颜色的字体：<code>&lt;font color=green&gt;这是绿色的&lt;/font&gt;</code><font color=green>这是绿色的</font></p></li><li><p>下面是带背景色的<code>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=orange&gt;这是一行一列orange&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code></p><table><tr><td bgcolor=orange>背景色是：orange</td></tr></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td bgcolor&#x3D;red&gt;背景色是：red&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td bgcolor&#x3D;green&gt;背景色是：green&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td bgcolor&#x3D;blue&gt;背景色是：blue&lt;&#x2F;td&gt;</span><br><span class="line">  &lt;&#x2F;tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">  &lt;td bgcolor&#x3D;gray&gt;背景色是：grat&lt;&#x2F;td&gt;</span><br><span class="line">  &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure></li></ul><table>    <tr>      <td bgcolor=red>背景色是：red</td>      <td bgcolor=green>背景色是：green</td>      <td bgcolor=blue>背景色是：blue</td>    </tr>    <tr>        <td bgcolor=gray>背景色是：grat</td>    </tr>  </table><ul><li><code>&lt;strong style=&quot;background:#5cb85c;color:white;border-radius:10px;padding:1px 3px&quot;&gt;Easy&lt;/strong&gt;</code><strong style="background:#5cb85c;color:white;border-radius:10px;padding:1px 3px">Easy</strong></li><li><code>\frac&#123;a&#125;&#123;x&#125;</code>是$\frac{a}{x}$ ，其中的<code>frac</code>是<code>fraction</code>分数的意思。</li><li>This is my first blog.<br>设置图片大小<code>&lt;img src=&quot;网址&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;</code></li></ul><marquee width="100%" direction="right" height="100px">This is a sample scrolling text that has scrolls in the upper direction.</marquee><p><marquee behavior="scroll" direction="up" scrollamount="1">太难了。。。</marquee><br><marquee behavior="scroll" direction="right" scrollamount="12">太难了。。。</marquee><br><marquee behavior="scroll" direction="left" scrollamount="20">太难了。。。</marquee><br><marquee behavior="scroll" direction="right" scrollamount="50">太难了。。。</marquee></p><ul><li><code>&lt;mark&gt;mark&lt;/mark&gt;</code><ul><li><mark>mark</mark></li></ul></li></ul><blockquote><p>左右箭头</p></blockquote><p>⇐⇐ <code>\Leftarrow</code></p><p>⇒⇒ <code>\Rightarrow</code></p><p>⟸⟸ <code>\Longleftarrow</code></p><p>⟹⟹ <code>\Longrightarrow</code></p><blockquote><p>一些符号</p></blockquote><p><del>组合数: $C_n^m$ <code>C_n^m</code></del> 经大佬指正，LaTeX 里组合数标准用法是 <code>\binom</code>)</p><p>组合数: $\binom{n}{m}$ <code>\binom&#123;n&#125;&#123;m&#125;</code> </p><p><del>中划线:</del><code>~~中划线~~</code></p><p>求和:$\sum_{i=1}^{n}$ <code>\sum_&#123;i=1&#125;^&#123;n&#125;</code></p><p>连乘:$\prod_{i=1}^{n}i$<code>\prod_&#123;i=1&#125;^&#123;n&#125;i</code></p><p>除法:$\frac{gg}{zz}$ <code>\frac&#123;gg&#125;&#123;zz&#125;</code></p><p>$\dfrac{gg}{zz}$ <code>\dfrac&#123;gg&#125;&#123;zz&#125;</code> 推荐用这个写除法..字母会比上面那个大一点</p><p>$\mu$ <code>\mu</code></p><p>${a,b,c}$ <code>\&#123;a,b,c\&#125;</code></p><p>点乘<code>a \cdot b</code> $a \cdot b$</p><p>叉乘<code>a \times b</code> $a \times b$</p><p>除以<code>a \div b</code> $a \div b$</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  #include&lt;iostream&gt;</span><br><span class="line">  using namespace std;</span><br><span class="line">  int main()&#123;</span><br><span class="line"><span class="addition">+  cout&lt;&lt;&quot;hello\n&quot;;</span></span><br><span class="line"><span class="deletion">-     return 0;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>麦克斯韦方程组</p></blockquote><p>$$<br>\begin{eqnarray}<br>\nabla\cdot\vec{E} &amp;=&amp; \frac{\rho}{\epsilon_0} \\<br>\nabla\cdot\vec{B} &amp;=&amp; 0 \\<br>\nabla\times\vec{E} &amp;=&amp; -\frac{\partial B}{\partial t} \\<br>\nabla\times\vec{B} &amp;=&amp; \mu_0\left(\vec{J}+\epsilon_0\frac{\partial E}{\partial t} \right)<br>\end{eqnarray}<br>$$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;Code&lt;&#x2F;summary&gt;</span><br><span class="line">code</span><br><span class="line">&lt;&#x2F;details&gt;</span><br></pre></td></tr></table></figure><details><summary>Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;hello\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><div class="note default"><p>default 提示块标签</p></div><div class="note primary"><p>primary 提示块标签</p></div><div class="note success"><p>success 提示块标签</p></div><div class="note info"><p>info 提示块标签</p></div><div class="note warning"><p>warning 提示块标签</p></div><div class="note danger"><p>danger 提示块标签</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">blah blah blah</blockquote><blockquote class="blockquote-center"><p>人生乃是一面镜子，<br>从镜子里认识自己，<br>我要称之为头等大事，<br>也只是我们追求的目的！</p></blockquote><p>矩阵 <a href="https://math-linux.com/latex-26/faq/latex-faq/article/how-to-write-matrices-in-latex-matrix-pmatrix-bmatrix-vmatrix-vmatrix" rel="external nofollow noreferrer">🔗</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">S&#x3D;</span><br><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line">x_&#123;11&#125; &amp; x_&#123;12&#125;  &amp; \cdots   &amp; x_&#123;1m&#125;   \\\\</span><br><span class="line">x_&#123;21&#125; &amp; x_&#123;22&#125;  &amp; \cdots   &amp; x_&#123;2m&#125;  \\\\</span><br><span class="line">\vdots &amp; \vdots  &amp; \ddots   &amp; \vdots  \\\\</span><br><span class="line">x_&#123;n1&#125; &amp; x_&#123;n2&#125;  &amp; \cdots\  &amp; x_&#123;nm&#125;  \\\\</span><br><span class="line">\end&#123;bmatrix&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>$$<br>S=<br>\begin{bmatrix}<br>x_{11} &amp; x_{12}  &amp; \cdots   &amp; x_{1m}   \\<br>x_{21} &amp; x_{22}  &amp; \cdots   &amp; x_{2m}  \\<br>\vdots &amp; \vdots  &amp; \ddots   &amp; \vdots  \\<br>x_{n1} &amp; x_{n2}  &amp; \cdots\  &amp; x_{nm}  \\<br>\end{bmatrix}<br>$$</p><p>显示一组图片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% grouppicture [group]-[layout] %&#125;&#123;% endgrouppicture %&#125;</span><br><span class="line">&#123;% gp [group]-[layout] %&#125;&#123;% endgp %&#125;</span><br><span class="line"></span><br><span class="line">[group]  : Total number of pictures to add in the group.</span><br><span class="line">[layout] : Default picture under the group to show.</span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gp 3-1 %&#125;</span><br><span class="line">  ![](https:&#x2F;&#x2F;pyai.top&#x2F;images&#x2F;avatar.jpg)</span><br><span class="line">  ![](https:&#x2F;&#x2F;pyai.top&#x2F;images&#x2F;avatar.jpg)</span><br><span class="line">  ![](https:&#x2F;&#x2F;pyai.top&#x2F;images&#x2F;avatar.jpg)</span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://pyai.top/images/avatar.jpg"></div><div class="group-picture-column"><img data-src="https://pyai.top/images/avatar.jpg"></div><div class="group-picture-column"><img data-src="https://pyai.top/images/avatar.jpg"></div></div></div>]]></content>
      
      
      <categories>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
            <tag> 技巧 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的ACM模版</title>
      <link href="//my-ACM-template/"/>
      <url>//my-ACM-template/</url>
      
        <content type="html"><![CDATA[<h3 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h3><h4 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">10000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> x[maxm], y[maxn];<span class="comment">// x: 模式串 y: 主串</span></span><br><span class="line"><span class="keyword">int</span> m, n;<span class="comment">//m: len(x) n: len(y)</span></span><br><span class="line"><span class="keyword">int</span> Next[maxm];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kmp_pre</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    j = Next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; m)&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">-1</span> != j &amp;&amp; x[i] != x[j]) j = Next[j];</span><br><span class="line">        Next[++i] = ++j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP_Count</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    kmp_pre();</span><br><span class="line">    i = j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">-1</span> != j &amp;&amp; y[i] != x[j]) j = Next[j];</span><br><span class="line">        i++; j++;</span><br><span class="line">        <span class="keyword">if</span>(j &gt;= m)&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            j = Next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="e-KMP"><a href="#e-KMP" class="headerlink" title="e-KMP"></a>e-KMP</h4><h4 id="Manacher"><a href="#Manacher" class="headerlink" title="Manacher"></a>Manacher</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求最长回文子串</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110010</span>;</span><br><span class="line"><span class="keyword">char</span> Ma[MAXN*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> Mp[MAXN*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manacher</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    Ma[l++] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">    Ma[l++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">        Ma[l++] = s[i];</span><br><span class="line">        Ma[l++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Ma[l] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">0</span>, id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;l; i++)&#123;</span><br><span class="line">        Mp[i] = mx&gt;i?min(Mp[<span class="number">2</span>*id-i],mx-i):<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(Ma[i+Mp[i]]==Ma[i-Mp[i]]) Mp[i]++;</span><br><span class="line">        <span class="keyword">if</span>(i+Mp[i]&gt;mx)&#123;</span><br><span class="line">            mx = i + Mp[i];</span><br><span class="line">            id = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">abaaba</span></span><br><span class="line"><span class="comment">i:        0 1 2 3 4 5 6 7 8 9 10 11 12 13</span></span><br><span class="line"><span class="comment">Ma[i]:    $ # a # b # a # a # b  #  a  #</span></span><br><span class="line"><span class="comment">Mp[i]:    1 1 2 1 4 1 2 7 2 1 4  1  2  1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">char</span> s[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s)==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> len = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(s);</span><br><span class="line">        Manacher(s, len);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>*len+<span class="number">2</span>; i++)&#123;</span><br><span class="line">            ans = max(ans, Mp[i]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Aho-Corasick-自动机"><a href="#Aho-Corasick-自动机" class="headerlink" title="Aho-Corasick 自动机"></a>Aho-Corasick 自动机</h4><blockquote><p>example: HDU 2222: 求目标串中出现了几个模式串</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>区间不同字串个数是模版题，可用 字符串 hash，后缀数组，后缀自动机的任何一个求解。</p><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><h4 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h4><h4 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">mi</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line">    a%=mod;</span><br><span class="line">    <span class="keyword">while</span> (b)&#123;</span><br><span class="line">        <span class="keyword">if</span> (b&amp;<span class="number">1</span>)</span><br><span class="line">            ans=ans*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速乘"><a href="#快速乘" class="headerlink" title="快速乘"></a>快速乘</h4><p>快速乘法（用于long long的值相乘对p取模，防止相乘溢出，将乘改成加即可）</p><blockquote><p>一般是结合快速幂处理long long的数据使用</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="function">LL <span class="title">multiply</span><span class="params">(LL x,LL y,LL p)</span></span>&#123;</span><br><span class="line">    LL ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ret=(ret+x)%p;</span><br><span class="line">        x=(x+x)%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h4><h4 id="分解质因数"><a href="#分解质因数" class="headerlink" title="分解质因数"></a>分解质因数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dec</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">            p.push_back(i);</span><br><span class="line">            <span class="keyword">while</span>(n%i==<span class="number">0</span>) n/=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">1</span>) p.push_back(n);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="二叉索引树（树状数组）"><a href="#二叉索引树（树状数组）" class="headerlink" title="二叉索引树（树状数组）"></a>二叉索引树（树状数组）</h4><blockquote><p>对一个 n 个元素的数组 $A_1、 A_2、\cdots,A_n$ ，可以执行以下两种操作。</p><ul><li>Add(x, d)操作：让 $A_x$ 增加 d。</li><li>Query(L, R)：计算 $A_L+A_{L+1}+ \cdots +A_R$ 。</li></ul><blockquote><p>两种操作的时间复杂度都是 $O(logn)$ 。</p></blockquote></blockquote><p>下面代码用到了辅助数组 C ，具体含义请看刘汝佳蓝书 $P_{195}$ </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;(-x));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> C[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        ret += C[x]; x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt;= n)&#123;</span><br><span class="line">        C[x] += d; x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A = &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"><span class="comment">Add(2, 10)</span></span><br><span class="line"><span class="comment">Add(3, 2)</span></span><br><span class="line"><span class="comment">Query(1, 4)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// example: </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">memset</span>(C, <span class="number">0</span>, <span class="keyword">sizeof</span> C);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)&#123;</span><br><span class="line">        add(i, i);<span class="comment">//init</span></span><br><span class="line">    &#125;</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line">    add(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum(<span class="number">4</span>) - sum(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RMQ"><a href="#RMQ" class="headerlink" title="RMQ"></a>RMQ</h4><blockquote><p>解决范围最小值或最大值问题（以最大值为例）</p><p>$dp[i][j]$ 表示 从 i 开始的，长度为 $2^j$ 的一段元素的最小值，则可以用递推的方法计算出：<br>$$<br>dp[i][j] = max(dp[i][j-1],dp[i+2^{j-1}][j-1])<br>$$<br>初始化 $O(nlogn)$ ，查询 $O(1)$</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> mm[maxn];</span><br><span class="line"><span class="comment">// 初始化 RMQ，b[1:n]数组下标从 1 开始，如果从 0 开始简单修改即可</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initRMQ</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> b[])</span></span>&#123;</span><br><span class="line">    mm[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        mm[i] = ((i&amp;(i<span class="number">-1</span>)) == <span class="number">0</span>)?mm[i<span class="number">-1</span>]+<span class="number">1</span>:mm[i<span class="number">-1</span>];</span><br><span class="line">        dp[i][<span class="number">0</span>] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= mm[n]; j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span>&lt;&lt;j) - <span class="number">1</span> &lt;= n; i++)&#123;</span><br><span class="line">            dp[i][j] = max(dp[i][j<span class="number">-1</span>], dp[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询最大值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rmq</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = mm[y-x+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> max(dp[x][k], dp[y-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主席树"><a href="#主席树" class="headerlink" title="主席树"></a>主席树</h4><blockquote><ul><li>查询区间有多少不同的数</li><li>静态区间第 K 大</li><li>树上路径点权第 K 大</li><li>动态第 K 大</li></ul></blockquote><h3 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h3><h4 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h4><h4 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h4><h4 id="次小生成树"><a href="#次小生成树" class="headerlink" title="次小生成树"></a>次小生成树</h4><h4 id="割点与桥"><a href="#割点与桥" class="headerlink" title="割点与桥"></a>割点与桥</h4><h4 id="二分图匹配"><a href="#二分图匹配" class="headerlink" title="二分图匹配"></a>二分图匹配</h4><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><h4 id="Dancing-Links"><a href="#Dancing-Links" class="headerlink" title="Dancing Links"></a>Dancing Links</h4><h4 id="八数码"><a href="#八数码" class="headerlink" title="八数码"></a>八数码</h4><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><h4 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h4><h4 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h4><h3 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a>计算几何</h3><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h3 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1864" rel="external nofollow noreferrer">例题hdu1864</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//37--&gt;38行为模板</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">3000050</span>];<span class="comment">//由于每张发票不超过1000，最多30张，扩大100倍数后开这么大即可</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    <span class="keyword">int</span> sum,a,b,c,money[<span class="number">35</span>],v;</span><br><span class="line">    <span class="keyword">int</span> t,i,j,k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;t&amp;&amp;t) &#123;</span><br><span class="line">        sum = (<span class="keyword">int</span>)(x*<span class="number">100</span>);<span class="comment">//将小数化作整数处理</span></span><br><span class="line">        <span class="built_in">memset</span>(money,<span class="number">0</span>,<span class="keyword">sizeof</span>(money));</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;t; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">            a = b = c = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(k--) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot; %c:%lf&quot;</span>,&amp;ch,&amp;y);</span><br><span class="line">                v = (<span class="keyword">int</span>)(y*<span class="number">100</span>);</span><br><span class="line">                <span class="keyword">if</span>(ch == <span class="string">&#x27;A&#x27;</span> &amp;&amp; a+v&lt;=<span class="number">60000</span>)</span><br><span class="line">                    a+=v;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;B&#x27;</span> &amp;&amp; b+v&lt;=<span class="number">60000</span>)</span><br><span class="line">                    b+=v;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;C&#x27;</span> &amp;&amp; c+v&lt;=<span class="number">60000</span>)</span><br><span class="line">                    c+=v;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a+b+c&lt;=<span class="number">100000</span> &amp;&amp; a&lt;=<span class="number">60000</span> &amp;&amp; b&lt;=<span class="number">60000</span> &amp;&amp; c&lt;=<span class="number">60000</span> &amp;&amp; flag)<span class="comment">//按题意所说，必须满足这些条件</span></span><br><span class="line">                money[l++] = a+b+c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;=l; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(j = sum; j&gt;=money[i]; j--)</span><br><span class="line">                dp[j] = max(dp[j],dp[j-money[i]]+money[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;(<span class="keyword">double</span>)dp[sum]/<span class="number">100</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展kmp"><a href="#扩展kmp" class="headerlink" title="扩展kmp"></a>扩展kmp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100010</span>;   <span class="comment">//字符串长度最大值</span></span><br><span class="line"><span class="keyword">int</span> next[maxn],ex[maxn]; <span class="comment">//ex数组即为extend数组</span></span><br><span class="line"><span class="comment">//预处理计算next数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GETNEXT</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j,po,len=<span class="built_in">strlen</span>(str);</span><br><span class="line">    next[<span class="number">0</span>]=len;<span class="comment">//初始化next[0]</span></span><br><span class="line">    <span class="keyword">while</span>(str[i]==str[i+<span class="number">1</span>]&amp;&amp;i+<span class="number">1</span>&lt;len)<span class="comment">//计算next[1]</span></span><br><span class="line">    i++;</span><br><span class="line">    next[<span class="number">1</span>]=i;</span><br><span class="line">    po=<span class="number">1</span>;<span class="comment">//初始化po的位置</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(next[i-po]+i&lt;next[po]+po)<span class="comment">//第一种情况，可以直接得到next[i]的值</span></span><br><span class="line">        next[i]=next[i-po];</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//第二种情况，要继续匹配才能得到next[i]的值</span></span><br><span class="line">        &#123;</span><br><span class="line">            j=next[po]+po-i;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;<span class="number">0</span>)j=<span class="number">0</span>;<span class="comment">//如果i&gt;po+next[po],则要从头开始匹配</span></span><br><span class="line">            <span class="keyword">while</span>(i+j&lt;len&amp;&amp;str[j]==str[j+i])<span class="comment">//计算next[i]</span></span><br><span class="line">            j++;</span><br><span class="line">            next[i]=j;</span><br><span class="line">            po=i;<span class="comment">//更新po的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算extend数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXKMP</span><span class="params">(<span class="keyword">char</span> *s1,<span class="keyword">char</span> *s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j,po,len=<span class="built_in">strlen</span>(s1),l2=<span class="built_in">strlen</span>(s2);</span><br><span class="line">    GETNEXT(s2);<span class="comment">//计算子串的next数组</span></span><br><span class="line">    <span class="keyword">while</span>(s1[i]==s2[i]&amp;&amp;i&lt;l2&amp;&amp;i&lt;len)<span class="comment">//计算ex[0]</span></span><br><span class="line">    i++;</span><br><span class="line">    ex[<span class="number">0</span>]=i;</span><br><span class="line">    po=<span class="number">0</span>;<span class="comment">//初始化po的位置</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(next[i-po]+i&lt;ex[po]+po)<span class="comment">//第一种情况，直接可以得到ex[i]的值</span></span><br><span class="line">        ex[i]=next[i-po];</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//第二种情况，要继续匹配才能得到ex[i]的值</span></span><br><span class="line">        &#123;</span><br><span class="line">            j=ex[po]+po-i;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;<span class="number">0</span>)j=<span class="number">0</span>;<span class="comment">//如果i&gt;ex[po]+po则要从头开始匹配</span></span><br><span class="line">            <span class="keyword">while</span>(i+j&lt;len&amp;&amp;j&lt;l2&amp;&amp;s1[j+i]==s2[j])<span class="comment">//计算ex[i]</span></span><br><span class="line">            j++;</span><br><span class="line">            ex[i]=j;</span><br><span class="line">            po=i;<span class="comment">//更新po的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><blockquote><p>（主要是了解<font color=red>lowbit（x&amp;(-x)）</font>,设计树状数组的为了方便数组下标一般从1开始）</p></blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1166" rel="external nofollow noreferrer">例题hdu1166</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50005</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> arr[maxn];<span class="comment">///存储从0001开始</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(p&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[p]+=x;</span><br><span class="line">        p+=(p&amp;(-p));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=arr[p];</span><br><span class="line">        p-=(p&amp;(-p));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">int</span> lcount=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(arr,<span class="number">0</span>,<span class="keyword">sizeof</span> arr);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Case &quot;</span>&lt;&lt;++lcount&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">            add(i,num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s&amp;&amp;s!=<span class="string">&quot;End&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;i&gt;&gt;j;</span><br><span class="line">            <span class="keyword">if</span>(s==<span class="string">&quot;Add&quot;</span>)</span><br><span class="line">                add(i,j);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">&quot;Sub&quot;</span>)</span><br><span class="line">                add(i,-j);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">&quot;Query&quot;</span>)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;sum(j)-sum(i<span class="number">-1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="排列组合Cnm"><a href="#排列组合Cnm" class="headerlink" title="排列组合Cnm"></a>排列组合Cnm</h3><p>例题：UVA 12034 Race </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">10056</span>;</span><br><span class="line"><span class="keyword">int</span> f[N],c[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    c[<span class="number">1</span>][<span class="number">0</span>]=c[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">2</span>; i&lt;N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;=i/<span class="number">2</span>; j++)</span><br><span class="line">            c[i][j]=c[i][i-j]=(c[i<span class="number">-1</span>][j<span class="number">-1</span>]+c[i<span class="number">-1</span>][j])%mod;<span class="comment">//求Cnm</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//f[1]=1;</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;N; i++)<span class="comment">//第一名有i个人</span></span><br><span class="line">    &#123;</span><br><span class="line">        f[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i]+=c[i][j]*f[i-j];<span class="comment">//f(n)=∑C(n,i)f(n-i)</span></span><br><span class="line">            f[i]%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,n,lcount=<span class="number">0</span>;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case %d: %d\n&quot;</span>,++lcount,f[n]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="求最大公因数和最小公倍数"><a href="#求最大公因数和最小公倍数" class="headerlink" title="求最大公因数和最小公倍数"></a>求最大公因数和最小公倍数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span><span class="comment">///最大公因数，测试数据1e8，没有C++自带的__gcd(,)函数快</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a%b==<span class="number">0</span>)?b:gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span><span class="comment">///最小公倍数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a*b/gcd(a,b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;gcd(a,b)&lt;&lt;<span class="built_in">endl</span>&lt;&lt;lcm(a,b)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速幂-1"><a href="#快速幂-1" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">mi</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line">    a%=mod;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b&amp;<span class="number">1</span>)</span><br><span class="line">            ans=ans*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速乘-1"><a href="#快速乘-1" class="headerlink" title="快速乘"></a>快速乘</h3><p>快速乘法（用于long long的值相乘对p取模，防止相乘溢出，将乘改成加即可）</p><blockquote><p>一般是结合快速幂处理long long的数据使用</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="function">LL <span class="title">multiply</span><span class="params">(LL x,LL y,LL p)</span></span>&#123;</span><br><span class="line">    LL ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ret=(ret+x)%p;</span><br><span class="line">        x=(x+x)%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最短路-1"><a href="#最短路-1" class="headerlink" title="最短路"></a>最短路</h3><blockquote><p>Dijkstra:无堆优化版,复杂度$O(N^2)$</p></blockquote><p>Dijkstra算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2500</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;<span class="comment">//设置你认为的最长的边</span></span><br><span class="line"><span class="keyword">int</span> e[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">int</span> book[maxn];</span><br><span class="line"><span class="keyword">int</span> T,C,Ts,Te;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T&gt;&gt;C&gt;&gt;Ts&gt;&gt;Te;<span class="comment">//T个城镇,C条路,起点Ts,终点Te,,,,无向图</span></span><br><span class="line">    <span class="comment">//初始化边</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=T;j++)&#123;</span><br><span class="line">            e[i][j]=e[j][i]=(i==j?<span class="number">0</span>:inf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入边的数据</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;C;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,c;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">      <span class="keyword">if</span>(c&lt;e[a][b]) e[a][b]=e[b][a]=c;<span class="comment">//考虑重边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化起点的dis数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;i++)&#123;</span><br><span class="line">        dis[i]=e[Ts][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化已知最短路程的顶点集合(已知的标记为1)</span></span><br><span class="line">    <span class="built_in">memset</span>(book,<span class="number">0</span>,<span class="keyword">sizeof</span> book);</span><br><span class="line">    book[Ts]=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//核心部分</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> mi=inf,u;</span><br><span class="line">        <span class="comment">//找到距离起点Ts最近的顶点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=T;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(book[j]==<span class="number">0</span>&amp;&amp;dis[j]&lt;mi)&#123;</span><br><span class="line">                mi=dis[j];</span><br><span class="line">                u=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        book[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=T;v++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(e[u][v]&lt;inf&amp;&amp;!vis[v])&#123;<span class="comment">//对与u联通并且未被标记的点v进行松弛操作</span></span><br><span class="line">                <span class="keyword">if</span>(dis[v]&gt;dis[u]+e[u][v])&#123;<span class="comment">//松弛操作</span></span><br><span class="line">                    dis[v]=dis[u]+e[u][v];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dis[Te];<span class="comment">//输出到终点Te的最短路</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>堆优化版</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用优先队列优化Dijkstra</span></span><br><span class="line"><span class="comment"> * 复杂度O(ElogE)</span></span><br><span class="line"><span class="comment"> * 注意对vector&lt;Edge&gt;E[max_n]进行初始化后加边</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_n=<span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_m=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qnode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    qnode(<span class="keyword">int</span> _v=<span class="number">0</span>,<span class="keyword">int</span> _c=<span class="number">0</span>):v(_v),c(_c)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> qnode &amp;r)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c&gt;r.c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,cost;</span><br><span class="line">    Edge(<span class="keyword">int</span> _v=<span class="number">0</span>,<span class="keyword">int</span> _cost=<span class="number">0</span>):v(_v),cost(_cost)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt;E[max_n];</span><br><span class="line"><span class="keyword">bool</span> vis[max_n];</span><br><span class="line"><span class="keyword">int</span> dist[max_n];<span class="comment">//起点到各个点的最短距离</span></span><br><span class="line"><span class="comment">//点的编号从1开始</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dist[i]=INF;</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;qnode&gt;que;</span><br><span class="line">    dist[start]=<span class="number">0</span>;</span><br><span class="line">    que.push(qnode(start,<span class="number">0</span>));</span><br><span class="line">    qnode tmp;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">        tmp=que.top();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">int</span> u=tmp.v;</span><br><span class="line">        <span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;E[u].size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=E[u][i].v;</span><br><span class="line">            <span class="keyword">int</span> cost=E[u][i].cost;</span><br><span class="line">            <span class="keyword">if</span>(!vis[v]&amp;&amp;dist[v]&gt;dist[u]+cost)&#123;</span><br><span class="line">                dist[v]=dist[u]+cost;</span><br><span class="line">                que.push(qnode(v,dist[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    E[u].push_back(Edge(v,w));</span><br><span class="line">    E[v].push_back(Edge(u,w));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        addedge(a,b,c);</span><br><span class="line">    &#125;</span><br><span class="line">    Dijkstra(n,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dist[n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Dijkstra虽好，但是他不能解决带有负边权的图，下面是复杂度$O(NM)$的Bellman-Ford算法</p></blockquote><p>Bellman-Ford算法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在这里插入代码片</span><br></pre></td></tr></table></figure><h3 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> cnt;<span class="comment">//记录以此结点为前缀的单词的个数</span></span><br><span class="line">    Trie* letter[<span class="number">26</span>];<span class="comment">//26个字母</span></span><br><span class="line">    Trie()&#123;</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(letter,<span class="number">0</span>,<span class="keyword">sizeof</span> letter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;root;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertTrie</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">    Trie* p=&amp;root;</span><br><span class="line">    <span class="keyword">int</span> len=str.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> lett=str[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;letter[lett]==<span class="number">0</span>) p-&gt;letter[lett]=<span class="keyword">new</span> Trie;</span><br><span class="line">        p=p-&gt;letter[lett];</span><br><span class="line">        p-&gt;cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">    Trie* p=&amp;root;</span><br><span class="line">    <span class="keyword">int</span> len=str.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> lett=str[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;letter[lett]==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> p=p-&gt;letter[lett];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">        insertTrie(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;Find(str)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求最长回文串"><a href="#求最长回文串" class="headerlink" title="求最长回文串"></a>求最长回文串</h3><p>hihocoder 1032</p><blockquote><p>中心扩展法(加了一点优化，时间复杂度 &lt; $O(N^2)$)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        str[<span class="number">0</span>]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str),tag=<span class="number">0</span>,ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;str[i];i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> s=i,t=i;</span><br><span class="line">            <span class="keyword">while</span>(str[t]==str[t+<span class="number">1</span>]) t++;</span><br><span class="line">            i=t;<span class="comment">//没有这句会超时，主要是靠这个来优化</span></span><br><span class="line">            <span class="keyword">while</span>(str[s<span class="number">-1</span>]==str[t+<span class="number">1</span>]) s--,t++;</span><br><span class="line">            ans=max(ans,t-s+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Manacher算法（马拉车算法），时间复杂度$O(N^2)$</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 求最长回文子串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110010</span>;</span><br><span class="line"><span class="keyword">char</span> Ma[MAXN*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> Mp[MAXN*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manacher</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    Ma[l++] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">    Ma[l++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">        Ma[l++] = s[i];</span><br><span class="line">        Ma[l++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Ma[l] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">0</span>, id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;l; i++)&#123;</span><br><span class="line">        Mp[i] = mx&gt;i?min(Mp[<span class="number">2</span>*id-i],mx-i):<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(Ma[i+Mp[i]]==Ma[i-Mp[i]]) Mp[i]++;</span><br><span class="line">        <span class="keyword">if</span>(i+Mp[i]&gt;mx)&#123;</span><br><span class="line">            mx = i + Mp[i];</span><br><span class="line">            id = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">abaaba</span></span><br><span class="line"><span class="comment">i:        0 1 2 3 4 5 6 7 8 9 10 11 12 13</span></span><br><span class="line"><span class="comment">Ma[i]:    $ # a # b # a # a # b  #  a  #</span></span><br><span class="line"><span class="comment">Mp[i]:    1 1 2 1 4 1 2 7 2 1 4  1  2  1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">char</span> s[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s)==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> len = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(s);</span><br><span class="line">        Manacher(s, len);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>*len+<span class="number">2</span>; i++)&#123;</span><br><span class="line">            ans = max(ans, Mp[i]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="JAVA大整数和大小数"><a href="#JAVA大整数和大小数" class="headerlink" title="JAVA大整数和大小数"></a>JAVA大整数和大小数</h3><ul><li>大整数是<code>BigInteger</code></li><li>大小数是<code>BigDecimal</code></li></ul><blockquote><p>当题目对小数精度要求高时，为了方便，可以直接使用<code>BigDecimal</code>，特别方便。</p></blockquote><ul><li>常用操作<ol><li>加:<code>add</code></li><li>减:<code>subtract</code></li><li>乘:<code>multiply</code></li><li>除:<code>divide</code></li><li>取余:<code>remainder</code></li></ol></li></ul><p>下面是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner cin=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        DecimalFormat df = <span class="keyword">new</span> DecimalFormat(<span class="string">&quot;0.000&quot;</span>);</span><br><span class="line">        BigInteger md=BigInteger.TEN;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="keyword">while</span>(cin.hasNext())&#123;</span><br><span class="line">            t=cin.nextInt();</span><br><span class="line">            <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">            BigDecimal num,pre=<span class="keyword">new</span> BigDecimal(<span class="string">&quot;0.001&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span>(t--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                num=cin.nextBigDecimal();</span><br><span class="line">                BigInteger old=num.multiply(<span class="keyword">new</span> BigDecimal(<span class="string">&quot;1000&quot;</span>)).toBigInteger();</span><br><span class="line">                <span class="keyword">int</span> last=old.remainder(md).intValue();<span class="comment">//BigInteger-&gt;int</span></span><br><span class="line">                cnt+=(last&gt;<span class="number">4</span>?(<span class="number">10</span>-last):-last);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(df.format(pre.multiply(<span class="keyword">new</span> BigDecimal(cnt))));</span><br><span class="line">        &#125;</span><br><span class="line">        cin.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最小割最大流模版"><a href="#最小割最大流模版" class="headerlink" title="最小割最大流模版"></a>最小割最大流模版</h3><p><a href="https://pyai.top/%E5%B9%B3%E6%97%B6%E5%88%B7%E9%A2%98/2019-Multi-University-Training-Contest-1/">链接🔗</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    LL from,to,cap,flow;</span><br><span class="line">    edge()&#123;&#125;</span><br><span class="line">    edge(LL from,LL to,LL cap,LL flow):from(from),to(to),cap(cap),flow(flow)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dinic</span>&#123;</span></span><br><span class="line">    LL n,m,s,t;</span><br><span class="line">    <span class="built_in">vector</span>&lt;edge&gt; edges;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; G[maxn];</span><br><span class="line">    <span class="keyword">bool</span> vis[maxn];</span><br><span class="line">    LL cur[maxn];</span><br><span class="line">    LL d[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(LL from,LL to,LL cap)</span></span>&#123;</span><br><span class="line">        edges.push_back(edge(from,to,cap,<span class="number">0</span>));</span><br><span class="line">        edges.push_back(edge(to,from,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        m=edges.size();</span><br><span class="line">        G[from].push_back(m<span class="number">-2</span>);</span><br><span class="line">        G[to].push_back(m<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        Q.push(s);</span><br><span class="line">        d[s]=<span class="number">0</span>;</span><br><span class="line">        vis[s]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line">            LL x=Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">for</span>(LL i=<span class="number">0</span>;i&lt;G[x].size();i++)&#123;</span><br><span class="line">                edge &amp;e=edges[G[x][i]];</span><br><span class="line">                <span class="keyword">if</span>(!vis[e.to]&amp;&amp;e.cap&gt;e.flow)&#123;</span><br><span class="line">                    vis[e.to]=<span class="number">1</span>;</span><br><span class="line">                    d[e.to]=d[x]+<span class="number">1</span>;</span><br><span class="line">                    Q.push(e.to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vis[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">dfs</span><span class="params">(LL x,LL a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==t||a==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">        LL flow=<span class="number">0</span>;</span><br><span class="line">        LL f;</span><br><span class="line">        <span class="keyword">for</span>(LL &amp;i=cur[x];i&lt;G[x].size();i++)&#123;</span><br><span class="line">            edge &amp;e=edges[G[x][i]];</span><br><span class="line">            <span class="keyword">if</span>((d[e.to]==d[x]+<span class="number">1</span>)&amp;&amp;(f=dfs(e.to,min(e.cap-e.flow,a)))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                e.flow+=f;</span><br><span class="line">                edges[G[x][i]^<span class="number">1</span>].flow-=f;</span><br><span class="line">                flow+=f;</span><br><span class="line">                a-=f;</span><br><span class="line">                <span class="keyword">if</span>(a==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LL <span class="title">maxflow</span><span class="params">(LL a,LL b)</span></span>&#123;</span><br><span class="line">        s=a;t=b;</span><br><span class="line">        LL flow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(bfs())&#123;</span><br><span class="line">            <span class="built_in">memset</span>(cur,<span class="number">0</span>,<span class="keyword">sizeof</span>(cur));</span><br><span class="line">            flow+=dfs(s,inf);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a,b,fa[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (fa[x]==x?x:fa[x]=find(fa[x]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    a=find(a);b=find(b);</span><br><span class="line">    <span class="keyword">if</span>(a!=b) fa[a]=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n),n)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">            merge(a,b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans+=(fa[i]==i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h3><ul><li><code>priority_queue</code>优先队列默认是大顶堆。</li></ul>]]></content>
      
      
      <categories>
          
          <category> ACM-模版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Linux/macOS命令</title>
      <link href="//Unix/LinuxOrMacOS/"/>
      <url>//Unix/LinuxOrMacOS/</url>
      
        <content type="html"><![CDATA[<h3 id="Finder"><a href="#Finder" class="headerlink" title="Finder"></a>Finder</h3><h4 id="直接进入某个路径下：command-shift-G"><a href="#直接进入某个路径下：command-shift-G" class="headerlink" title="直接进入某个路径下：command + shift + G"></a>直接进入某个路径下：<code>command</code> + <code>shift</code> + <code>G</code></h4><p>这个操作也可以在 <code>terminal</code> 中 <code>open 绝对路径</code> 来实现。</p><a id="more"></a><img data-src="/images/centos/finder-go-dir.jpg" width="60%"><p>基础操作</p><ul><li>ls(list) 查看当前文件夹下的内容</li><li>pwd(print work directory) 查看当前所在文件夹</li><li>cd [目录名] (change directory) 切换文件夹</li><li>mkdir(make directory) 创建目录</li></ul><h3 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h3><h4 id="新建文件touch"><a href="#新建文件touch" class="headerlink" title="新建文件touch"></a>新建文件touch</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch test.txt</span><br></pre></td></tr></table></figure><h4 id="删除文件-rm-remove"><a href="#删除文件-rm-remove" class="headerlink" title="删除文件 rm(remove)"></a>删除文件 rm(remove)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f 文件路径&#x2F;test.txt</span><br></pre></td></tr></table></figure><h4 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf 文件路径&#x2F;test.txt</span><br></pre></td></tr></table></figure><h4 id="快速查看文件-cat-vim"><a href="#快速查看文件-cat-vim" class="headerlink" title="快速查看文件(cat,vim)"></a>快速查看文件(cat,vim)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat test.txt(只读)</span><br><span class="line">或</span><br><span class="line">vim test.txt</span><br></pre></td></tr></table></figure><h4 id="解压rar文件（最基础的用法unrar）"><a href="#解压rar文件（最基础的用法unrar）" class="headerlink" title="解压rar文件（最基础的用法unrar）"></a>解压rar文件（最基础的用法unrar）</h4><p> (为了省下买解压软件的几十块钱而学的一个命令😄）</p><blockquote><ol><li>首先保证安装了<code>Homebrew</code></li><li>用Homebrew安装unrar: <code>brew install unrar</code></li><li>将当前路径的test.rar解压到当前路径: <code>unrar x test.rar</code></li></ol></blockquote><h4 id="tree命令"><a href="#tree命令" class="headerlink" title="tree命令"></a>tree命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首先安装tree(macos默认没有tree命令):brew install tree</span><br><span class="line">在路径下直接&#96;tree&#96;就可以显示路径下的文件树</span><br><span class="line">ps:可能会出现对于中文的乱码，解决方案是:tree -N</span><br></pre></td></tr></table></figure><h3 id="vim相关指令"><a href="#vim相关指令" class="headerlink" title="vim相关指令"></a>vim相关指令</h3><h4 id="到行首和行尾"><a href="#到行首和行尾" class="headerlink" title="到行首和行尾"></a>到行首和行尾</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shift+4($)</span><br><span class="line">shift+6(^)</span><br></pre></td></tr></table></figure><h4 id="vim指令"><a href="#vim指令" class="headerlink" title="vim指令"></a>vim指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:ww保存文件但是不退出</span><br><span class="line">:wq保存文件并退出</span><br><span class="line">:q!不保存文件并退出**</span><br></pre></td></tr></table></figure><h4 id="zsh-rarr-bash"><a href="#zsh-rarr-bash" class="headerlink" title="zsh &rarr; bash"></a>zsh &rarr; bash</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><h4 id="bash-rarr-zsh"><a href="#bash-rarr-zsh" class="headerlink" title="bash &rarr; zsh"></a>bash &rarr; zsh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s &#x2F;bin&#x2F;zsh</span><br></pre></td></tr></table></figure><h4 id="入门vim"><a href="#入门vim" class="headerlink" title="入门vim"></a>入门vim</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vimtutor</span><br></pre></td></tr></table></figure><h4 id="显示日历"><a href="#显示日历" class="headerlink" title="显示日历"></a>显示日历</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cal</span><br></pre></td></tr></table></figure><h3 id="Mac下查看已安装的jdk版本及其安装目录"><a href="#Mac下查看已安装的jdk版本及其安装目录" class="headerlink" title="Mac下查看已安装的jdk版本及其安装目录"></a>Mac下查看已安装的jdk版本及其安装目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;libexec&#x2F;java_home -V</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">➜  ~ &#x2F;usr&#x2F;libexec&#x2F;java_home -V</span><br><span class="line">Matching Java Virtual Machines (1):</span><br><span class="line">    1.8.0_201, x86_64:&quot;Java SE 8&quot;&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_201.jdk&#x2F;Contents&#x2F;Home</span><br><span class="line"></span><br><span class="line">&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_201.jdk&#x2F;Contents&#x2F;Home</span><br><span class="line">➜  ~</span><br></pre></td></tr></table></figure><h3 id="Centos7系统"><a href="#Centos7系统" class="headerlink" title="Centos7系统"></a>Centos7系统</h3><h4 id="更新package"><a href="#更新package" class="headerlink" title="更新package"></a>更新package</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><h4 id="检查是否有需要更新的package"><a href="#检查是否有需要更新的package" class="headerlink" title="检查是否有需要更新的package"></a>检查是否有需要更新的package</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum upgrade</span><br></pre></td></tr></table></figure><h4 id="编译C"><a href="#编译C" class="headerlink" title="编译C++"></a>编译C++</h4><ol><li>首先安装编译C++的工具<code>yum install gcc-c++</code></li><li>然后编译次目录下的C++文件 <code>g++ test.cpp -o test</code></li><li>运行<code>./test</code></li></ol><h4 id="监控服务器状态"><a href="#监控服务器状态" class="headerlink" title="监控服务器状态"></a>监控服务器状态</h4><ul><li><code>pip install glances</code></li><li><code>glances</code></li><li><img data-src="/images/centos/glances.jpg" alt="glances"></li></ul><h3 id="阿里云服务器平时的小操作"><a href="#阿里云服务器平时的小操作" class="headerlink" title="阿里云服务器平时的小操作"></a>阿里云服务器平时的小操作</h3><h4 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname 新主机名</span><br></pre></td></tr></table></figure><h4 id="每次连接服务器都要输入密码，怎么解决？"><a href="#每次连接服务器都要输入密码，怎么解决？" class="headerlink" title="每次连接服务器都要输入密码，怎么解决？"></a>每次连接服务器都要输入密码，怎么解决？</h4><ol><li>在服务器输入<code>ssh-keygen -t rsa -C xxxxx@gmail.com</code>(输入你的邮箱)<ol><li>提示<code>Enter file in which to save the key (/root/.ssh/id_rsa): </code>，直接回车用默认的。</li><li>接下来再两个回车，设置为空密码。</li></ol></li><li>将你本地的公钥复制到服务器的<code>/root/.ssh</code>路径下的<code>authorized_keys</code>中，没有这个文件就自己新建一个。</li><li>重启ssh服务<code>systemctl restart sshd.service</code></li></ol><h4 id="清空日志"><a href="#清空日志" class="headerlink" title="清空日志"></a>清空日志</h4><ul><li>很多情况下日志文件会特别大，因为每天都会产生很多信息，这时如果我们刚接触这种东西，大部分人会删掉日志，然后重启应用。下面三个命令可以直接清空日志文件，不必删除。(不知道为什么，我爬虫生成的日志清空以后瞬间又恢复了原来的大小。)</li></ul><ol><li><code>&gt;file.log</code>这种是最简单的方式，我都是用的这个，下面的没用过，从别的文章抄过来的。</li><li><code>echo &quot;&quot;&gt;file.log</code></li><li><code>cat /dev/null &gt; file.log</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题</title>
      <link href="//AC-everyday/leetcode-everyday/"/>
      <url>//AC-everyday/leetcode-everyday/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/" rel="external nofollow noreferrer">LeetCode</a>难度三个等级：</p><p><a style="color:black">1，简单：</a><strong style="background:#5cb85c;color:white;border-radius:10px;padding:1px 3px">Easy</strong></p><p><a style="color:black">1，中等：</a><strong style="background:#f0ad4e;color:white;border-radius:10px;padding:1px 3px">Medium</strong></p><p><a style="color:black">3，困难：</a><strong style="background:#d9534f;color:white;border-radius:10px;padding:1px 3px">Hard</strong></p><a id="more"></a><hr><blockquote><p>最近比较忙，再加上要期末考试了，暂时刷的都是<strong style="background:#5cb85c;color:white;border-radius:10px;padding:1px 3px">Easy</strong>的。</p></blockquote><div style="background:gray;height=5px;border-radius:20px"><center><font color="white">分割线</font></center></div>#### 2019-06-10<p><a href="https://leetcode.com/problems/jewels-and-stones/" rel="external nofollow noreferrer">题目链接 771. Jewels and Stones</a> <strong style="background:#5cb85c;color:white;border-radius:10px;padding:1px 3px">Easy</strong></p><blockquote><p>水题，就是求字符串$S$中有多少字母在字符串$J$中，字符串$J$中的字母各不相同。</p></blockquote><blockquote><p>代码如下:复杂度$O(S.length+J.length)$。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numJewelsInStones</span><span class="params">(<span class="built_in">string</span> J, <span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">char</span>&gt;se(J.begin(),J.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i : S) sum+=se.count(i);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Runtime: 0 ms, faster than 100.00% of C++ online submissions for Jewels and Stones.</code></p><p><code>Memory Usage: 8.6 MB, less than 56.84% of C++ online submissions for Jewels and Stones.</code></p><div style="background:gray;height=5px;border-radius:20px"><center><font color="white">分割线</font></center></div>#### 2019-06-11<p><a href="https://leetcode.com/problems/range-sum-of-bst/" rel="external nofollow noreferrer">题目链接938. Range Sum of BST</a> <strong style="background:#5cb85c;color:white;border-radius:10px;padding:1px 3px">Easy</strong></p><blockquote><p>题意就是题目的名字，给你一个建好的二叉搜索树($BST$)的根节点$root$，让你计算值位于$L$和$R$之间节点的值的和。</p></blockquote><p>$$<br>ans=\sum{node.value\ which\ L\le node.value\le R}<br>$$</p><blockquote><p>然后代码就是一个简单的后序遍历加类似于二分的剪枝。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rangeSumBST</span><span class="params">(TreeNode* root, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;val&gt;=L) sum+=rangeSumBST(root-&gt;left,L,R);</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;val&lt;=R) &#123;</span><br><span class="line">                sum+=rangeSumBST(root-&gt;right,L,R);</span><br><span class="line">                <span class="keyword">if</span>(root-&gt;val&gt;=L) sum+=root-&gt;val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Runtime: 144 ms, faster than 90.39% of C++ online submissions for Range Sum of BST.</code></p><p><code>Memory Usage: 41.3 MB, less than 41.58% of C++ online submissions for Range Sum of BST.</code></p><div style="background:gray;height=5px;border-radius:20px"><center><font color="white">分割线</font></center></div>#### 2019-06-12 23:51<p><a href="https://leetcode.com/problems/to-lower-case/" rel="external nofollow noreferrer">题目链接709. To Lower Case</a> <strong style="background:#5cb85c;color:white;border-radius:10px;padding:1px 3px">Easy</strong></p><blockquote><p>水题，简单字符串，返回全部小写的字符串。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">toLowerCase</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=str.length();</span><br><span class="line">        <span class="built_in">string</span> ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            ret.push_back(<span class="built_in">tolower</span>(str[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Runtime: 0 ms, faster than 100.00% of C++ online submissions for To Lower Case.</code></p><p><code>Memory Usage: 8.4 MB, less than 32.20% of C++ online submissions for To Lower Case.</code></p><div style="background:gray;height=5px;border-radius:20px"><center><font color="white">分割线</font></center></div>#### 2019-06-13 22:57<p><a href="https://leetcode.com/problems/remove-outermost-parentheses/" rel="external nofollow noreferrer">题目链接1021. Remove Outermost Parentheses</a> <strong style="background:#5cb85c;color:white;border-radius:10px;padding:1px 3px">Easy</strong></p><blockquote><p>题目大意就是在一堆有<code>(</code>和<code>)</code>组成的字符串中，并且这些字符串是有效的，有效的定义就是所有的括号都可以唯一配对等，具体意思看题目和样例即可理解。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">removeOuterParentheses</span><span class="params">(<span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(S[i]==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt&gt;<span class="number">0</span>) ans.push_back(S[i]);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cnt--;</span><br><span class="line">                <span class="keyword">if</span>(cnt&gt;<span class="number">0</span>) ans.push_back(S[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Runtime: 0 ms, faster than 100.00% of C++ online submissions for Remove Outermost Parentheses.</code></p><p><code>Memory Usage: 9 MB, less than 57.55% of C++ online submissions for Remove Outermost Parentheses.</code></p><div style="background:gray;height=5px;border-radius:20px"><center><font color="white">分割线</font></center></div>#### 2019-06-14 四题<p><a href="https://leetcode.com/problems/unique-morse-code-words/" rel="external nofollow noreferrer">题目链接804. Unique Morse Code Words</a> <strong style="background:#5cb85c;color:white;border-radius:10px;padding:1px 3px">Easy</strong></p><ul><li>计算机图形学实验课太没意思，刷个题吧。</li></ul><blockquote><p>就是26个小写字母每个都映射到一个摩斯代码，给你几个字符串，每个字母都换成它们对应的摩丝代码，计算摩丝代码组成新的字符串有几个是互相不同的。<code>Return the number of different transformations among all words we have.</code></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniqueMorseRepresentations</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> str[<span class="number">26</span>]=&#123;<span class="string">&quot;.-&quot;</span>,<span class="string">&quot;-...&quot;</span>,<span class="string">&quot;-.-.&quot;</span>,<span class="string">&quot;-..&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;..-.&quot;</span>,<span class="string">&quot;--.&quot;</span>,<span class="string">&quot;....&quot;</span>,<span class="string">&quot;..&quot;</span>,<span class="string">&quot;.---&quot;</span>,<span class="string">&quot;-.-&quot;</span>,<span class="string">&quot;.-..&quot;</span>,<span class="string">&quot;--&quot;</span>,<span class="string">&quot;-.&quot;</span>,<span class="string">&quot;---&quot;</span>,<span class="string">&quot;.--.&quot;</span>,<span class="string">&quot;--.-&quot;</span>,<span class="string">&quot;.-.&quot;</span>,<span class="string">&quot;...&quot;</span>,<span class="string">&quot;-&quot;</span>,<span class="string">&quot;..-&quot;</span>,<span class="string">&quot;...-&quot;</span>,<span class="string">&quot;.--&quot;</span>,<span class="string">&quot;-..-&quot;</span>,<span class="string">&quot;-.--&quot;</span>,<span class="string">&quot;--..&quot;</span>&#125;;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt;se;</span><br><span class="line">        <span class="keyword">int</span> ilen=words.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ilen;i++)&#123;</span><br><span class="line">            <span class="built_in">string</span> cur;</span><br><span class="line">            <span class="keyword">int</span> jlen=words[i].size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;jlen;j++)&#123;</span><br><span class="line">                cur.append(str[(words[i][j]-<span class="string">&#x27;a&#x27;</span>)]);</span><br><span class="line">            &#125;</span><br><span class="line">            se.insert(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> se.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Runtime: 4 ms, faster than 93.96% of C++ online submissions for Unique Morse Code Words.</code></p><p><code>Memory Usage: 9 MB, less than 70.09% of C++ online submissions for Unique Morse Code Words.</code></p><p><a href="https://leetcode.com/problems/valid-anagram/" rel="external nofollow noreferrer">题目链接 242. Valid Anagram</a><strong style="background:#5cb85c;color:white;border-radius:10px;padding:1px 3px">Easy</strong></p><blockquote><p>返回字符串$s$和$t$是否由相同的小写字母组成。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isAnagram</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">26</span>];</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i : s) a[(i-<span class="string">&#x27;a&#x27;</span>)]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i : t) a[(i-<span class="string">&#x27;a&#x27;</span>)]--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Runtime: 8 ms, faster than 98.40% of C++ online submissions for Valid Anagram.</code></p><p><code>Memory Usage: 9.4 MB, less than 54.89% of C++ online submissions forValid Anagram.</code></p><p><a href="https://leetcode.com/problems/intersection-of-two-arrays/" rel="external nofollow noreferrer">题目链接 349. Intersection of Two Arrays</a><strong style="background:#5cb85c;color:white;border-radius:10px;padding:1px 3px">Easy</strong></p><blockquote><p>返回一个去重的$vector$,里面包含$nums1$和$nums2$中相同的数字。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">intersection</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        sort(nums1.begin(),nums1.end());</span><br><span class="line">        sort(nums2.begin(),nums2.end());</span><br><span class="line">        <span class="keyword">int</span> pointer1=<span class="number">0</span>,pointer2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len1=nums1.size(),len2=nums2.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ve;</span><br><span class="line">        ve.clear();</span><br><span class="line">        <span class="keyword">while</span>(pointer1&lt;len1&amp;&amp;pointer2&lt;len2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[pointer1]==nums2[pointer2]) &#123;</span><br><span class="line">                ve.push_back(nums1[pointer1]);</span><br><span class="line">                pointer1++;</span><br><span class="line">                pointer2++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums1[pointer1]&lt;nums2[pointer2]) pointer1++;</span><br><span class="line">            <span class="keyword">else</span> pointer2++;</span><br><span class="line">        &#125;</span><br><span class="line">        ve.erase(unique(ve.begin(),ve.end()),ve.end());<span class="comment">//对vector去重</span></span><br><span class="line">        <span class="keyword">return</span> ve;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Runtime: 4 ms, faster than 99.68% of C++ online submissions for Intersection of Two Arrays.</code></p><p><code>Memory Usage: 9.1 MB, less than 83.39% of C++ online submissions forIntersection of Two Arrays.</code></p><blockquote><p>下面是别人的代码，借助了$set$。<strong>没我那个快！😄</strong></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">intersection</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ve;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt;n1(nums1.begin(),nums1.end());</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt;n2(nums2.begin(),nums2.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i : n1)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n2.count(i)) ve.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ve;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Runtime: 8 ms, faster than 90.58% of C++ online submissions for Intersection of Two Arrays.</code></p><p><code>Memory Usage: 9.8 MB, less than 10.57% of C++ online submissions forIntersection of Two Arrays.</code></p><p><a href="https://leetcode.com/problems/intersection-of-two-arrays-ii/" rel="external nofollow noreferrer">题目链接 350. Intersection of Two Arrays II</a><strong style="background:#5cb85c;color:white;border-radius:10px;padding:1px 3px">Easy</strong></p><blockquote><p>题意和上面那个一样，就是不去重了，正好把我的那代码去重那一步的<code>ve.erase(unique(ve.begin(),ve.end()),ve.end());</code>删掉就行了。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">intersect</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        sort(nums1.begin(),nums1.end());</span><br><span class="line">        sort(nums2.begin(),nums2.end());</span><br><span class="line">        <span class="keyword">int</span> pointer1=<span class="number">0</span>,pointer2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len1=nums1.size(),len2=nums2.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ve;</span><br><span class="line">        ve.clear();</span><br><span class="line">        <span class="keyword">while</span>(pointer1&lt;len1&amp;&amp;pointer2&lt;len2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[pointer1]==nums2[pointer2]) &#123;</span><br><span class="line">                ve.push_back(nums1[pointer1]);</span><br><span class="line">                pointer1++;</span><br><span class="line">                pointer2++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums1[pointer1]&lt;nums2[pointer2]) pointer1++;</span><br><span class="line">            <span class="keyword">else</span> pointer2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ve;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Runtime: 4 ms, faster than 99.72% of C++ online submissions for Intersection of Two Arrays II.</code></p><p><code>Memory Usage: 9.2 MB, less than 69.69% of C++ online submissions forIntersection of Two Arrays II.</code></p><div style="background:gray;height=5px;border-radius:20px"><center><font color="white">分割线</font></center></div>#### 2019-06-15 <blockquote><p>刚考完四级考试，作文是参观小学，翻译是灯笼🏮，很难受。</p></blockquote><p><a href="https://leetcode.com/problems/merge-two-sorted-lists/" rel="external nofollow noreferrer">题目链接 21. Merge Two Sorted Lists</a> <strong style="background:#5cb85c;color:white;border-radius:10px;padding:1px 3px">Easy</strong></p><p>就是合并两个有顺序的链表并返回。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* ret=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode* p=ret; </span><br><span class="line">        <span class="keyword">while</span>(l1&amp;&amp;l2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l2-&gt;val&lt;=l1-&gt;val)&#123;</span><br><span class="line">                p-&gt;next=l2;</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                p-&gt;next=l1;</span><br><span class="line">                l1=l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l1) p-&gt;next=l1;</span><br><span class="line">        <span class="keyword">if</span>(l2) p-&gt;next=l2;</span><br><span class="line">        <span class="keyword">return</span> ret-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Runtime: 4 ms, faster than 99.65% of C++ online submissions for Merge Two Sorted Lists.</code></p><p><code>Memory Usage: 9.1 MB, less than 47.10% of C++ online submissions forMerge Two Sorted Lists.</code></p><p><a href="https://leetcode.com/problems/powx-n/" rel="external nofollow noreferrer">题目链接 50. Pow(x, n)</a> <strong style="background:#f0ad4e;color:white;border-radius:10px;padding:1px 3px">Medium</strong></p><p>题目就是求$x^n$ 。快速幂，注意小数情况就可以了。好像有个坑点是$n$会爆$int$的上界。因为$n$的范围是$[-2^{31},2^{31}-1]$，而我的代码有一步是$n=-n$，然后如果$n=-2^{31}$就凉了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> nn=n;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(nn&lt;<span class="number">0</span>) &#123;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">            nn=-nn;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> ret=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(nn)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nn&amp;<span class="number">1</span>) ret*=x;</span><br><span class="line">            x*=x;</span><br><span class="line">            nn&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="keyword">return</span> <span class="number">1</span>/ret;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Runtime: 0 ms, faster than 100.00% of C++ online submissions for Pow(x, n).</code></p><p><code>Memory Usage: 8.3 MB, less than 70.62% of C++ online submissions forPow(x, n).</code></p><ul><li>分割线<code>&lt;div style=&quot;background:gray;height=5px;border-radius:20px&quot;&gt;&lt;center&gt;&lt;font color=&quot;white&quot;&gt;分割线&lt;/font&gt;&lt;/center&gt;&lt;/div&gt;</code></li><li><strong style="background:#5cb85c;color:white;border-radius:10px;padding:1px 3px">Easy</strong><code>&lt;strong style=&quot;background:#5cb85c;color:white;border-radius:10px;padding:1px 3px&quot;&gt;Easy&lt;/strong&gt;</code></li><li><strong style="background:#f0ad4e;color:white;border-radius:10px;padding:1px 3px">Medium</strong><code>&lt;strong style=&quot;background:#f0ad4e;color:white;border-radius:10px;padding:1px 3px&quot;&gt;Medium&lt;/strong&gt;</code></li><li><strong style="background:#d9534f;color:white;border-radius:10px;padding:1px 3px">Hard</strong><code>&lt;strong style=&quot;background:#d9534f;color:white;border-radius:10px;padding:1px 3px&quot;&gt;Hard&lt;/strong&gt;</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机图形学</title>
      <link href="//Sophomore/Computer-Graphics/"/>
      <url>//Sophomore/Computer-Graphics/</url>
      
        <content type="html"><![CDATA[<h4 id="opengl初探"><a href="#opengl初探" class="headerlink" title="opengl初探"></a>opengl初探</h4><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;GLUT/GLUT.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    glClearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);<span class="comment">//用当前背景色填充窗口</span></span><br><span class="line">    glColor3f(<span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>);<span class="comment">//h设置当前的绘图颜色为红色</span></span><br><span class="line">    glRectf(<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span>);<span class="comment">//绘制一个矩形</span></span><br><span class="line">    </span><br><span class="line">    glBegin(GL_TRIANGLES);</span><br><span class="line">    glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    glVertex2f(<span class="number">0.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">    glColor3f(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    glVertex2f(<span class="number">0.8f</span>, <span class="number">-0.5f</span>);</span><br><span class="line">    glColor3f(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">    glVertex2f(<span class="number">-0.8f</span>, <span class="number">-0.5f</span>);</span><br><span class="line">    </span><br><span class="line">    glEnd();</span><br><span class="line">    </span><br><span class="line">    glPointSize(<span class="number">3</span>);</span><br><span class="line">    glBegin(GL_POINTS);</span><br><span class="line">    glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    glVertex2f(<span class="number">-0.4f</span>, <span class="number">-0.4f</span>);</span><br><span class="line">    glColor3f(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    glVertex2f(<span class="number">0.0f</span>, <span class="number">-0.0f</span>);</span><br><span class="line">    glColor3f(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">    glVertex2f(<span class="number">0.4f</span>, <span class="number">0.4f</span>);</span><br><span class="line">    glEnd();</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glutInit(&amp;argc,argv);<span class="comment">//对GLUT库j初始化</span></span><br><span class="line">    glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);<span class="comment">//指定窗口使用单缓存和RGB颜色模型//初始化窗口的显示模式</span></span><br><span class="line">    glutInitWindowSize(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">    glutInitWindowPosition(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;pyai&quot;</span>);<span class="comment">//创建一个名为矩形的窗口</span></span><br><span class="line">    glutDisplayFunc(Display);<span class="comment">//设置当前窗口的显示回调函数</span></span><br><span class="line">    <span class="comment">//Initial();//完成窗口初始化</span></span><br><span class="line">    glutMainLoop();<span class="comment">//启动GLUT事件处理循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Win-xp锁屏动画"><a href="#Win-xp锁屏动画" class="headerlink" title="Win xp锁屏动画"></a>Win xp锁屏动画</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// win xp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;GLUT/GLUT.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">GLfloat x1=<span class="number">100.0f</span>;</span><br><span class="line">GLfloat y1=<span class="number">150.0f</span>;</span><br><span class="line">GLsizei rsize=<span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">GLfloat xstep=<span class="number">1.0f</span>;</span><br><span class="line">GLfloat ystep=<span class="number">1.0f</span>;</span><br><span class="line"></span><br><span class="line">GLfloat windowWidth;</span><br><span class="line">GLfloat windowHeight;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RenderScene</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line">    glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    glRectf(x1, y1, x1+rsize, y1+rsize);</span><br><span class="line"></span><br><span class="line">    glutSwapBuffers();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeSize</span><span class="params">(GLsizei w,GLsizei h)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(h==<span class="number">0</span>) h=<span class="number">1</span>;</span><br><span class="line">    glViewport(<span class="number">0</span>, <span class="number">0</span>, w, h);<span class="comment">//s视区h</span></span><br><span class="line">    glMatrixMode(GL_PROJECTION);</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    <span class="keyword">if</span>(w&lt;=h)&#123;</span><br><span class="line">        windowWidth=<span class="number">250.0f</span>*h/w;</span><br><span class="line">        windowHeight=<span class="number">250.0f</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        windowWidth=<span class="number">250.0f</span>*w/h;</span><br><span class="line">        windowHeight=<span class="number">250.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修剪区</span></span><br><span class="line">    glOrtho(<span class="number">0.0f</span>, windowWidth, <span class="number">0.0f</span>, windowHeight,<span class="number">1.0f</span>, <span class="number">-1.0f</span>);</span><br><span class="line"></span><br><span class="line">    glMatrixMode(GL_MODELVIEW);</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TimerFunction</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x1&gt;windowWidth-rsize||x1&lt;<span class="number">0</span>) xstep=-xstep;</span><br><span class="line">    <span class="keyword">if</span>(y1&gt;windowHeight-rsize||y1&lt;<span class="number">0</span>) ystep=-ystep;</span><br><span class="line">    <span class="keyword">if</span>(x1&gt;windowWidth-rsize) x1=windowWidth-rsize<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(y1&gt;windowHeight-rsize) y1=windowHeight-rsize<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    x1+=xstep;</span><br><span class="line">    y1+=ystep;</span><br><span class="line"></span><br><span class="line">    glutPostRedisplay();</span><br><span class="line">    glutTimerFunc(<span class="number">33</span>, TimerFunction, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetupRC</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置窗口清除色为蓝色</span></span><br><span class="line">    glClearColor(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;Bounce&quot;</span>);</span><br><span class="line"></span><br><span class="line">    glutDisplayFunc(RenderScene);</span><br><span class="line">    glutReshapeFunc(ChangeSize);</span><br><span class="line">    glutTimerFunc(<span class="number">33</span>, TimerFunction, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SetupRC();</span></span><br><span class="line">    glutMainLoop();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="太阳地球月亮模型"><a href="#太阳地球月亮模型" class="headerlink" title="太阳地球月亮模型"></a>太阳地球月亮模型</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sun_earth_moon_model</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;GLUT/GLUT.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> day = <span class="number">200</span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">CalFrequency</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> save;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">clock_t</span> last, current;</span><br><span class="line">    <span class="keyword">double</span> timegap;</span><br><span class="line"></span><br><span class="line">    ++count;</span><br><span class="line">    <span class="keyword">if</span>( count &lt;= <span class="number">50</span> )</span><br><span class="line">        <span class="keyword">return</span> save;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">    last = current;</span><br><span class="line">    current = clock();</span><br><span class="line">    timegap = (current - last ) / (<span class="keyword">double</span>)CLOCKS_PER_SEC;</span><br><span class="line">    save = <span class="number">50.0</span> / timegap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> save;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myDisplay</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> FPS = CalFrequency();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;FPF = %f\n&quot;</span>, FPS);</span><br><span class="line"></span><br><span class="line">    glEnable(GL_DEPTH_TEST);</span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    glMatrixMode(GL_PROJECTION);</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    gluPerspective(<span class="number">75</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">400000000</span>);</span><br><span class="line">    glMatrixMode(GL_MODELVIEW);</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    gluLookAt(<span class="number">0</span>, <span class="number">-200000000</span>, <span class="number">200000000</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制红色的“太阳”</span></span><br><span class="line">    glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    glutSolidSphere(<span class="number">69600000</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制蓝色的“地球”</span></span><br><span class="line">    glColor3f(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">    glRotatef(day/<span class="number">360.0</span>*<span class="number">360.0</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">-1.0f</span>);</span><br><span class="line">    glTranslatef(<span class="number">150000000</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    glutSolidSphere(<span class="number">15945000</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制黄色的“月亮”</span></span><br><span class="line">    glColor3f(<span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    glRotatef(day/<span class="number">30.0</span>*<span class="number">360.0</span> - day/<span class="number">360.0</span>*<span class="number">360.0</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">-1.0f</span>);</span><br><span class="line">    glTranslatef(<span class="number">38000000</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    glutSolidSphere(<span class="number">4345000</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    glFlush();</span><br><span class="line"></span><br><span class="line">    glutSwapBuffers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myIdle</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++day;</span><br><span class="line">    <span class="keyword">if</span>( day &gt;= <span class="number">360</span> )</span><br><span class="line">        day = <span class="number">0</span>;</span><br><span class="line">    myDisplay();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glutInit(&amp;argc, argv);</span><br><span class="line">    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE); <span class="comment">// 修改了参数为GLUT_DOUBLE</span></span><br><span class="line">    glutInitWindowPosition(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    glutInitWindowSize(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;太阳，地球和月亮&quot;</span>);</span><br><span class="line">    glutDisplayFunc(&amp;myDisplay);</span><br><span class="line">    glutIdleFunc(&amp;myIdle);        <span class="comment">// 表示在CPU空闲的时间调用某一函数</span></span><br><span class="line">    glutMainLoop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="画线，画圆，填充区域的算法"><a href="#画线，画圆，填充区域的算法" class="headerlink" title="画线，画圆，填充区域的算法"></a>画线，画圆，填充区域的算法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;GLUT/GLUT.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m_drawmode=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//m_drawmode是绘画模式</span></span><br><span class="line"><span class="comment">//1，DDA算法a画直线</span></span><br><span class="line"><span class="comment">//2，中点Bresenham算法画直线</span></span><br><span class="line"><span class="comment">//3，改进Bresenham算法画直线</span></span><br><span class="line"><span class="comment">//4，八分法绘制圆</span></span><br><span class="line"><span class="comment">//5，区域填充</span></span><br><span class="line"><span class="keyword">int</span> m_pointnumber=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    point(<span class="keyword">int</span> x,<span class="keyword">int</span> y):x(x),y(y)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"><span class="comment">//绘制坐标线</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawCordinateLine</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//坐标线为黑色</span></span><br><span class="line">    glColor3f(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    glBegin(GL_LINES);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">10</span>;i&lt;=<span class="number">250</span>;i+=<span class="number">10</span>)&#123;</span><br><span class="line">        glVertex2f((<span class="keyword">float</span>)(i), <span class="number">0.0f</span>);</span><br><span class="line">        glVertex2f((<span class="keyword">float</span>)(i), <span class="number">250.0f</span>);</span><br><span class="line">        glVertex2f(<span class="number">0.0f</span>, (<span class="keyword">float</span>)(i));</span><br><span class="line">        glVertex2f(<span class="number">250.0f</span>, (<span class="keyword">float</span>)(i));</span><br><span class="line">    &#125;</span><br><span class="line">    glEnd();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绘制一个点，这里用一个正方形代表一个点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PutPixel</span><span class="params">(GLsizei x,GLsizei y)</span></span>&#123;</span><br><span class="line">    glRectf(<span class="number">10</span>*x, <span class="number">10</span>*y, <span class="number">10</span>*x+<span class="number">10</span>, <span class="number">10</span>*y+<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> x0,y0起点坐标</span></span><br><span class="line"><span class="comment"> x1,y1终点坐标</span></span><br><span class="line"><span class="comment"> num扫描转换时从起点开始输出的点的数目，用于动画</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DDAcreateLine</span><span class="params">(GLsizei x0,GLsizei y0,GLsizei x1,GLsizei y1,GLsizei num)</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置颜色</span></span><br><span class="line">    glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    <span class="comment">//对画线动画进行控制</span></span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;DDA画线算法：各点坐标\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="comment">//画线算法的实现</span></span><br><span class="line">    GLsizei dx,dy,epsl,k;</span><br><span class="line">    GLfloat x,y,xincre,yincre;</span><br><span class="line">    </span><br><span class="line">    dx=x1-x0;</span><br><span class="line">    dy=y1-y0;</span><br><span class="line">    x=x0;</span><br><span class="line">    y=y0;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(dx)&gt;<span class="built_in">abs</span>(dy)) epsl=<span class="built_in">abs</span>(dx);</span><br><span class="line">    <span class="keyword">else</span> epsl=<span class="built_in">abs</span>(dy);</span><br><span class="line">    </span><br><span class="line">    xincre=(<span class="keyword">float</span>)dx/epsl;</span><br><span class="line">    yincre=(<span class="keyword">float</span>)dy/epsl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;=epsl;k++)&#123;</span><br><span class="line">        PutPixel((<span class="keyword">int</span>)(x+<span class="number">0.5</span>), (<span class="keyword">int</span>)(y+<span class="number">0.5</span>));</span><br><span class="line">        <span class="keyword">if</span>(k&gt;=num<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;x=&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;,y=&quot;</span>&lt;&lt;y</span><br><span class="line">            &lt;&lt;<span class="string">&quot;;取整后&quot;</span>&lt;&lt;<span class="string">&quot;x=&quot;</span>&lt;&lt;(<span class="keyword">int</span>)(x+<span class="number">0.5</span>)</span><br><span class="line">            &lt;&lt;<span class="string">&quot;,y=&quot;</span>&lt;&lt;(<span class="keyword">int</span>)(y+<span class="number">0.5</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        x+=xincre;</span><br><span class="line">        y+=yincre;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;=<span class="number">25</span>||y&gt;=<span class="number">25</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MidBresenhamLine</span><span class="params">(GLsizei x0,GLsizei y0,GLsizei x1,GLsizei y1,GLsizei num)</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置颜色</span></span><br><span class="line">    glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;中点Bresenham算法画直线，各点及判别式的值:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="comment">//画线算法的实现</span></span><br><span class="line">    <span class="keyword">int</span> dx,dy,d,UpIncre,DownIncre,x,y;</span><br><span class="line">    <span class="keyword">if</span>(x0&gt;x1)&#123;</span><br><span class="line">        x=x1;x1=x0;x0=x;</span><br><span class="line">        y=y1;y1=y0;y0=y;</span><br><span class="line">    &#125;</span><br><span class="line">    x=x0;y=y0;</span><br><span class="line">    dx=x1-x0; dy=y1-y0; d=dx<span class="number">-2</span>*dy;</span><br><span class="line">    UpIncre=<span class="number">2</span>*dx<span class="number">-2</span>*dy; DownIncre=<span class="number">-2</span>*dy;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=x1)&#123;</span><br><span class="line">        PutPixel(x, y);</span><br><span class="line">        <span class="comment">//随便加的，不知道原理</span></span><br><span class="line">        <span class="keyword">if</span>(x&gt;=num<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;x=&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;,y=&quot;</span>&lt;&lt;y&lt;&lt;<span class="string">&quot;,d=&quot;</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        x++;</span><br><span class="line">        <span class="keyword">if</span>(d&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            y++;</span><br><span class="line">            d+=UpIncre;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            d+=DownIncre;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;=<span class="number">25</span>||y&gt;=<span class="number">25</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BresenhamLine</span><span class="params">(GLsizei x0,GLsizei y0,GLsizei x1,GLsizei y1,GLsizei num)</span></span>&#123;</span><br><span class="line">    glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;改进Bresenham算法画直线,各点及判别式的值\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> x,y,dx,dy,e;</span><br><span class="line">    dx=x1-x0;</span><br><span class="line">    dy=y1-y0;</span><br><span class="line">    e=-dx; x=x0; y=y0;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=x1)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;=num<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;x=&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;,y=&quot;</span>&lt;&lt;y&lt;&lt;<span class="string">&quot;,e=&quot;</span>&lt;&lt;e&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        PutPixel(x, y);</span><br><span class="line">        x++;</span><br><span class="line">        e=e+<span class="number">2</span>*dy;</span><br><span class="line">        <span class="keyword">if</span>(e&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            y++;</span><br><span class="line">            e=e<span class="number">-2</span>*dx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MidBresenhamCircle</span><span class="params">(GLsizei r,GLsizei num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,d;</span><br><span class="line">    glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    x=<span class="number">0</span>; y=r; d=<span class="number">1</span>-r;</span><br><span class="line">    <span class="keyword">int</span> dd=<span class="number">12</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;=num<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;x=&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;,y=&quot;</span>&lt;&lt;y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        PutPixel(x+dd, y+dd);PutPixel(y+dd, x+dd);</span><br><span class="line">        PutPixel(-y+dd, x+dd);PutPixel(-x+dd, y+dd);</span><br><span class="line">        PutPixel(-x+dd, -y+dd);PutPixel(-y+dd, -x+dd);</span><br><span class="line">        PutPixel(y+dd, -x+dd);PutPixel(x+dd, -y+dd);</span><br><span class="line">        <span class="keyword">if</span>(d&lt;<span class="number">0</span>) d+=<span class="number">2</span>*x+<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            d+=<span class="number">2</span>*(x-y)+<span class="number">5</span>;</span><br><span class="line">            y--;</span><br><span class="line">        &#125;</span><br><span class="line">        x++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Circle</span><span class="params">(GLsizei r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,d;</span><br><span class="line">    glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    x=<span class="number">0</span>; y=r; d=<span class="number">1</span>-r;</span><br><span class="line">    <span class="keyword">int</span> dd=<span class="number">12</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=y)&#123;</span><br><span class="line">        PutPixel(x+dd, y+dd);PutPixel(y+dd, x+dd);</span><br><span class="line">        PutPixel(-y+dd, x+dd);PutPixel(-x+dd, y+dd);</span><br><span class="line">        PutPixel(-x+dd, -y+dd);PutPixel(-y+dd, -x+dd);</span><br><span class="line">        PutPixel(y+dd, -x+dd);PutPixel(x+dd, -y+dd);</span><br><span class="line">        vis[x+dd][y+dd]=<span class="number">1</span>;vis[y+dd][x+dd]=<span class="number">1</span>;</span><br><span class="line">        vis[-y+dd][x+dd]=<span class="number">1</span>;vis[-x+dd][y+dd]=<span class="number">1</span>;</span><br><span class="line">        vis[-x+dd][-y+dd]=<span class="number">1</span>;vis[-y+dd][-x+dd]=<span class="number">1</span>;</span><br><span class="line">        vis[y+dd][-x+dd]=<span class="number">1</span>;vis[x+dd][-y+dd]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(d&lt;<span class="number">0</span>) d+=<span class="number">2</span>*x+<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            d+=<span class="number">2</span>*(x-y)+<span class="number">5</span>;</span><br><span class="line">            y--;</span><br><span class="line">        &#125;</span><br><span class="line">        x++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(GLsizei x,GLsizei y,GLsizei num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">    Circle(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">queue</span>&lt;point&gt;qu;</span><br><span class="line">    qu.push(point(x,y));</span><br><span class="line">    <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt&gt;=num<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        cnt++;</span><br><span class="line">        point cur=qu.front();</span><br><span class="line">        qu.pop();</span><br><span class="line">        x=cur.x;y=cur.y;</span><br><span class="line">        vis[x][y]=<span class="number">1</span>;</span><br><span class="line">        PutPixel(x,y);</span><br><span class="line">        <span class="keyword">if</span>(!vis[x][y+<span class="number">1</span>]) qu.push(point(x,y+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(!vis[x][y<span class="number">-1</span>]) qu.push(point(x,y<span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">if</span>(!vis[x+<span class="number">1</span>][y]) qu.push(point(x+<span class="number">1</span>,y));</span><br><span class="line">        <span class="keyword">if</span>(!vis[x<span class="number">-1</span>][y]) qu.push(point(x<span class="number">-1</span>,y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化窗口</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initial</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置窗口颜色为白色</span></span><br><span class="line">    glClearColor(<span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//窗口大小改变时调用的登记函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeSize</span><span class="params">(GLsizei w,GLsizei h)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(h==<span class="number">0</span>)&#123;</span><br><span class="line">        h=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置视区尺寸</span></span><br><span class="line">    glViewport(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">    <span class="comment">//重置坐标系统</span></span><br><span class="line">    glMatrixMode(GL_PROJECTION);</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    <span class="comment">//建立修剪空间的范围</span></span><br><span class="line">    <span class="keyword">if</span>(w&lt;=h)&#123;</span><br><span class="line">        glOrtho(<span class="number">0.0f</span>, <span class="number">250.0f</span>, <span class="number">0.0f</span>, <span class="number">250.0f</span>*h/w, <span class="number">1.0f</span>, <span class="number">-1.0f</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        glOrtho(<span class="number">0.0f</span>, <span class="number">250.0f</span>*h/w, <span class="number">0.0f</span>, <span class="number">250.0f</span>, <span class="number">1.0f</span>, <span class="number">-1.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在窗口中绘制图形</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Redrow</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//用当前背景色填充窗口</span></span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//画出坐标线</span></span><br><span class="line">    DrawCordinateLine();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (m_drawmode) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            DDAcreateLine(<span class="number">0</span>,<span class="number">0</span>,<span class="number">24</span>,<span class="number">20</span>,m_pointnumber);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            MidBresenhamLine(<span class="number">0</span>,<span class="number">0</span>,<span class="number">24</span>,<span class="number">20</span>,m_pointnumber);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            BresenhamLine(<span class="number">0</span>,<span class="number">0</span>,<span class="number">24</span>,<span class="number">20</span>,m_pointnumber);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            MidBresenhamCircle(<span class="number">10</span>,m_pointnumber);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            BFS(<span class="number">12</span>,<span class="number">12</span>,m_pointnumber);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    glutSwapBuffers();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置时间回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TimerFunc</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m_pointnumber==<span class="number">0</span>) value=<span class="number">1</span>;</span><br><span class="line">    m_pointnumber=value;</span><br><span class="line">    glutPostRedisplay();</span><br><span class="line">    glutTimerFunc(<span class="number">500</span>, TimerFunc, value+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置键盘回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Keyboard</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> key,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(key==<span class="string">&#x27;1&#x27;</span>) m_drawmode=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(key==<span class="string">&#x27;2&#x27;</span>) m_drawmode=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(key==<span class="string">&#x27;3&#x27;</span>) m_drawmode=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span>(key==<span class="string">&#x27;4&#x27;</span>) m_drawmode=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span>(key==<span class="string">&#x27;5&#x27;</span>) m_drawmode=<span class="number">5</span>;</span><br><span class="line">    m_pointnumber=<span class="number">0</span>;</span><br><span class="line">    glutPostRedisplay();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glutInit(&amp;argc,argv);<span class="comment">//对GLUT库j初始化</span></span><br><span class="line">    <span class="comment">//初始化glut库opengl窗口的显示模式</span></span><br><span class="line">    glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB);<span class="comment">//指定窗口使用单缓存和RGB颜色模型//初始化窗口的显示模式</span></span><br><span class="line">    glutInitWindowSize(<span class="number">600</span>, <span class="number">600</span>);</span><br><span class="line">    glutInitWindowPosition(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    </span><br><span class="line">    glutCreateWindow(<span class="string">&quot;pyai&quot;</span>);<span class="comment">//创建一个名为矩形的窗口</span></span><br><span class="line">    glutDisplayFunc(Redrow);<span class="comment">//设置当前窗口的显示回调函数</span></span><br><span class="line">    glutReshapeFunc(ChangeSize);</span><br><span class="line">    glutKeyboardFunc(Keyboard);<span class="comment">//键盘响应回调函数</span></span><br><span class="line">    glutTimerFunc(<span class="number">500</span>, TimerFunc, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//窗口初始化</span></span><br><span class="line">    Initial();</span><br><span class="line">    glutMainLoop();<span class="comment">//启动GLUT事件处理循环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="反走样等"><a href="#反走样等" class="headerlink" title="反走样等"></a>反走样等</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;GLUT/GLUT.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> winWidth = <span class="number">400</span>, winHeight = <span class="number">300</span>;<span class="comment">///窗口的宽度和高度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myDisplay</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glClearColor(<span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);<span class="comment">///用当前背景色填充窗口</span></span><br><span class="line">    glColor3f(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);<span class="comment">///设置当前的绘图RGB颜色</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">///绘制不同大小的点</span></span><br><span class="line">    GLfloat sizes[<span class="number">2</span>];<span class="comment">///保存绘制点的尺寸范围</span></span><br><span class="line">    GLfloat step;<span class="comment">///保存绘制点尺寸的步长</span></span><br><span class="line">    GLfloat curSize;<span class="comment">///当前绘制的点的大小</span></span><br><span class="line">    glGetFloatv(GL_POINT_SIZE_RANGE, sizes);</span><br><span class="line">    glGetFloatv(GL_POINT_SIZE_GRANULARITY, &amp;step);</span><br><span class="line">    </span><br><span class="line">    curSize = sizes[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        glPointSize(curSize);</span><br><span class="line">        glBegin(GL_POINTS);</span><br><span class="line">        glVertex3f(<span class="number">25.0</span> + i * <span class="number">8</span>, <span class="number">200.0</span>, <span class="number">0.0</span>);</span><br><span class="line">        glEnd();</span><br><span class="line">        curSize += step * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">///绘制一条虚线</span></span><br><span class="line">    glEnable(GL_LINE_STIPPLE);</span><br><span class="line">    glLineStipple(<span class="number">1</span>, <span class="number">0x00FF</span>);</span><br><span class="line">    glBegin(GL_LINES);</span><br><span class="line">    glVertex3f(<span class="number">25.0</span>, <span class="number">120.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    glVertex3f(<span class="number">225.0</span>, <span class="number">120.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    glEnd();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">///绘制一条宽度为3的点划线</span></span><br><span class="line">    glLineWidth(<span class="number">3</span>);</span><br><span class="line">    glLineStipple(<span class="number">1</span>, <span class="number">0xFF0C</span>);</span><br><span class="line">    glBegin(GL_LINES);</span><br><span class="line">    glVertex3f(<span class="number">25.0</span>, <span class="number">80.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    glVertex3f(<span class="number">225.0</span>, <span class="number">80.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    glEnd();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">///增加重复因子绘制的点划线</span></span><br><span class="line">    glLineStipple(<span class="number">4</span>, <span class="number">0xFF0C</span>);</span><br><span class="line">    glBegin(GL_LINES);</span><br><span class="line">    glVertex3f(<span class="number">25.0</span>, <span class="number">40.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    glVertex3f(<span class="number">225.0</span>, <span class="number">40.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    glEnd();</span><br><span class="line">    glDisable(GL_LINE_STIPPLE);</span><br><span class="line">    </span><br><span class="line">    glFlush();<span class="comment">///刷新OpenGL命令队列</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeSize</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    winWidth = w; winHeight = h;</span><br><span class="line">    glViewport(<span class="number">0</span>, <span class="number">0</span>, w, h);<span class="comment">///指定窗口显示区域</span></span><br><span class="line">    glMatrixMode(GL_PROJECTION);<span class="comment">///设置投影参数</span></span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    gluOrtho2D(<span class="number">0.0</span>, winWidth, <span class="number">0.0</span>, winHeight);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///字符显示</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">char</span> s[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len, i;</span><br><span class="line">    glRasterPos2f(x, y);</span><br><span class="line">    len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line">    glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    <span class="keyword">char</span> ss[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    output(<span class="number">100</span>, <span class="number">100</span>, ss);</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///反走样技术</span></span><br><span class="line">GLuint linelist;<span class="comment">///指定显示列表ID</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initial</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glClearColor(<span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    glLineWidth(<span class="number">12.0f</span>);</span><br><span class="line">    glColor4f(<span class="number">0.0</span>, <span class="number">0.6</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    linelist = glGenLists(<span class="number">1</span>);</span><br><span class="line">    glNewList(linelist, GL_COMPILE);</span><br><span class="line">    glBegin(GL_LINE_LOOP);</span><br><span class="line">    glVertex2f(<span class="number">1.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">    glVertex2f(<span class="number">4.0f</span>, <span class="number">2.0f</span>);</span><br><span class="line">    glVertex2f(<span class="number">2.0f</span>, <span class="number">5.0f</span>);</span><br><span class="line">    glEnd();</span><br><span class="line">    glEndList();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeSize1</span><span class="params">(GLsizei w, GLsizei h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h == <span class="number">0</span>)</span><br><span class="line">        h = <span class="number">1</span>;</span><br><span class="line">    glViewport(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">    glMatrixMode(GL_PROJECTION);</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    <span class="keyword">if</span> (w &lt;= h)</span><br><span class="line">        gluOrtho2D(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.0</span>, <span class="number">6.0</span>*(GLfloat)h / (GLfloat)w);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        gluOrtho2D(<span class="number">0.0</span>, <span class="number">5.0</span>*(GLfloat)w / (GLfloat)h, <span class="number">0.0</span>, <span class="number">6.0</span>);</span><br><span class="line">    glMatrixMode(GL_MODELVIEW);</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Displayt</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line">    glCallList(linelist);</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Displayw</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line">    glEnable(GL_LINE_SMOOTH);<span class="comment">///使用反走样</span></span><br><span class="line">    glEnable(GL_BLEND);<span class="comment">///启用混合函数</span></span><br><span class="line">    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);<span class="comment">///指定混合函数</span></span><br><span class="line">    glCallList(linelist);</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glutInit(&amp;argc, argv);</span><br><span class="line">    </span><br><span class="line">    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);</span><br><span class="line">    glutInitWindowSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">    glutInitWindowPosition(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;pyai&quot;</span>);</span><br><span class="line">    glutDisplayFunc(myDisplay);</span><br><span class="line">    glutReshapeFunc(ChangeSize);</span><br><span class="line">    Initial();</span><br><span class="line">    </span><br><span class="line">    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);</span><br><span class="line">    glutInitWindowSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">    glutInitWindowPosition(<span class="number">300</span>, <span class="number">600</span>);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;pyai&quot;</span>);</span><br><span class="line">    glutDisplayFunc(Display);</span><br><span class="line">    glutReshapeFunc(ChangeSize);</span><br><span class="line">    Initial();</span><br><span class="line">    </span><br><span class="line">    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);</span><br><span class="line">    glutInitWindowSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">    glutInitWindowPosition(<span class="number">600</span>, <span class="number">300</span>);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;pyai&quot;</span>);</span><br><span class="line">    glutDisplayFunc(Displayt);</span><br><span class="line">    glutReshapeFunc(ChangeSize1);</span><br><span class="line">    Initial();</span><br><span class="line">    </span><br><span class="line">    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);</span><br><span class="line">    glutInitWindowPosition(<span class="number">600</span>, <span class="number">600</span>);</span><br><span class="line">    glutInitWindowSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;pyai 反走样&quot;</span>);</span><br><span class="line">    glutDisplayFunc(Displayw);</span><br><span class="line">    glutReshapeFunc(ChangeSize1);</span><br><span class="line">    Initial();</span><br><span class="line">    glutMainLoop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="橡皮筋技术"><a href="#橡皮筋技术" class="headerlink" title="橡皮筋技术"></a>橡皮筋技术</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;GLUT/GLUT.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> winWidth=<span class="number">400</span>,winHeight=<span class="number">300</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义变量</span></span><br><span class="line"><span class="keyword">int</span> cur_x,cur_y;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NodeLine</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    NodeLine(<span class="keyword">int</span> _x,<span class="keyword">int</span> _y):x(_x),y(_y)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;NodeLine&gt;ve;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    glClearColor(<span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeSize</span><span class="params">(<span class="keyword">int</span> w,<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">    winWidth=w;winHeight=h;</span><br><span class="line">    glViewport(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">    glMatrixMode(GL_PROJECTION);</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    gluOrtho2D(<span class="number">0.0</span>, winWidth, <span class="number">0.0</span>,winHeight);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line">    glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    <span class="comment">//绘制折线</span></span><br><span class="line">    glBegin(GL_LINE_STRIP);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ve.size();i++)&#123;</span><br><span class="line">        glVertex2d(ve[i].x, ve[i].y);</span><br><span class="line">    &#125;</span><br><span class="line">    glVertex2d(cur_x, cur_y);</span><br><span class="line">    glEnd();</span><br><span class="line">    glutSwapBuffers();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MousePlot</span><span class="params">(GLint button,GLint action,GLint xMouse,GLint yMouse)</span></span>&#123;<span class="comment">//鼠标函数</span></span><br><span class="line">    <span class="comment">//按下鼠标左键绘制折线</span></span><br><span class="line">    <span class="keyword">if</span>(button==GLUT_LEFT_BUTTON&amp;&amp;action==GLUT_DOWN)&#123;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;&quot;x:&quot;&lt;&lt;xMouse&lt;&lt;&quot;y:&quot;&lt;&lt;yMouse&lt;&lt;&quot;size:&quot;&lt;&lt;ve.size()&lt;&lt;endl;</span></span><br><span class="line">        ve.push_back(&#123;xMouse,winHeight-yMouse&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//按下鼠标右键结束绘制</span></span><br><span class="line">    <span class="keyword">if</span>(button==GLUT_RIGHT_BUTTON&amp;&amp;action==GLUT_DOWN)&#123;</span><br><span class="line">        ve.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    glutPostRedisplay();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PassiveMouseMove</span><span class="params">(GLint xMouse,GLint yMouse)</span></span>&#123;<span class="comment">//鼠标移动函数</span></span><br><span class="line">    <span class="comment">//记录鼠标指针的当前位置</span></span><br><span class="line">    cur_x=xMouse;</span><br><span class="line">    cur_y=winHeight-yMouse;</span><br><span class="line">    glutPostRedisplay();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    glutInit(&amp;argc, argv);</span><br><span class="line">    glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB);</span><br><span class="line">    glutInitWindowSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">    glutInitWindowPosition(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;橡皮筋技术&quot;</span>);</span><br><span class="line">    glutDisplayFunc(Display);</span><br><span class="line"></span><br><span class="line">    glutReshapeFunc(ChangeSize);</span><br><span class="line">    glutMouseFunc(MousePlot);</span><br><span class="line">    glutPassiveMotionFunc(PassiveMouseMove);</span><br><span class="line"></span><br><span class="line">    initial();</span><br><span class="line">    glutMainLoop();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;GLUT/GLUT.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> winwidth = <span class="number">400</span>, winheight = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> iPointNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x1 = <span class="number">0</span>, x2 = <span class="number">0</span>, x3 = <span class="number">0</span>, x4 = <span class="number">0</span>, y1 = <span class="number">0</span>, y2 = <span class="number">0</span>, y3 = <span class="number">0</span>, y4 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initial</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    glClearColor(<span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeSize</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">    winwidth = w;</span><br><span class="line">    winheight = h;</span><br><span class="line">    glViewport(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">    glMatrixMode(GL_PROJECTION);</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    gluOrtho2D(<span class="number">0.0</span>, winwidth, <span class="number">0.0</span>, winheight);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> bb = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line">    glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    <span class="keyword">if</span> (bb&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        glBegin(GL_QUADS);</span><br><span class="line">        glVertex2i(x2, y2);</span><br><span class="line">        glVertex2i(x1, y1);</span><br><span class="line">        glVertex2i(x3, y3);</span><br><span class="line">        glVertex2i(x4, y4);</span><br><span class="line">        glEnd();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    glutSwapBuffers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MousePlot</span><span class="params">(GLint button, GLint action, GLint xMouse, GLint yMouse)</span><span class="comment">//鼠标函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//按下鼠标左键绘制折线</span></span><br><span class="line">    <span class="keyword">if</span> (button == GLUT_LEFT_BUTTON &amp;&amp; action == GLUT_DOWN)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bb==<span class="number">0</span>) &#123;</span><br><span class="line">            bb = <span class="number">1</span>;</span><br><span class="line">            x1 = xMouse;</span><br><span class="line">            y1 = winheight- yMouse;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            bb = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//按下鼠标右键结束绘制</span></span><br><span class="line">    <span class="keyword">if</span> (button == GLUT_RIGHT_BUTTON &amp;&amp; action == GLUT_DOWN)</span><br><span class="line">    &#123;</span><br><span class="line">        bb = <span class="number">0</span>;</span><br><span class="line">        x1 = x2 = x3 = x4 = y1 = y2 = y3 = y4 = <span class="number">0</span>;</span><br><span class="line">        glutPostRedisplay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PassiveMouseMove</span><span class="params">(GLint xMouse, GLint yMouse)</span><span class="comment">//鼠标移动函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记录鼠标指针的当前位置</span></span><br><span class="line">    <span class="keyword">if</span> (bb==<span class="number">1</span>) &#123;</span><br><span class="line">        x4 = xMouse;</span><br><span class="line">        y4 =winheight - yMouse;</span><br><span class="line">        x2 = x4;</span><br><span class="line">        x3 = x1;</span><br><span class="line">        y2 = y1;</span><br><span class="line">        y3 = y4;</span><br><span class="line">        glutPostRedisplay();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glutInit(&amp;argc, argv);</span><br><span class="line">    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);</span><br><span class="line">    glutInitWindowSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">    glutInitWindowPosition(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;pyai&quot;</span>);</span><br><span class="line">    glutDisplayFunc(Display);</span><br><span class="line">    </span><br><span class="line">    glutReshapeFunc(ChangeSize);            <span class="comment">//指定窗口在整形回调函数</span></span><br><span class="line">    glutMouseFunc(MousePlot);               <span class="comment">//指定鼠标响应函数</span></span><br><span class="line">    glutPassiveMotionFunc(PassiveMouseMove);<span class="comment">//指定鼠标移动响应函数</span></span><br><span class="line">    </span><br><span class="line">    Initial();</span><br><span class="line">    glutMainLoop();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-树</title>
      <link href="//Sophomore/data-structure-tree/"/>
      <url>//Sophomore/data-structure-tree/</url>
      
        <content type="html"><![CDATA[<h2 id="关于树的算法及其复杂度和适用场景分析"><a href="#关于树的算法及其复杂度和适用场景分析" class="headerlink" title="关于树的算法及其复杂度和适用场景分析"></a>关于树的算法及其复杂度和适用场景分析</h2><h3 id="HuffmanTree-哈夫曼树"><a href="#HuffmanTree-哈夫曼树" class="headerlink" title="$HuffmanTree$(哈夫曼树)"></a>$HuffmanTree$(哈夫曼树)</h3><p>小知识点</p><ol><li>因为哈夫曼树除了叶子结点外，其他节点都是两个结点合并构成的，所以不存在度为1的结点。</li><li>因为$n_{sum}=n_0+n_1+n_2$，并且$n_1=0$。</li><li>且总的分支数加根结点就是总的结点个数，所以$n_{sum}=2n_2+1$。</li><li>综上可得$n_{sum}=2n_0-1$。</li></ol><a id="more"></a><p>存储结构如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> weight;                 <span class="comment">//结点的权值</span></span><br><span class="line">    <span class="keyword">int</span> parent,lchild,rchild;   <span class="comment">//结点的双亲，左孩子，右孩子的下标</span></span><br><span class="line">&#125;HTNode,*HuffmanTree;           <span class="comment">//动态分配数组存储哈夫曼树</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大二-数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-图</title>
      <link href="//Sophomore/data-structure-graph/"/>
      <url>//Sophomore/data-structure-graph/</url>
      
        <content type="html"><![CDATA[<h2 id="关于图的算法及其复杂度和适用场景分析"><a href="#关于图的算法及其复杂度和适用场景分析" class="headerlink" title="关于图的算法及其复杂度和适用场景分析"></a>关于图的算法及其复杂度和适用场景分析</h2><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><h4 id="prim-算法-普里姆算法"><a href="#prim-算法-普里姆算法" class="headerlink" title="$prim$算法(普里姆算法)"></a>$prim$算法(普里姆算法)</h4><ul><li>时间复杂度$O(N^2)$</li><li>适用场景：<code>稠密图</code></li><li>又叫<code>加点法</code></li></ul><a id="more"></a><p><strong>模版例题：</strong> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1102" rel="external nofollow noreferrer">HDU-1102</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> N, Q;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Prim 求 MST</span></span><br><span class="line"><span class="comment"> 耗费矩阵 cost[][]，标号从 1 开始，1 ～ n</span></span><br><span class="line"><span class="comment"> 返回最小生成树的权值，返回 -1 表示原图不联通</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> cost[MAXN][MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> lowc[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Prim</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    vis[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++)&#123;</span><br><span class="line">        lowc[i] = cost[<span class="number">1</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> minc = INF;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[j] &amp;&amp; minc &gt; lowc[j])&#123;</span><br><span class="line">                minc = lowc[j];</span><br><span class="line">                p = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(minc == INF) <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">// 原图不联通</span></span><br><span class="line">        ans += minc;</span><br><span class="line">        vis[p] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[j] &amp;&amp; lowc[j] &gt; cost[p][j])&#123;</span><br><span class="line">                lowc[j] = cost[p][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;cost[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Q);</span><br><span class="line">        <span class="keyword">while</span>(Q--)&#123;</span><br><span class="line">            <span class="keyword">int</span> u, v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">            cost[u][v] = cost[v][u] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Prim());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Kruskal-算法-克鲁斯卡尔算法"><a href="#Kruskal-算法-克鲁斯卡尔算法" class="headerlink" title="$Kruskal$算法(克鲁斯卡尔算法)"></a>$Kruskal$算法(克鲁斯卡尔算法)</h4><ul><li>时间复杂度$O(elog_2e)$</li><li>适用场景：<code>稀疏图</code></li><li>又叫<code>加边法</code>，所以对边操作特别方便（如让求最小生成树最大或最小边的裸题）</li></ul><h5 id="例题：POJ-1251"><a href="#例题：POJ-1251" class="headerlink" title="例题：POJ - 1251"></a>例题：<a href="https://cn.vjudge.net/problem/14339/origin" rel="external nofollow noreferrer">POJ - 1251</a></h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">27</span>+<span class="number">10</span>;<span class="comment">//最大点数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM=<span class="number">75</span>+<span class="number">10</span>;<span class="comment">//最大边数</span></span><br><span class="line"><span class="keyword">int</span> F[MAXN];<span class="comment">//并查集使用</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">&#125;edge[MAXM];</span><br><span class="line"><span class="keyword">int</span> tol;<span class="comment">//边数，加边前赋值为0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    edge[tol].u=u;</span><br><span class="line">    edge[tol].v=v;</span><br><span class="line">    edge[tol++].w=w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排序函数，将边按照权值从小到大排序</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a,Edge b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(F[x]==<span class="number">-1</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> F[x]=find(F[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传入点数，返回最小生成树的权值，如果不连通返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kruskal</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(F,<span class="number">-1</span>,<span class="keyword">sizeof</span> F);</span><br><span class="line">    sort(edge,edge+tol,cmp);</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;<span class="comment">//计算加入的边数</span></span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tol;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=edge[i].u;</span><br><span class="line">        <span class="keyword">int</span> v=edge[i].v;</span><br><span class="line">        <span class="keyword">int</span> w=edge[i].w;</span><br><span class="line">        <span class="keyword">int</span> t1=find(u);</span><br><span class="line">        <span class="keyword">int</span> t2=find(v);</span><br><span class="line">        <span class="keyword">if</span>(t1!=t2)&#123;</span><br><span class="line">            ans+=w;</span><br><span class="line">            F[t1]=t2;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt&lt;n<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//不连通</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n,k,w;</span><br><span class="line">    <span class="keyword">char</span> u,v;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</span><br><span class="line">        tol=<span class="number">0</span>;<span class="comment">//初始化边数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;k;</span><br><span class="line">            <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;v&gt;&gt;w;</span><br><span class="line">                addedge(u-<span class="string">&#x27;A&#x27;</span>,v-<span class="string">&#x27;A&#x27;</span>,w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;Kruskal(n)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><h4 id="Dijkstra-算法-迪杰斯特拉算法"><a href="#Dijkstra-算法-迪杰斯特拉算法" class="headerlink" title="$Dijkstra$算法(迪杰斯特拉算法)"></a>$Dijkstra$算法(迪杰斯特拉算法)</h4><ul><li>时间复杂度：不用堆优化$O(N^2)$，堆优化以后$O(Nlog_2N)$</li></ul><h4 id="Floyd-算法-弗洛伊德算法"><a href="#Floyd-算法-弗洛伊德算法" class="headerlink" title="$Floyd$算法(弗洛伊德算法)"></a>$Floyd$算法(弗洛伊德算法)</h4><ul><li>时间复杂度：$O(N^3)$</li></ul><h2 id="需要注意的小知识点"><a href="#需要注意的小知识点" class="headerlink" title="需要注意的小知识点"></a>需要注意的小知识点</h2><ol><li><p>图的<code>逆邻接表</code>存储只适用于<code>有向</code>图</p></li><li><p><code>邻接表</code>不便于求<code>入度</code>，<code>逆邻接表</code>不便于求<code>出度</code>，而<code>十字链表</code>便于求<code>入度和出度</code>。</p></li><li><p>图的<code>BFS</code>生成树的树高$\le$<code>DFS</code>生成树的树高（如只有一个点的图和形成一个环的图）</p></li><li><p>$MST \bigl( Minimum Spanning Tree \bigr)$性质：假设$N=(V,E)$是一个联通网，$U$是顶点集$V$的一个非空子集(可以从图的定义理解：$G=(V,E)$中$V$就是顶点的有穷非空子集，在图中不可以为空，而树是可以为空的。)，若$(u,v)$是一条具有最小权值（代价）的边，其中$u\subseteq U, v\subseteq V-U$，则必存在一颗包含$(u,v)$的最小生成树。</p></li></ol><h4 id="一些名词解释"><a href="#一些名词解释" class="headerlink" title="一些名词解释"></a>一些名词解释</h4><ul><li>稀疏图：有很少边或弧(如 $e&lt;nlog_2n$ ( $n$ :点数, $e$ :边数))的图称为稀疏图</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大二-数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉函数</title>
      <link href="//AC-everyday/euler/"/>
      <url>//AC-everyday/euler/</url>
      
        <content type="html"><![CDATA[<h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><img data-src="/images/acm/2019/euler.png" alt="euler"><p>在数论中，对正整数$n$，欧拉函数$\phi(n)$是小于或等于$n$的正整数中与$n$互质的数的数目。</p><p>求单个数的欧拉函数值时间复杂度可以为$Olog_2n$，代码如下:</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">euler</span><span class="params">(LL n)</span> </span>&#123;</span><br><span class="line">    LL ans=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">            ans-=ans/i;</span><br><span class="line">            <span class="keyword">while</span>(n%i==<span class="number">0</span>) n/=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">1</span>) ans-=ans/n;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>素数<code>n</code>的欧拉函数值是<code>n-1</code></p></blockquote><center><font size="5">下面是一个用到上述函数的题目</font></center>---<h3 id="1003-不是签到题XD"><a href="#1003-不是签到题XD" class="headerlink" title="1003 - 不是签到题XD"></a>1003 - 不是签到题XD</h3><p>小明是一个贪心的孩子，他天天想着怎么让自己省钱。有一天他去商店买物品，然而他不是普通人，他有一个马基雅把库内的能力，可以只花掉商品价格与他今日幸运数字x的最大公约数的钱就能买走这个商品。那么问题来了，如果他要买价值从1到 x 元的 x 个商品，一共要花掉多少钱。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>输入包含一个整数，代表小明今日的幸运数字 x 。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>请输出小明的花费</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><p>样例1的输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><p>样例1的输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><p>样例2的输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>样例2的输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>样例3的输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>样例3的输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>$1\leq x \leq 10^{11}$</p><hr><h3 id="题解如下"><a href="#题解如下" class="headerlink" title="题解如下"></a>题解如下</h3><blockquote><p>本题化简公式如下:</p></blockquote><p>$$<br>\sum_{i=1}^ngcd(i,x)=\sum_{k|x}k\phi(\frac{x}{k})<br>$$</p><blockquote><p>还有一些小细节，可以在$O(\sqrt{n}\log_2n)$时间复杂度内求解。</p></blockquote><p><strong>代码如下</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="function">LL <span class="title">euler</span><span class="params">(LL n)</span> </span>&#123;</span><br><span class="line">    LL ans=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">            ans-=ans/i;</span><br><span class="line">            <span class="keyword">while</span>(n%i==<span class="number">0</span>) n/=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">1</span>) ans-=ans/n;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    LL n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        LL ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">sqrt</span>(n);i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%i==<span class="number">0</span>) &#123;</span><br><span class="line">                ans+=euler(n/i)*i;</span><br><span class="line">                <span class="keyword">if</span>(n!=<span class="number">1</span>) ans+=euler(i)*(n/i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Hexo博客</title>
      <link href="//createBlog/"/>
      <url>//createBlog/</url>
      
        <content type="html"><![CDATA[<h4 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v12.10.0</span><br><span class="line">$ npm -v</span><br><span class="line">6.14.1</span><br><span class="line">$ git --version</span><br><span class="line">git version 2.23.0</span><br></pre></td></tr></table></figure><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p><code>npm install -g hexo-cli</code></p><h4 id="博客初始化"><a href="#博客初始化" class="headerlink" title="博客初始化"></a>博客初始化</h4><p>   首先cd到你要存你的博客的路径，我是cd到<code>~/blog</code>，然后 <code>hexo init</code> </p><h4 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h4><p>服务器系统: <code>centos7</code>(如果是<code>debian</code>或者<code>ubuntu</code>，只需将下面的<code>yum</code>改成<code>apt</code>即可)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在服务器端安装git</span><br><span class="line">yum install git</span><br><span class="line"># 在服务器端创建工作文件夹、裸仓库</span><br><span class="line">mkdir &#x2F;home&#x2F;git</span><br><span class="line">mkdir &#x2F;home&#x2F;git&#x2F;hexoblog</span><br><span class="line">git init --bare &#x2F;home&#x2F;git&#x2F;hexo.git</span><br><span class="line"># 新建钩子文件</span><br><span class="line">vim &#x2F;home&#x2F;git&#x2F;hexo.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure><p>把下面的代码放进去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">git --work-tree&#x3D;&#x2F;home&#x2F;git&#x2F;hexoblog --git-dir&#x3D;&#x2F;home&#x2F;git&#x2F;hexo.git checkout -f</span><br></pre></td></tr></table></figure><p>然后保存并退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 为文件添加执行权限</span><br><span class="line">chmod +x &#x2F;home&#x2F;git&#x2F;hexo.git&#x2F;hooks&#x2F;post-receive</span><br><span class="line"># 安装nginx并启动</span><br><span class="line">yum install -y nginx</span><br><span class="line">systemctl start nginx</span><br><span class="line"># 修改配置文件 debian用：vim &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default</span><br><span class="line">vim &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br></pre></td></tr></table></figure><p>接着修改下面两个信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    root &#x2F;home&#x2F;git&#x2F;hexoblog;  # 即存放静态文件的目录</span><br><span class="line">    server_name blog.pyai.top;  # 你的域名，需要解析到你服务器的公网ip</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后重启 <code>nginx</code> 服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p>在自己本地的 <code>Hexo</code> 配置文件中修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo: root@服务器IP:&#x2F;home&#x2F;git&#x2F;hexo.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>然后在博客根目录运行 <code>npm install hexo-deployer-git --save</code><br>把博客发送到服务器 <code>hexo g &amp;&amp; hexo d</code>，此时在浏览器输入域名就可以看到博客了。</p><h4 id="为网站添加HTTPS安全证书"><a href="#为网站添加HTTPS安全证书" class="headerlink" title="为网站添加HTTPS安全证书"></a>为网站添加HTTPS安全证书</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install certbot python-certbot-nginx</span><br><span class="line">sudo certbot --nginx</span><br></pre></td></tr></table></figure><p>之后输入邮箱、需要部署的域名、部署方式，看到Congratulations就已经部署成功了。<br>再回到nginx的配置文件中把信息更新一下即可访问。<br>由于Let的加密证书有效期是90天，之后就会过期，需要重新再做一次上面的操作，Certbot提供了一个自动续期的功能，只需：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot renew --dry-run</span><br></pre></td></tr></table></figure><p><strong>小技巧</strong></p><ul><li><code>hexo g &amp;&amp; hexo d </code>可以简化为<code>hexo d -g</code></li><li>新建文章是<code>hexo new &quot;标题&quot;</code></li><li>如果你本地<code>hexo s</code>后显示的和网页上的不一致可以做下面的尝试：<ol><li>清除一下浏览器的缓存。</li><li><code>hexo clean</code>一下，然后重新<code>hexo d -g</code>。</li></ol></li></ul><h5 id="开启本地搜索功能"><a href="#开启本地搜索功能" class="headerlink" title="开启本地搜索功能"></a>开启本地搜索功能</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p><strong><mark class="label danger">站点配置文件</mark></strong> 添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Search </span><br><span class="line">search:</span><br><span class="line">  path: .&#x2F;public&#x2F;search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><p><strong><mark class="label danger">主题配置文件</mark></strong> 找到 <strong><mark class="label primary">local_search</mark></strong> 并修改成下面的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: auto</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure><h4 id="添加又拍云联盟-2019-10-12"><a href="#添加又拍云联盟-2019-10-12" class="headerlink" title="添加又拍云联盟 2019-10-12"></a>添加又拍云联盟 2019-10-12</h4><p>logo添加是参考的 <a href="https://leotian.cn/" rel="external nofollow noreferrer">https://leotian.cn/</a> 的。</p><p>修改目录：<code>themes/next/layout/_partials/</code> 下的 <code>footer.swig</code> 文件，增加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hosted by</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.upyun.com/?utm_source=lianmeng&amp;utm_medium=referral&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;/images/upyun_logo.min.svg&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;width: 60px; display: inline; vertical-align: middle;&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="插件集合"><a href="#插件集合" class="headerlink" title="插件集合"></a>插件集合</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">本地搜索 npm install hexo-generator-search --save</span><br><span class="line">百度自动提交 npm i hexo-baidu-url-submit</span><br><span class="line">部署 npm install hexo-deployer-git --save</span><br><span class="line">站点地图 npm install hexo-generator-sitemap --save</span><br><span class="line">baidu站点地图 npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">npm i hexo-filter-nofollow --save</span><br></pre></td></tr></table></figure><h4 id="加入谷歌广告"><a href="#加入谷歌广告" class="headerlink" title="加入谷歌广告"></a>加入谷歌广告</h4><p>在<code>/themes/next/layout/_partials/comments.swig</code>文件添加广告代码。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
